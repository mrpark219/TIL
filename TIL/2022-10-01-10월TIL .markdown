---
layout: post
title: "2022년 10월 TIL"
date: 2022-10-01 22:00:00 +0900
categories: 202210 TIL
---

---

### 10/1(토)

오브젝트 - 10. 상속과 코드 재사용  
[p.308 ~ p.310]

-   객체지향 프로그래밍의 장점 중 하나는 코드를 재사용하기가 용이하다는 것이다. 전통적인 패러다임에서 코드를 재사용하는 방법은 코드를 복사한 후 수정하는 것이다. 반면 객체지향에서는 코드를 재사용하기 위해 '새로운' 코드를 추가한다. 객체지향에서는 코드를 일반적으로 클래스 안에 작성하기 때문에 객체지향에서 클래스를 재사용하는 전통적인 방법은 새로운 클래스를 추가하는 것이다.  
    재사용 관점에서 **상속**이란 클래스 안에 정의된 인스턴스 변수와 메서드를 자동으로 새로운 클래스에 추가하는 구현 기법이다. 객체지향에서는 상속 외에도 코드를 효과적으로 재사용할 수 있는 방법이 한 가지 더 있다. 바로 **합성**이다. 합성이란 새로운 클래스의 인스턴스 안에 기존 클래스의 인스턴스를 포함하는 방법이다.  
    코드를 재사용하려는 강력한 동기 이면에는 중복된 코드를 제거하려는 욕망이 숨어 있다.  
    중복 코드는 사람들의 마음속에 의심과 불신의 씨앗을 뿌린다. 중복 코드는 우리를 주저하게 만들뿐만 아니라 동료를 의심하게 만든다.
-   **DRY 원칙**:  
     중복 코드는 변경을 방해한다. 이것이 중복 코드를 제거해야 하는 가장 큰 이유다. 프로그램의 본질은 비즈니스와 관련된 지식을 코드로 변환하는 것이다. 이 지식은 항상 변하기 때문에 변경되는 지식에 맞춰 지식을 표현하는 코드 역시 변경해야 한다.  
     중복 코드가 가지는 가장 큰 문제는 코드를 수정하는 데 필요한 노력을 몇 배로 증가시킨다는 것이다. 우선 어떤 코드가 중복인지를 찾아야 한다. 중복 코드의 묶음을 찾았다면 찾아낸 모든 코드를 일관되게 수정해야 한다. 그 뒤 모든 중복 코드를 개별적으로 테스트해서 동일한 결과를 내놓는지 확인해야 한다. 중복 코드는 수정과 테스트에 드는 비용을 증가시킨다.  
     중복 여부를 판단하는 기준은 **변경**이다. 요구사항이 변경됐을 때 두 코드를 함께 수정해야 한다면 이 코드는 중복이다. 반면 함께 수정할 필요가 없다면 중복이 아니다. 코드의 모양이 서로 비슷한 것은 중복의 징후일 뿐 중복 여부를 결정하는 것은 코드가 변경에 대응하는 방식이다.  
     신뢰할 수 있고 수정하기 쉬운 소프트웨어를 만드는 효과적인 방법 중 하나는 중복을 제거하는 것이다. 엔드류 헌트와 데이비드 토마스는 프로그래머들이 **DRY 원칙**을 따라야 한다고 말한다. DRY는 '반복하지 마라'라는 뜻의 **Don't Repeat Yourself**의 첫 글자를 모아 만든 용어로 간단히 동일한 지식을 중복하지 말라는 뜻으로 해석할 수 있다.  
     DRY 원칙은 **한 번, 단 한번(Once and Only Once) 원칙** 또는 **단일 지점 제어(Single-Point Control) 원칙**이라고도 부른다.
    > DRY 원칙: 모든 지식은 시스템 내에서 단일하고, 애매하지 않고, 정말로 믿을 만한 표현 양식을 가져야 한다.

---

### 10/2(일)

오브젝트 - 10. 상속과 코드 재사용  
[p.310 ~ p.320]

-   많은 코드 더미 속에서 어떤 코드가 중복인지를 파악하는 일은 쉬운 일이 아니다. 중복 코드는 항상 함꼐 수정돼야 하기 때문에 수정할 때 하나라도 빠트린다면 버그로 이어질 것이다. 또한, 중복 코드를 수정하는 과정에서 중복 코드를 서로 다르게 수정할 가능성도 있다.  
    중복 코드를 제거하지 않은 상태에서 코드를 수정할 수 있는 유일한 방법은 새로운 중복 코드를 추가하는 것뿐이다. 새로운 중복 코드를 추가하는 과정에서 코드의 일관성이 무너질 위험이 있다. 더 큰 문제는 중복 코드가 늘어날수록 애플리케이션은 변경에 취약해지고 버그가 발생할 가능성이 높아진다는 것이다.
-   특정한 상황을 처리하기 위해 만들어진 두 클래스 사이의 중복 코드를 제거하는 방법은 클래스를 하나로 합치고, 상황을 구별하기 위한 타입 코드를 추가한 뒤 타입 코드의 값에 따라 로직을 분기시키는 것이다. 하지만 타입 코드를 사용하는 클래스는 낮은 응집도와 높은 결합도라는 문제에 시달리게 된다. 객체지향 프로그래밍 언어는 타입 코드를 사용하지 않고도 중복 코드를 관리할 수 있는 방법을 제공한다. 바로 **상속**이다.  
    상속의 기본 아이디어는 간단하다. 이미 존재하는 클래스와 유사한 클래스가 필요하다면 코드를 복사하지 말고 상속을 이용해 코드를 재사용하라는 것이다.
-   그러나 상속을 염두에 두고 설계되지 않은 클래스를 상속을 이용해 재사용하는 것은 쉽지 않다. 개발자는 재사용을 위해 상속 계층 사이에 무수히 많은 가정을 세웠을지도 모른다. 그 가정은 코드를 이해하기 어렵게 만들뿐만 아니라 직관에도 어긋날 수 있다. 상속을 이용해 코드를 재사용하기 위해서는 부모 클래스의 개발자가 세웠던 가정이나 추론 과정을 정확하게 이해해야 한다. 이것은 자식 클래스의 작성자가 부모 클래스의 구현 방법에 대해 정확한 지식을 가져야 한다는 것을 의미한다.  
    따라서 상속은 결합도를 높인다. 그리고 상속이 초래하는 부모 클래스와 자식 클래스 사이의 강한 결합이 코드를 수정하기 어렵게 만든다.

---

### 10/3(월)

오브젝트 - 10. 상속과 코드 재사용  
[p.320 ~ p.323]

-   자식 클래스의 메서드 안에서 super 참조를 이용해 부모 클래스의 메서드를 직접 호출할 경우 두 클래스는 강하게 결합된다. 따라서 super 호출을 제거할 수 있는 방법을 찾아 결합도를 제거해야 한다. 자식 클래스가 부모 클래스의 구현에 강하게 결합될 경우 부모 클래스의 변경에 의해 자식 클래스가 영향을 받는다. 상속을 사용하면 적은 노력으로도 새로운 기능을 쉽고, 빠르게 추가할 수 있지만 그로 인해 커다란 대가를 치러야 할 수도 있다.
-   상속 관계로 연결된 자식 클래스가 부모 클래스의 변경에 취약해지는 현상을 가리켜 **취약한 기반 클래스 문제(Fragile Base Class Problem, Brittle Base Class Problem)** 라고 부른다. 취약한 기반 클래스 문제는 코드 재사용을 목적으로 상속을 사용할 때 발생하는 가장 대표적인 문제로, 상속을 사용한다면 피할 수 없는 객체지향 프로그래밍의 근복적인 취약성이다.  
    취약한 기반 클래스 문제는 상속이라는 문맥 안에서 결합도가 초래하는 문제점을 가리키는 용어다. 상속 관계를 추가할수록 전체 시스템의 결합도가 높아진다는 사실을 알고 있어야 한다. 상속은 자식 클래스를 점진적으로 추가해서 기능을 확장하는 데는 용이하지만 높은 결합도로 인해 부모 클래스를 점진적으로 개선하는 것은 어렵게 만든다. 최악의 경우에는 모든 자식 클래스를 동시에 수정하고 테스트해야 할 수도 있다.  
    취약한 기반 클래스 문제는 캡슐화를 약화시키고 결합도를 높인다. 상속은 자식 클래스가 부모 클래스의 구현 세부사항에 의존하도록 만들기 때문에 캡슐화를 약화시킨다. 따라서 상속을 사용하면 부모 클래스의 퍼블릭 인터페이스가 아닌 구현을 변경하더라도 자식 클래스가 영향을 받기 쉬워진다. 상속 계층의 상위에 위치한 클래스에 가해지는 작은 변경만으로도 상속 계층에 속한 모든 자손들이 급격하게 요동칠 수 있다.

---

### 10/4(화)

오브젝트 - 10. 상속과 코드 재사용  
[p.324 ~ p.329]

-   상속받은 부모 클래스의 메서드가 자식 클래스의 내부 구조에 대한 규칙을 깨트릴 수 있다. 퍼블릭 인터페이스에 대한 고려 없이 단순히 코드 재사용을 위해 상속을 사용하는 것은 위험하다. 객체지향의 핵심은 객체들의 협력이다. 단순히 코드를 재사용하기 위해 불필요한 오퍼레이션이 인터페이스에 스며들도록 방치해서는 안 된다.  
    인트페이스 설계는 제대로 쓰기엔 쉽게, 엉터리로 쓰기엔 어렵게 만들어야 한다.
-   자식 클래스가 부모 클래스의 메서드를 오버라이딩할 경우 부모 클래스가 자신의 메서드를 사용하는 방법에 자식 클래스가 결합될 수 있다. 따라서 조슈아 블로치는 클래스가 상속되기를 바란다면 상속을 위해 클래스를 설계하고 문서화해야 하며, 그렇지 않은 경우에는 상속을 금지시켜야 한다고 주장한다.  
    조슈아 블로치는 오버라이딩 가능한 메서드들의 자체 사용(self-use), 즉 그 메서드들이 같은 클래스의 메서드를 호출하는지에 대해 반드시 문서화해야 한다고 말한다. 또한, 각각의 public이나 protected 메서드 및 생성자가 어떤 오버라이딩 가능한 메서드를 호출하는지, 어떤 순서로 하는지, 호출한 결과가 다음 처리에 어떤 영향을 주는지에 대해서도 반드시 문서화해야 한다고 말한다.  
    잘된 API 문서는 메서드가 무슨 일(what)을 하는지를 기술해야 하고, 어떻게 하는지(how)를 설명해서는 안 된다는 통념이 있지만, 서브 클래스가 안전할 수 있게끔 클래스를 문서화하려면 클래스의 상세 구현 내역을 기술해야 한다. 이것은 상속이 캡슐화를 위반함으로써 초래된 불행이다.

---

### 10/5(수)

오브젝트 - 10. 상속과 코드 재사용  
[p.329 ~ p.333]

-   상속을 사용하면 자식 클래스가 부모 클래스의 메서드를 오버라이딩하거나 불필요한 인터페이스를 상속받지 않았음에도 부모 클래스를 수정할 때 자식 클래스를 함꼐 수정해야 하는 문제가 발생한다. 상속을 사용하면 자식 클래스가 부모 클래스의 구현에 강하게 결합되기 때문에 이 문제를 피하기는 어렵다.  
    결합도란 다른 대상에 대해 알고 있는 지식의 양이다. 상속은 기본적으로 부모 클래스의 구현을 재사용한다는 기본 전제를 따르기 떄문에 자식 클래스가 부모 클래스의 내부에 대해 속속들이 알도록 강요한다.  
    조슈아 블로치는 이 문제에 대해 다음과 같이 말했다. 서브 클래스는 올바른 기능을 위해 슈퍼클래스의 세부적인 구현에 의존한다. 슈퍼클래스의 구현은 릴리스를 거치면서 변경될 수 있고, 그에 따라 서브 클래스의 코드를 변경하지 않더라도 오류가 발생할 수 있다. 슈퍼 클래스의 작성자가 확장될 목적으로 특별히 그 클래스를 설계하지 않았다면 서브 클래스는 슈퍼클래스와 보조를 맞춰서 진화해야 한다.  
    클래스를 상속하면 결합도로 인해 자식 클래스와 부모 클래스의 구현을 영원히 변경하지 않거나, 자식 클래스와 부모 클래스를 동시에 변경해야 한다.
-   취약한 기반 클래스 문제는 **추상화**를 통해 위험을 줄일 수 있다. 상속에 가장 큰 문제점은 자식 클래스와 부모 클래스가 강하게 결합되어 있는 것이다. 이 문제를 해결하는 가장 일반적인 방법은 자식 클래스가 부모 클래스의 구현이 아닌 추상화에 의존하도록 만드는 것이다. 즉, 부모 클래스와 자식 클래스 모두 추상화에 의존하도록 수정해야 한다.  
    코드 중복을 제거하기 위해 상속을 도입할 때는 두 가지 원칙이 있다.

    1. 두 메서드가 유사하게 보인다면 차이점을 메서드로 추출하면 된다. 메서드 추출을 통해 두 메서드를 동일한 형태로 보이도록 만들 수 있다.
    2. 부모 클래스의 코드를 하위로 내리지 말고 자식 클래스의 코드를 상위로 올리는 것이 좋다. 부모 클래스의 구체적인 메서드를 자식 클래스로 내리는 것보다 자식 클래스의 추상적인 메서드를 부모 클래스로 올리는 것이 재사용성과 응집도 측면에서 더 뛰어난 결과를 얻을 수 있다.

---

### 10/6(목)

오브젝트 - 10. 상속과 코드 재사용  
[p.333 ~ p.339]

-   코드 중복을 제거하기 위해 상속을 사용할 때는 '차이를 메서드로 추출하라' 원칙과 '중복 코드를 부모 클래스로 올려라' 원칙이 있다.
-   **차이를 메서드로 추출하라**:  
    가장 먼저 할 일은 중복 코드 안에서 차이점을 별도의 메서드로 추출하는 것이다. 이것은 "변하는 것으로부터 변하지 않는 것을 분리하라" 또는 "변하는 부분을 찾고 이를 캡슐화하라"라는 조언을 메서드 수준에서 적용한 것이다.  
    두 개의 유사한 클래스가 있고, 두 클래스의 메서드 구현 일부와 인스턴스 변수 목록이 다른 상황이라고 가정한다. 이때 먼저 할 일은 두 클래스의 메서드에서 서로 다른 부분을 별도의 메서드로 추출하는 것이다. 이때 추출한 메서드의 이름은 두 클래스에서 동일해야 한다. 이렇게 메서드를 추출하게 되면 두 클래스에서 구현의 일부가 달랐던 메서드는 서로 동일해질 것이고, 추출한 메서드 안에 서로 다른 부분을 격리시켜 놓을 수 있다. 이제 같은 코드를 부모 클래스로 올리면 된다.
-   **중복 코드를 부모 클래스로 올려라**:  
    위 상황을 만든 뒤에는 부모 클래스를 추가하면 된다. 목표는 모든 클래스들이 추상화에 의존하도록 만드는 것이기 때문에 이 클래스는 추상 클래스로 구현하는 것이 적합하다.  
    부모 클래스를 추가했으면 위에 만든 공통 부분(동일하게 만든 부분)을 부모 클래스로 이동시키면 된다. 공통 코드를 옮길 때 인스턴스 변수보다 메서드를 먼저 이동시키는 것이 편하다. 메서드를 옮기고 나면 그 메서드에 필요한 메서드나 인스턴스 변수가 무엇인지를 컴파일 에러를 통해 확인할 수 있기 때문이다. 컴파일 에러를 바탕으로 메서드와 인스턴스 변수를 이동시키면 불필요한 부분은 자식 클래스에 둔 채로 부모 클래스에 꼭 필요한 코드만 이동시킬 수 있다.  
    이동시키다 보면 차이점을 추출한 메서드도 옮겨야 한다. 이 경우 메서드의 시그니처는 동일하지만 내부 구현이 서로 다르기 때문에 메서드의 구현은 그대로 두고 공통 부분인 시그니처만 부모 클래스로 이동시켜야 한다. 시그니처만 이동하는 것이기 때문에 부모 클래스에서 해당 메서드를 추상 메서드로 선언하고, 자식 클래스에서 오버라이딩할 수 있도록 protected로 선언하는 것이 좋다.
-   위로 올리기(중복 코드를 부모 클래스로 올리기) 전략이 실패했더라도 수정하기 쉬운 문제를 발생시킨다. 추상화하지 않고 빼먹은 코드가 있더라도 하위 클래스가 해당 행동을 필요로 할 때가 오면 이 문제는 바로 눈에 띈다. 모든 하위 클래스가 이 행동을 할 수 있게 만들려면 여러 개의 중복 코드를 양산하거나 이 행동을 상위 클래스로 올리는 수밖에 없다. 즉, 위로 올리기에서 실수하더라도 추상화할 코드는 눈에 띄고 결국 상위 클래스로 올려지면서 코드의 품질이 높아진다. 하지만 이 리팩터링을 반대 방향으로 진행한다면, 다시 말해 구체적인 표현을 아래로 내리는 방식으로 현재 클래스를 구체 클래스에서 추상 클래스로 변경하려 하다면 작은 실수 한 번으로도 구체적인 행동을 상위 클래스에 남겨 놓게 된다.[Metz12]
