---
layout: post
title: "2022년 10월 TIL"
date: 2022-10-01 22:00:00 +0900
categories: 202210 TIL
---

---

### 10/1(토)

오브젝트 - 10. 상속과 코드 재사용  
[p.308 ~ p.310]

-   객체지향 프로그래밍의 장점 중 하나는 코드를 재사용하기가 용이하다는 것이다. 전통적인 패러다임에서 코드를 재사용하는 방법은 코드를 복사한 후 수정하는 것이다. 반면 객체지향에서는 코드를 재사용하기 위해 '새로운' 코드를 추가한다. 객체지향에서는 코드를 일반적으로 클래스 안에 작성하기 때문에 객체지향에서 클래스를 재사용하는 전통적인 방법은 새로운 클래스를 추가하는 것이다.  
    재사용 관점에서 **상속**이란 클래스 안에 정의된 인스턴스 변수와 메서드를 자동으로 새로운 클래스에 추가하는 구현 기법이다. 객체지향에서는 상속 외에도 코드를 효과적으로 재사용할 수 있는 방법이 한 가지 더 있다. 바로 **합성**이다. 합성이란 새로운 클래스의 인스턴스 안에 기존 클래스의 인스턴스를 포함하는 방법이다.  
    코드를 재사용하려는 강력한 동기 이면에는 중복된 코드를 제거하려는 욕망이 숨어 있다.  
    중복 코드는 사람들의 마음속에 의심과 불신의 씨앗을 뿌린다. 중복 코드는 우리를 주저하게 만들뿐만 아니라 동료를 의심하게 만든다.
-   **DRY 원칙**:  
     중복 코드는 변경을 방해한다. 이것이 중복 코드를 제거해야 하는 가장 큰 이유다. 프로그램의 본질은 비즈니스와 관련된 지식을 코드로 변환하는 것이다. 이 지식은 항상 변하기 때문에 변경되는 지식에 맞춰 지식을 표현하는 코드 역시 변경해야 한다.  
     중복 코드가 가지는 가장 큰 문제는 코드를 수정하는 데 필요한 노력을 몇 배로 증가시킨다는 것이다. 우선 어떤 코드가 중복인지를 찾아야 한다. 중복 코드의 묶음을 찾았다면 찾아낸 모든 코드를 일관되게 수정해야 한다. 그 뒤 모든 중복 코드를 개별적으로 테스트해서 동일한 결과를 내놓는지 확인해야 한다. 중복 코드는 수정과 테스트에 드는 비용을 증가시킨다.  
     중복 여부를 판단하는 기준은 **변경**이다. 요구사항이 변경됐을 때 두 코드를 함께 수정해야 한다면 이 코드는 중복이다. 반면 함께 수정할 필요가 없다면 중복이 아니다. 코드의 모양이 서로 비슷한 것은 중복의 징후일 뿐 중복 여부를 결정하는 것은 코드가 변경에 대응하는 방식이다.  
     신뢰할 수 있고 수정하기 쉬운 소프트웨어를 만드는 효과적인 방법 중 하나는 중복을 제거하는 것이다. 엔드류 헌트와 데이비드 토마스는 프로그래머들이 **DRY 원칙**을 따라야 한다고 말한다. DRY는 '반복하지 마라'라는 뜻의 **Don't Repeat Yourself**의 첫 글자를 모아 만든 용어로 간단히 동일한 지식을 중복하지 말라는 뜻으로 해석할 수 있다.  
     DRY 원칙은 **한 번, 단 한번(Once and Only Once) 원칙** 또는 **단일 지점 제어(Single-Point Control) 원칙**이라고도 부른다.
    > DRY 원칙: 모든 지식은 시스템 내에서 단일하고, 애매하지 않고, 정말로 믿을 만한 표현 양식을 가져야 한다.

---

### 10/2(일)

오브젝트 - 10. 상속과 코드 재사용  
[p.310 ~ p.320]

-   많은 코드 더미 속에서 어떤 코드가 중복인지를 파악하는 일은 쉬운 일이 아니다. 중복 코드는 항상 함꼐 수정돼야 하기 때문에 수정할 때 하나라도 빠트린다면 버그로 이어질 것이다. 또한, 중복 코드를 수정하는 과정에서 중복 코드를 서로 다르게 수정할 가능성도 있다.  
    중복 코드를 제거하지 않은 상태에서 코드를 수정할 수 있는 유일한 방법은 새로운 중복 코드를 추가하는 것뿐이다. 새로운 중복 코드를 추가하는 과정에서 코드의 일관성이 무너질 위험이 있다. 더 큰 문제는 중복 코드가 늘어날수록 애플리케이션은 변경에 취약해지고 버그가 발생할 가능성이 높아진다는 것이다.
-   특정한 상황을 처리하기 위해 만들어진 두 클래스 사이의 중복 코드를 제거하는 방법은 클래스를 하나로 합치고, 상황을 구별하기 위한 타입 코드를 추가한 뒤 타입 코드의 값에 따라 로직을 분기시키는 것이다. 하지만 타입 코드를 사용하는 클래스는 낮은 응집도와 높은 결합도라는 문제에 시달리게 된다. 객체지향 프로그래밍 언어는 타입 코드를 사용하지 않고도 중복 코드를 관리할 수 있는 방법을 제공한다. 바로 **상속**이다.  
    상속의 기본 아이디어는 간단하다. 이미 존재하는 클래스와 유사한 클래스가 필요하다면 코드를 복사하지 말고 상속을 이용해 코드를 재사용하라는 것이다.
-   그러나 상속을 염두에 두고 설계되지 않은 클래스를 상속을 이용해 재사용하는 것은 쉽지 않다. 개발자는 재사용을 위해 상속 계층 사이에 무수히 많은 가정을 세웠을지도 모른다. 그 가정은 코드를 이해하기 어렵게 만들뿐만 아니라 직관에도 어긋날 수 있다. 상속을 이용해 코드를 재사용하기 위해서는 부모 클래스의 개발자가 세웠던 가정이나 추론 과정을 정확하게 이해해야 한다. 이것은 자식 클래스의 작성자가 부모 클래스의 구현 방법에 대해 정확한 지식을 가져야 한다는 것을 의미한다.  
    따라서 상속은 결합도를 높인다. 그리고 상속이 초래하는 부모 클래스와 자식 클래스 사이의 강한 결합이 코드를 수정하기 어렵게 만든다.

---

### 10/3(월)

오브젝트 - 10. 상속과 코드 재사용  
[p.320 ~ p.323]

-   자식 클래스의 메서드 안에서 super 참조를 이용해 부모 클래스의 메서드를 직접 호출할 경우 두 클래스는 강하게 결합된다. 따라서 super 호출을 제거할 수 있는 방법을 찾아 결합도를 제거해야 한다. 자식 클래스가 부모 클래스의 구현에 강하게 결합될 경우 부모 클래스의 변경에 의해 자식 클래스가 영향을 받는다. 상속을 사용하면 적은 노력으로도 새로운 기능을 쉽고, 빠르게 추가할 수 있지만 그로 인해 커다란 대가를 치러야 할 수도 있다.
-   상속 관계로 연결된 자식 클래스가 부모 클래스의 변경에 취약해지는 현상을 가리켜 **취약한 기반 클래스 문제(Fragile Base Class Problem, Brittle Base Class Problem)** 라고 부른다. 취약한 기반 클래스 문제는 코드 재사용을 목적으로 상속을 사용할 때 발생하는 가장 대표적인 문제로, 상속을 사용한다면 피할 수 없는 객체지향 프로그래밍의 근복적인 취약성이다.  
    취약한 기반 클래스 문제는 상속이라는 문맥 안에서 결합도가 초래하는 문제점을 가리키는 용어다. 상속 관계를 추가할수록 전체 시스템의 결합도가 높아진다는 사실을 알고 있어야 한다. 상속은 자식 클래스를 점진적으로 추가해서 기능을 확장하는 데는 용이하지만 높은 결합도로 인해 부모 클래스를 점진적으로 개선하는 것은 어렵게 만든다. 최악의 경우에는 모든 자식 클래스를 동시에 수정하고 테스트해야 할 수도 있다.  
    취약한 기반 클래스 문제는 캡슐화를 약화시키고 결합도를 높인다. 상속은 자식 클래스가 부모 클래스의 구현 세부사항에 의존하도록 만들기 때문에 캡슐화를 약화시킨다. 따라서 상속을 사용하면 부모 클래스의 퍼블릭 인터페이스가 아닌 구현을 변경하더라도 자식 클래스가 영향을 받기 쉬워진다. 상속 계층의 상위에 위치한 클래스에 가해지는 작은 변경만으로도 상속 계층에 속한 모든 자손들이 급격하게 요동칠 수 있다.

---

### 10/4(화)

오브젝트 - 10. 상속과 코드 재사용  
[p.324 ~ p.329]

-   상속받은 부모 클래스의 메서드가 자식 클래스의 내부 구조에 대한 규칙을 깨트릴 수 있다. 퍼블릭 인터페이스에 대한 고려 없이 단순히 코드 재사용을 위해 상속을 사용하는 것은 위험하다. 객체지향의 핵심은 객체들의 협력이다. 단순히 코드를 재사용하기 위해 불필요한 오퍼레이션이 인터페이스에 스며들도록 방치해서는 안 된다.  
    인트페이스 설계는 제대로 쓰기엔 쉽게, 엉터리로 쓰기엔 어렵게 만들어야 한다.
-   자식 클래스가 부모 클래스의 메서드를 오버라이딩할 경우 부모 클래스가 자신의 메서드를 사용하는 방법에 자식 클래스가 결합될 수 있다. 따라서 조슈아 블로치는 클래스가 상속되기를 바란다면 상속을 위해 클래스를 설계하고 문서화해야 하며, 그렇지 않은 경우에는 상속을 금지시켜야 한다고 주장한다.  
    조슈아 블로치는 오버라이딩 가능한 메서드들의 자체 사용(self-use), 즉 그 메서드들이 같은 클래스의 메서드를 호출하는지에 대해 반드시 문서화해야 한다고 말한다. 또한, 각각의 public이나 protected 메서드 및 생성자가 어떤 오버라이딩 가능한 메서드를 호출하는지, 어떤 순서로 하는지, 호출한 결과가 다음 처리에 어떤 영향을 주는지에 대해서도 반드시 문서화해야 한다고 말한다.  
    잘된 API 문서는 메서드가 무슨 일(what)을 하는지를 기술해야 하고, 어떻게 하는지(how)를 설명해서는 안 된다는 통념이 있지만, 서브 클래스가 안전할 수 있게끔 클래스를 문서화하려면 클래스의 상세 구현 내역을 기술해야 한다. 이것은 상속이 캡슐화를 위반함으로써 초래된 불행이다.

---

### 10/5(수)

오브젝트 - 10. 상속과 코드 재사용  
[p.329 ~ p.333]

-   상속을 사용하면 자식 클래스가 부모 클래스의 메서드를 오버라이딩하거나 불필요한 인터페이스를 상속받지 않았음에도 부모 클래스를 수정할 때 자식 클래스를 함꼐 수정해야 하는 문제가 발생한다. 상속을 사용하면 자식 클래스가 부모 클래스의 구현에 강하게 결합되기 때문에 이 문제를 피하기는 어렵다.  
    결합도란 다른 대상에 대해 알고 있는 지식의 양이다. 상속은 기본적으로 부모 클래스의 구현을 재사용한다는 기본 전제를 따르기 떄문에 자식 클래스가 부모 클래스의 내부에 대해 속속들이 알도록 강요한다.  
    조슈아 블로치는 이 문제에 대해 다음과 같이 말했다. 서브 클래스는 올바른 기능을 위해 슈퍼클래스의 세부적인 구현에 의존한다. 슈퍼클래스의 구현은 릴리스를 거치면서 변경될 수 있고, 그에 따라 서브 클래스의 코드를 변경하지 않더라도 오류가 발생할 수 있다. 슈퍼 클래스의 작성자가 확장될 목적으로 특별히 그 클래스를 설계하지 않았다면 서브 클래스는 슈퍼클래스와 보조를 맞춰서 진화해야 한다.  
    클래스를 상속하면 결합도로 인해 자식 클래스와 부모 클래스의 구현을 영원히 변경하지 않거나, 자식 클래스와 부모 클래스를 동시에 변경해야 한다.
-   취약한 기반 클래스 문제는 **추상화**를 통해 위험을 줄일 수 있다. 상속에 가장 큰 문제점은 자식 클래스와 부모 클래스가 강하게 결합되어 있는 것이다. 이 문제를 해결하는 가장 일반적인 방법은 자식 클래스가 부모 클래스의 구현이 아닌 추상화에 의존하도록 만드는 것이다. 즉, 부모 클래스와 자식 클래스 모두 추상화에 의존하도록 수정해야 한다.  
    코드 중복을 제거하기 위해 상속을 도입할 때는 두 가지 원칙이 있다.

    1. 두 메서드가 유사하게 보인다면 차이점을 메서드로 추출하면 된다. 메서드 추출을 통해 두 메서드를 동일한 형태로 보이도록 만들 수 있다.
    2. 부모 클래스의 코드를 하위로 내리지 말고 자식 클래스의 코드를 상위로 올리는 것이 좋다. 부모 클래스의 구체적인 메서드를 자식 클래스로 내리는 것보다 자식 클래스의 추상적인 메서드를 부모 클래스로 올리는 것이 재사용성과 응집도 측면에서 더 뛰어난 결과를 얻을 수 있다.

---

### 10/6(목)

오브젝트 - 10. 상속과 코드 재사용  
[p.333 ~ p.339]

-   코드 중복을 제거하기 위해 상속을 사용할 때는 '차이를 메서드로 추출하라' 원칙과 '중복 코드를 부모 클래스로 올려라' 원칙이 있다.
-   **차이를 메서드로 추출하라**:  
    가장 먼저 할 일은 중복 코드 안에서 차이점을 별도의 메서드로 추출하는 것이다. 이것은 "변하는 것으로부터 변하지 않는 것을 분리하라" 또는 "변하는 부분을 찾고 이를 캡슐화하라"라는 조언을 메서드 수준에서 적용한 것이다.  
    두 개의 유사한 클래스가 있고, 두 클래스의 메서드 구현 일부와 인스턴스 변수 목록이 다른 상황이라고 가정한다. 이때 먼저 할 일은 두 클래스의 메서드에서 서로 다른 부분을 별도의 메서드로 추출하는 것이다. 이때 추출한 메서드의 이름은 두 클래스에서 동일해야 한다. 이렇게 메서드를 추출하게 되면 두 클래스에서 구현의 일부가 달랐던 메서드는 서로 동일해질 것이고, 추출한 메서드 안에 서로 다른 부분을 격리시켜 놓을 수 있다. 이제 같은 코드를 부모 클래스로 올리면 된다.
-   **중복 코드를 부모 클래스로 올려라**:  
    위 상황을 만든 뒤에는 부모 클래스를 추가하면 된다. 목표는 모든 클래스들이 추상화에 의존하도록 만드는 것이기 때문에 이 클래스는 추상 클래스로 구현하는 것이 적합하다.  
    부모 클래스를 추가했으면 위에 만든 공통 부분(동일하게 만든 부분)을 부모 클래스로 이동시키면 된다. 공통 코드를 옮길 때 인스턴스 변수보다 메서드를 먼저 이동시키는 것이 편하다. 메서드를 옮기고 나면 그 메서드에 필요한 메서드나 인스턴스 변수가 무엇인지를 컴파일 에러를 통해 확인할 수 있기 때문이다. 컴파일 에러를 바탕으로 메서드와 인스턴스 변수를 이동시키면 불필요한 부분은 자식 클래스에 둔 채로 부모 클래스에 꼭 필요한 코드만 이동시킬 수 있다.  
    이동시키다 보면 차이점을 추출한 메서드도 옮겨야 한다. 이 경우 메서드의 시그니처는 동일하지만 내부 구현이 서로 다르기 때문에 메서드의 구현은 그대로 두고 공통 부분인 시그니처만 부모 클래스로 이동시켜야 한다. 시그니처만 이동하는 것이기 때문에 부모 클래스에서 해당 메서드를 추상 메서드로 선언하고, 자식 클래스에서 오버라이딩할 수 있도록 protected로 선언하는 것이 좋다.
-   위로 올리기(중복 코드를 부모 클래스로 올리기) 전략이 실패했더라도 수정하기 쉬운 문제를 발생시킨다. 추상화하지 않고 빼먹은 코드가 있더라도 하위 클래스가 해당 행동을 필요로 할 때가 오면 이 문제는 바로 눈에 띈다. 모든 하위 클래스가 이 행동을 할 수 있게 만들려면 여러 개의 중복 코드를 양산하거나 이 행동을 상위 클래스로 올리는 수밖에 없다. 즉, 위로 올리기에서 실수하더라도 추상화할 코드는 눈에 띄고 결국 상위 클래스로 올려지면서 코드의 품질이 높아진다. 하지만 이 리팩터링을 반대 방향으로 진행한다면, 다시 말해 구체적인 표현을 아래로 내리는 방식으로 현재 클래스를 구체 클래스에서 추상 클래스로 변경하려 하다면 작은 실수 한 번으로도 구체적인 행동을 상위 클래스에 남겨 놓게 된다.[Metz12]

---

### 9/7(금)

오브젝트 - 10. 상속과 코드 재사용  
[p.340 ~ p.343]

-   공통 코드를 부모 클래스로 이동시킨 후에 각 클래스는 서로 다른 변경의 이유를 가진다. 따라서 클래스들은 단일 책임 원칙을 준수하기 때문에 응집도가 높다.  
    변경하기 전에는 자식 클래스가 부모 클래스의 구현에 강하게 결합되어 있었지만, 변경 후에는 자식 클래스가 부모 클래스의 구체적인 구현이 아닌 추상화에만 의존하기 때문에 메서드의 시그니처가 변경되지 않는 한 부모 클래스의 내부 구현이 변경되더라도 자식 클래스는 영향을 받지 않는다. 따라서 낮은 결합도를 유지한다.  
    부모 클래스 역시 자신의 내부에 구현된 추상 메서드를 호출하기 때문에 추상화에 의존한다.  
    또한, 의존성 역전 원칙도 준수한다. 비즈니스 로직과 관련된 상위 수준의 정책을 구현하는 부모 클래스가 세부적인 로직을 구현하는 자식 클래스에 의존하지 않고 그 반대로 자식 클래스가 추상화인 부모 클래스에 의존하기 때문이다.  
    이 설계를 사용하게 되면 새로운 자식 클래스가 추가될 때 부모 클래스를 상속받는 새로운 클래스를 추가한 후 추상 메서드만 오버라이딩 하면 되기 때문에 쉽게 새로운 자식을 추가할 수 있다. 또한, 새로운 자식을 추가할 때 다른 클래스를 수정할 필요가 없다. 따라서 확장에는 열려 있고 수정에는 닫혀 있기 때문에 개방-폐쇄 원칙을 준수한다.
-   부모 클래스와 자식 클래스의 이름을 정할 때는 의도가 드러나는 이름을 선택하는 것이 좋다. 각 클래스가 어떤 내용을 구현한다는 사실을 명시적으로 전달할 수 있는 이름을 선택해야 한다.
-   부모 클래스와 자식 클래스로 분할된 상태에서 모든 클래스에 특정 로직이 추가돼야 하는 경우라고 가정한다. 클래스라는 도구는 메서드뿐만 아니라 인스턴스 변수도 함께 포함한다. 따라서 클래스 사이의 상속은 자식 클래스가 부모 클래스가 구현한 행동뿐만 아니라 인스턴스 변수에 대해서도 결합되게 만든다.  
    부모 클래스의 인스턴스 변수가 변하지 않는 상황에서 객체의 행동만 변경된다면 상속 계층에 속한 각 클래스를 독립적으로 진화시킬 수 있다. 그러나 인스턴스 변수가 추가되는 경우는 다르다. 자식 클래스는 자신의 인스턴스를 생성할 때 부모 클래스에 정의된 인스턴스 변수를 초기화해야 하기 때문에 자연스럽게 부모 클래스에 추가된 인스턴스 변수는 자식 클래스의 초기화 로직에 영향을 준다. 결과적으로 책임을 아무리 잘 분리하더라도 인스턴스 변수의 추가는 종종 상속 계층 전반에 걸친 수정을 유발한다.  
    부모 클래스에 인스턴스 변수가 추가되는 경우 이를 해결할 수 있는 방법은 2가지이다. 인스턴스 초기화 로직을 변경하는 것과 모든 자식 클래스에 특정 로직을 중복시키는 것인데 인스턴스 초기화 로직을 변경하는 것이 현명한 선택이다. 객체 생성 로직의 변경은 유연하게 대응할 수 있는 다양한 방법이 존재한다. 따라서 객체 생성 로직에 대한 변경을 막기보다는 핵심 로직의 중복을 막는 것이 좋다.
-   상속으로 인한 클래스 사이의 결합을 피할 수 있는 방법은 없다. 상속은 어떤 방식으로든 부모 클래스와 자식 클래스를 결합시킨다. 메서드 구현에 대한 결합은 추상 메서드를 통해 어느 정도 완화할 수 있지만 인스턴스 변수에 대한 결합은 제거할 수 있는 방법이 없다.

---

### 10/8(토)

오브젝트 - 10. 상속과 코드 재사용  
[p.344 ~ p.345]

-   상속은 이미 존재하는 클래스의 코드를 기반으로 다른 부분을 구현함으로써 새로운 기능을 쉽고 빠르게 추가할 수 있다. 상속이 강력한 이유는 익숙한 개념을 이용해서 새로운 개념을 쉽고 빠르게 추가할 수 있기 때문이다. 이처럼 기존 코드와 다른 부분만을 추가함으로써 애플리케이션의 기능을 확장하는 방법을 **차이에 의한 프로그래밍(programming by difference)** 이라고 부른다. 상속을 이용하면 이미 존재하는 클래스의 코드를 쉽게 재사용할 수 있기 때문에 애플리케이션의 점진적 정의(incremental definition)가 가능해진다.[Taivalsaari96]  
    차이에 의한 프로그래밍의 목표는 중복 코드를 제거하고 코드를 재사용하는 것이다. 이때 나오는 중복 코드 제거와 코드 재사용은 동일한 행동을 가리키는 서로 다른 단어다. 중복을 제거하기 위해서는 코드를 재사용 가능한 단위로 분해하고 재구성해야 한다. 코드를 재사용하기 위해서는 중복 코드를 제거해서 하나의 모듈로 모아야 한다. 중복 코드는 프로그래밍 세계에서 악의 근원으로, 중복 코드를 제거하기 위해 최대한 코드를 재사용해야 한다.
-   객체지향 세계에서 중복 코드를 제거하고 코드를 재사용할 수 있는 가장 유명한 방법은 상속이다. 상속은 여러 클래스에 공통적으로 포함돼 있는 중복 코드를 하나의 클래스로 모은다. 원래 클래스들에서 중복 코드를 제거한 후 중복 코드가 옮겨진 클래스를 상속 관계로 연결한다. 코드를 컴파일하면 상속 관계로 연결된 코드들이 하나로 합쳐진다. 따라서 상속을 사용하면 여러 클래스 사이에서 재사용 가능한 코드를 하나의 클래스 안으로 모을 수 있다.  
    상속을 이용하면 새로운 기능을 추가하기 위해 직접 구현해야 하는 코드의 양을 줄일 수 있기 때문에 굉징히 매력적이다. 상속이 코드 재사용 측면에서 매우 강력한 도구인 것은 사실이지만 강력한 만큼 잘못 사용할 경우에 돌아오는 피해 역시 크다. 상속의 오용과 남용은 애플리케이션을 이해하고 확장하기 어렵게 만든다. 따라서 정말 상속이 필요한 경우에만 사용하는 것이 좋다.  
    상속의 단점을 피하면서도 코드를 재사용할 수 있는 더 좋은 방법이 있다. 바로 합성이다.

---

### 10/9(일)

오브젝트 - 11. 합성과 유연한 설계  
[p.346 ~ p.347]

-   클래스 상속(class inheritance)과 객체 합성(object composition)은 객체지향 프로그래밍에서 가장 널리 사용되는 코드 재사용 기법이다. 상속이 부모 클래스와 자식 클래스를 연결해서 부모 클래스의 코드를 재사용하는 데 비해 합성은 전체를 표현하는 객체가 부분을 표현하는 객체를 포함해서 부분 객체의 코드를 재사용한다. 상속에서 부모 클래스와 자식 클래스 사이의 의존성은 컴파일타임에 해결되지만 합성에서 두 객체 사이의 의존성은 런타임에 해결된다. 상속 관계는 **is-a 관계**라고 부르고, 합성 관계는 **has-a 관계**라고 부른다.  
    상속을 이용하면 자식 클래스의 정의에 부모 클래스의 이름을 덧붙이는 것만으로 부모 클래스의 코드를 재사용할 수 있게 된다. 상속을 통해 자식 클래스는 부모 클래스의 정의 대부분을 물려받게 되며 부모 클래스와 다른 부분만 추가하거나 재정의함으로써 기존 코드를 쉽게 확장할 수 있다. 그러나 상속을 제대로 활용하기 위해서는 부모 클래스의 내부 구현에 대해 상세하게 알아야 하기 때문에 자식 클래스와 부모 클래스 사이의 결합도가 높아질 수밖에 없다.  
    합성은 구현에 의존하지 않는다는 점에서 상속과 다르다. 합성은 내부에 포함되는 객체의 구현이 아닌 퍼블릭 인터페이스에 의존한다. 따라서 합성을 이용하면 포함된 객체의 내부 구현이 변경되더라도 영향을 최소화할 수 있기 때문에 변경에 더 안정적인 코드를 얻을 수 있다.
-   상속 관계는 클래스 사이의 정적인 관계인 데 비해 합성 관계는 객체 사이의 동적인 관계다. 따라서 코드 작성 시점에 결정한 상속 관계는 변경 불가능하지만 합성 관계는 실행 시점에 동적으로 변경할 수 있다. 상속 대신 합성을 사용하면 변경하기 쉽고 유연한 설계를 얻을 수 있다.  
    합성을 사용하는 것이 구현 관점에서 좀 더 번거롭고 복잡하다. 그러나 **코드 재사용을 위해서는 객체 합성이 클래스 상속보다 더 좋은 방법**이다.  
     상속은 부모 클래스 안에 구현된 코드 자체를 재사용하지만 합성은 포함되는 객체의 퍼블릭 인터페이스를 재사용하기 때문에 상속 대신 합성을 사용하면 구현에 대한 의존성을 인터페이스에 대한 의존성으로 변경할 수 있다. 합성을 사용할 때 발생하는 높은 결합도를 객체 사이의 낮은 결합도로 대체할 수 있는 것이다.
-   클래스 상속은 다른 클래스를 이용해서 한 클래스의 구현을 정의하는 것이다. 이러한 서브 클래싱에 의한 재사용을 **화이트박스 재사용(white-box reuse)** 이라고 부른다. 화이트박스라 부르는 이유는 가시성 때문으로, 상속받으면 부모 클래스의 내부가 자식 클래스에 공개 된다.  
    객체 합성은 새로운 기능을 위해 겍체들을 합성한다. 객체를 합성하려면 합성할 객체들의 인터페이스를 명확하게 정의해야만 한다. 이를 **블랙박스 재사용(black-box reuse)** 이라고 부른다. 객체의 내부는 공개되지 않고 인터페이스를 통해서만 재사용되기 때문이다.[GOF94]

---

### 10/10(월)

오브젝트 - 11. 합성과 유연한 설계  
[p.347 ~ p.353]

-   코드 재사용을 위해 상속을 남용했을 때 직면할 수 있는 세 가지 문제점이 있다.

    1. 불필요한 인터페이스 상속 문제: 자식 클래스에게는 부적합한 부모 클래스의 오퍼레이션이 상속되기 때문에 자식 클래스 인스턴스의 상태가 불안정해지는 문제이다.
    2. 메서드 오버라이딩의 오작용 문제: 자식 클래스가 부모 클래스의 메서드를 오버라이딩할 때 자식 클래스가 부모 클래스의 메서드 호출 방법에 영향을 받는 문제이다.
    3. 부모 클래스와 자식 클래스의 동시 수정 문제: 부모 클래스와 자식 클래스 사이의 개념적인 결합으로 인해 부모 클래스를 변경할 때 자식 클래스도 함께 변경해야 하는 문제이다.

    합성을 사용하게 되면 상속을 사용했을 때 발생하는 위 세 가지 문제점을 해결할 수 있다. 상속을 합성으로 바꾸는 방법은 자식 클래스에 선언된 상속 관계를 제거하고 부모 클래스의 인스턴스를 자식 클래스의 인스턴스로 선언하면 된다.

-   불필요한 인터페이스 상속 문제:  
    자식 클래스에서 상속 관계를 제거하고 부모 클래스를 자식 클래스의 인스턴스 변수로 포함시켜 상속 관계를 합성 관계로 바꾼다. 그 뒤 자식 클래스가 필요한 오퍼레이션만 정의해서 사용하면 된다. 내부 구현에 밀접하게 결합되는 상속과 달리 합성으로 변경한 자식 클래스는 부모 클래스의 내부 구현에 관해 알지 못한다. 단지 자식 클래스가 정의한 오퍼레이션이 포함된 퍼블릭 인터페이스를 통해서만 부모 클래스와 협력할 수 있다.
-   메서드 오버라이딩의 오작용 문제:  
    부모 클래스의 인스턴스를 자식 클래스 내부에 포함한 후 자식 클래스의 퍼블릭 인터페이스에서 제공하는 오퍼레이션들을 이용해 필요한 기능을 구현하여 해결할 수 있다. '불필요한 인터페이스 상속 문제'에서 상속 대신 합성을 사용한 이유는 불필요한 인터페이스들이 퍼블릭 인터페이스에 스며드는 것을 방지하기 위해서다. 그러나 이 경우에는 부모 클래스가 제공하는 퍼블릭 인터페이스를 그대로 제공해야 한다.  
    부모 클래스에 대한 구현 결합도는 제거하면서 퍼블릭 인터페이스는 그대로 상속받을 수 있는 방법은 자바의 인터페이스를 사용하는 것이다. 자식 클래스의 코드에서 인터페이스의 오퍼레이션을 오버라이딩한 인스턴스 메서드에서 내부의 부모 클래스 인스턴스에게 동일한 메서드 호출을 그대로 전달하고 있다. 이를 **포워딩(forwarding)** 이라고 부르고 동일한 메서드를 호출하기 위해 추가된 메서드를 **포워딩 메서드(forwarding method)** 라고 부른다.[Bloch08] 포워딩은 기존 클래스의 인터페이스를 그대로 외부에 제공하면서 구현에 대한 결합 없이 일부 작동 방식을 변경하고 싶은 경우에 사용할 수 있는 유용한 기법이다.
-   부모 클래스와 자식 클래스의 동시 수정 문제:  
     향후 부모 클래스의 내부 구현을 변경하더라도 파급효과를 최대한 자식 클래스의 내부로 캡슐화할 수 있다. 대부분의 경우 구현에 대한 결합보다는 인터페이스에 대한 결합이 좋다.
-   상속과 비교해서 합성은 안정성과 유연성이라는 장점을 제공한다. 위 내용들은 합성을 사용해서 불안정한 코드를 안정적으로 유지하는 방법들이다.
-   몽키 패치(Monkey Patch):  
    현재 실행 중인 환경에만 영향을 미치도록 지역적으로 코드를 수정하거나 확장하는 것을 가리킨다. 루비 같은 동적 타입 언어에서는 이미 완성된 클래스에도 기능을 추가할 수 있는 열린 클래스(Open Class)라는 개념을 제공하는데, 몽키 패치의 일종이라고 볼 수 있다. C#의 확장 메서드(Extension Method)와 스칼라의 암시적 변환(implicit conversion) 역시 몽키 패치를 위해 사용할 수 있다. 자바는 언어 차원에서는 몽키 패치를 지원하지 않기 때문에 바이트코드를 직접 변환하거나 AOP(Aspect-Oriented Programming)를 이용해 몽키 패치를 구현하고 있다.

---

### 10/11(화)

오브젝트 - 11. 합성과 유연한 설계  
[p.353 ~ p.360]

-   상속으로 인해 결합도가 높아지면 코드를 수정하는 데 필요한 작업의 양이 과도하게 늘어나는 경향이 있다. 가장 일반적인 상황은 작은 기능들을 조합하여 더 큰 기능을 수행하는 객체를 만들어야 하는 경우다. 이 경우 하나의 기능을 추가하거나 수정하기 위해 불필요하게 많은 수의 클래스를 추가하거나 수정해야 하는 문제와 단일 상속만 지원하는 언어에서는 상속으로 인해 오히려 중복 코드의 양이 늘어난다는 문제가 있다.
-   상속 관계에서 자식 클래스가 부모 클래스의 메서드를 재사용하기 위해 super 호출을 사용하면 원하는 결과를 쉽게 얻을 수 있지만 자식 클래스와 부모 클래스 사이의 결합도가 높아지고 만다. 결합도를 낮추는 방법은 자식 클래스가 부모 클래스의 메서드를 호출하지 않도록 부모 클래스에 추상 메서드를 제공하는 것이다. 부모 클래스가 자신이 정의한 추상 메서드를 호출하고 자식 클래스가 이 메서드를 오버라이딩해서 부모 클래스가 원하는 로직을 제공하도록 수정하면 부모 클래스와 자식 클래스 사이의 결합도를 느슨하게 만들 수 있다. 이 방법은 자식 클래스가 부모 클래스의 구체적인 구현이 아니라 필요한 동작의 명세를 기술하는 추상화에 의존하도록 만든다.  
    그러나 부모 클래스에 추상 메서드를 추가하는 방법은 모든 자식 클래스들이 추상 메서드를 오버라이딩해야 하는 문제를 야기한다. 자식 클래스의 수가 적다면 큰 문제가 아니겠지만 자식 클래스가 많을 경우에는 꽤나 번거러운 일이다. 또한, 모든 추상 메서드의 구현이 동일하다는 문제가 있다. 유연성을 유지하면서도 중복 코드를 제거할 수 있는 방법은 부모 클래스의 추상 메서드에서 기본 구현을 제공하는 것이다.
-   추상 메서드와 훅 메서드:  
    개방-폐쇄 원칙을 만족하는 설계를 만들 수 있는 한 가지 방법은 부모 클래스에 새로운 추상 메서드를 추가하고 부모 클래스의 다른 메서드 안에서 호출하는 것이다. 자식 클래스는 추상 메서드를 오버라이딩하고 자신만의 로직을 구현해서 부모 클래스에서 정의한 플로우에 개입할 수 있다.  
    추상 메서드의 단점은 상속 계층에 속하는 모든 자식 클래스가 추상 메서드를 오버라이딩해야 한다는 것이다. 이 과정에서 중복 코드를 작성할 가능성이 크다. 해결 방법은 메서드에 기본 구현을 제공하는 것이다. 이처럼 추상 메서드와 동일하게 자식 클래스에서 오버라이딩할 의도로 메서드를 추가했지만 편의를 위해 기본 구현을 제공하는 메서드를 **훅 메서드(hook method)** 라고 부른다.

---

### 10/12(수)

오브젝트 - 11. 합성과 유연한 설계  
[p.361 ~ p.368]

-   상속을 사용하여 기능을 구현할 때 기본 정책이 있고, 부가 정책이 있다고 가정한다. 이때 부가 정책은 다음과 같은 특성을 가진다. '기본 정책의 계산 결과에 적용된다', '선택적으로 적용할 수 있다', '조합 가능하다', '부가 정책은 임의의 순서로 적용 가능하다'. 이러한 특성을 상속을 통해 구현하려면 모든 가능한 조합별로 자식 클래스를 하나씩 추가해야 한다. 구현하려고 하는 기능의 부모 클래스 아래에 기본 정책을 구현하는 자식 클래스를 만들고, 기본 정책을 구현한 클래스를 부모로 하는 부가 정책 자식 클래스를 만드는 것이다.  
    위 방식을 사용하면 상속의 남용으로 하나의 기능을 추가하기 위해 필요 이상으로 많은 수의 클래스를 추가해야 한다. 이러한 경우를 **클래스 폭발(class explosion)**[Shalloway01] 문제 또는 **조합의 폭발(combinational explosion)** 문제라고 부른다. 클래스 폭발 문제는 자식 클래스가 부모 클래스의 구현에 강하게 결합되도록 강요하는 상속의 근본적인 한계 때문에 발생하는 문제다. 컴파일타임에 결정된 자식 클래스와 부모 클래스 사이의 관계는 변경될 수 없기 때문에 자식 클래스와 부모 클래스의 다양한 조합이 필요한 상황에서 유일한 해결 방법은 조합의 수만큼 새로운 클래스를 추가하는 것뿐이다.  
    클래스 폭발 문제는 새로운 기능을 추가할 때뿐만 아니라 기능을 수정할 때도 문제가 된다. 하나의 정책이 변경되더라도 영향을 받는 코드가 여러 클래스 안에 중복돼 있기 때문에 하나라도 누락한다면 버그가 발생하고 말 것이다.  
    이 문제를 해결할 수 있는 최선의 방법은 상속을 포기하는 것이다.

---

### 10/13(목)

오브젝트 - 11. 합성과 유연한 설계  
[p.368 ~ p.372]

-   상속 관계는 컴파일타임에 결정되고 고정되기 때문에 코드를 실행하는 도중에는 변경할 수 없다. 따라서 여러 기능을 조합해야 하는 설계에 상속을 이용하면 모든 조합 가능한 경우별로 클래스를 추가해야 한다. 이 클래스 폭발 문제가 발생한다.  
    합성은 컴파일타임 관계에서 런타임 관계로 변경함으로써 위 문제를 해결한다. 합성을 사용하면 구현이 아닌 퍼블릭 인터페이스에 대해서만 의존할 수 있기 때문에 런타임에 객체의 관계를 자유롭게 변경할 수 있다.
-   합성을 사용하면 구현 시점에 정책들의 관계를 고정시킬 필요가 없으며 실행 시점에 정책들의 관계를 유연하게 변경할 수 있게 된다. 상속이 조합의 결과를 개별 클래스 안으로 밀어 넣는 방법이라면 합성은 조합을 구성하는 요소들을 개별 클래스로 구현한 후 실행 시점에 인스턴스를 조립하는 방법으로 사용한다. **컴파일 의존성에 속박되지 않고 다양한 방식의 런타임 의존성을 구성할 수 있다는 것이 합성이 제공하는 가장 큰 장점**이다.
-   그러나 합성을 사용하면 컴타임타임 의존성과 런타임 의존성의 거리가 멀어져 설계의 복잡도가 상승하고 이로 인해 코드를 이해하기 어려워진다. 설계는 변경과 유지보수를 위해 존재하며 트레이드오프의 산물이다. 대부분의 경우에는 단순한 설계가 정답이지만 변경에 따르는 공통이 복잡성으로 인한 혼란을 넘어서고 있다면 유연성을 택하는 것이 좋다. 아이러니하게도 변경하기 편리한 설계를 만들기 위해 복잡성을 더하고 나면 원래의 설계보다 단순해지는 경우를 종종 볼 수 있다.
-   다양한 종류의 객체와 협력하기 위해 합성 관계를 사용하는 경우에는 합성하는 객체의 타입을 인터페이스나 추상 클래스로 선언하고 의존성 주입을 사용해 런타임에 필요한 객체를 설정할 수 있도록 구현하는 것이 일반적이다.

---

### 10/14(금)

오브젝트 - 11. 합성과 유연한 설계  
[p.373 ~ p.378]

-   12일에 가정한 상황일 때 부가 정책은 다음과 같은 제약에 따라 구현해야 한다.

    -   부가 정책은 기본 정책이나 다른 부가 정책의 인스턴스를 참조할 수 있어야 한다. 즉, 부가 정책의 인스턴스는 어떤 종류의 정책과도 합성될 수 있어야 한다.
    -   정책에 메시지를 전송한 객체(일을 시킨 객체)는 자신이 기본 정책의 인스턴스에게 메시지를 전송하고 있는지, 부가 정책의 인스턴스에게 메시지를 전송하고 있는지를 몰라야 한다. 다시 말해 기본 정책과 부가 정책은 협력 안에서 동일한 '역할'을 수행해야 한다.

    요약하자면 기본 정책과 부가 정책은 동일한 인터페이스를 구현해야 하며, 내부에 또 다른 인터페이스의 인스턴스를 합성할 수 있어야 한다.

-   위 방식으로 합성을 구현하면 다양한 방식으로 정책들을 조합할 수 있다. 정책의 인스턴스를 생성한 후 의존성 주입을 통해 다른 정책의 인스턴스를 전달하면 끝이다.  
    합성을 사용하면 상속을 사용한 설계보다 복잡하고 정해진 규칙에 따라 객체를 생성하고 조합해야 하기 때문에 처음에는 코드를 이해하기 어려울 수 있다. 그러나 설계에 익숙해지고 나면 객체를 조합하고 사용하는 방식이 상속을 사용하는 방식보다 더 예측 가능하고 일관성이 있다는 사실을 알게 될 것이다. 합성은 객체를 조합하는 것뿐 아니라 새로운 클래스를 추가하거나 수정할 때도 진가를 발휘한다.
-   합성에서는 새로운 기능을 위해 클래스를 추가할 때나 기능 변경을 위해 수정할 때 상속보다 훨씬 간단하다.  
    합성은 오직 하나의 클래스만 추가하고 런타임에 필요한 정책들을 조합해서 원하는 기능을 바로 얻을 수 있다. 반면 상속은 전에 봤다시피 설계에 필요한 조합의 수만큼 새로운 클래스를 추가해서 원하는 기능을 얻을 수 있다.  
    요구사항이 변경되어 수정할 때도 합성은 오직 하나의 클래스만 수정하면 된다. 반면 상속을 사용했다면 수정해야 하는 기능이 상속 계층 여기저기에 중복돼 있기 때문에 여러 클래스를 수정해야 한다.
-   객체지향에서 코드를 재사용하기 위해 가장 널리 사용되는 방법은 상속이지만 상속은 부모 클래스의 세부적인 구현에 자식 클래스를 강하게 결합시킨다. 즉, 상속은 구현을 재사용한다. 반면 합성은 객체의 인터페이스를 재사용하기 때문에 코드를 재사용하면서도 건전한 결합도를 유지할 수 있다.

---

### 10/15(토)

오브젝트 - 11. 합성과 유연한 설계  
[p.379 ~ p.381]

-   상속은 클래스의 구체적인 구현에 의존하기 때문에 수정과 확장에 취약한 설계를 낳는다. 그러나 합성은 객체의 추상적인 인터페이스에 의존하기 때문에 상속과 같은 문제를 초래하지 않는다.  
    상속과 클래스를 기반으로 하는 재사용 방법을 사용하면 클래스의 확장과 수정을 일관성 있게 표현할 수 있는 추상화의 부족으로 인해 변경하기 어려운 코드를 얻게 된다. 따라서 구체적인 코드를 재사용하면서도 낮은 결합도를 유지할 수 있는 유일한 방법은 재사용에 적합한 추상화를 도입하는 것이다.
-   **믹스인(mixin)** 은 객체를 생성할 때 코드 일부를 클래스 안에 섞어 넣어 재사용하는 기법을 가리키는 용어다. 합성이 실행 시점에 객체를 조합하는 재사용 방법이라면 믹스인은 컴파일 시점에 필요한 코드 조각을 조합하는 재사용 방법이다.  
    믹스인과 상속은 유사한 것처럼 보이지만 서로 다르다. 비록 상속의 결과로 부모 클래스의 코드를 재사용할 수 있기는 하지만 상속의 진정한 목적은 자식 클래스를 부모 클래스와 동일한 개념적인 범주로 묶어 is-a 관계를 만들기 위한 것이다. 반면 믹스인은 말 그래도 코드를 다른 코드 안에 섞어 넣기 위한 방법이다.  
    상속이 클래스와 클래스 사이의 관계를 고정시키는 데 비해 믹스인은 유연하게 관계를 재구성할 수 있다. 믹스인은 코드 재사용에 특화된 방법이면서도 상속과 같은 문제를 초래하지 않는다. 믹스인은 합성처럼 유연하면서도 상속처럼 쉽게 코드를 재사용할 수 있는 방법이다.  
    믹스인은 Flavors라는 언어에서 처음 도입됐고, 이후 Flavors의 특징을 흡수한 CLOS(Common Lisp Object System)에 의해 대중화됐다. 스칼라에서는 믹스인을 구현하기 위해 트레이트(trait)를 제공한다.

---

### 10/16(일)

오브젝트 - 11. 합성과 유연한 설계  
[p.381 ~ p.383]

-   상속은 정적이지만 믹스인은 동적이다. 상속은 부모 클래스와 자식 클래스의 관계를 코드로 작성하는 시점에 고정시켜 버리지만 믹스인은 제약을 둘뿐 실제로 어떤 코드에 믹스인될 것인지를 결정하지 않는다.  
    스칼라에서는 트레이트를 제공하여 믹스인을 구현할 수 있다. 트레이트에서 extends문은 트레이트가 사용될 수 있는 문맥을 제한한다. 따라서 트레이트는 부모 클래스를 고정시키지 않고, super로 참조되는 코드 역시 고정되지 않는다.  
    이 말은 super 참조가 가리키는 대상이 컴파일 시점이 아닌 실행 시점에 결정된다는 것을 의미한다. 상속의 경우에 일반적으로 this 참조는 동적으로 결정되지만 super 참조는 컴파일 시점에 결정된다. 따라서 상속에서는 부모 클래스와 자식 클래스 관계를 변경할 수 있는 방법은 없다. 히지만 스칼라의 트레이트에서 super 참조는 동적으로 결정된다. 따라서 트레이트의 경우 this 호출뿐만 아니라 super 호출 역시 실행 시점에 바인딩된다.
-   위 내용은 트레이트를 사용한 믹스인이 클래스를 사용한 상속보다 더 유연한 재사용 기법인 이유이다. 상속은 재사용 가능한 문맥을 고정시키지만 트레이트는 문맥을 확장 가능하도록 열어 놓는다.  
    이러 면에서 믹스인은 상속보다 합성과 유사하다. 합성은 독립적으로 작성된 객체들을 실행 시점에 조합해서 더 큰 기능을 만들어내는 데 비해 믹스인은 독립적으로 작성된 트레이트와 클래스를 코드 작성 시점에 조합해서 더 큰 기능을 구현할 수 있다.

---

### 10/17(월)

오브젝트 - 11. 합성과 유연한 설계  
[p.383 ~ p.387]

-   스칼라는 트레이트를 클래스나 다른 트레이트에 믹스인할 수 있도록 extends와 with 키워드를 제공한다. 믹스인하려는 대상 클래스의 부모 클래스가 존재하는 경우 부모 클래스는 extends를 이용해 상속 받고 트레이트는 with를 이용해 믹스인해야 한다. 이를 **트레이트 조합(trait composition)** 이라고 부른다.[Odersky11]
-   스칼라는 특정 클래스에 믹스인한 클래스와 트레이트를 **선형화(linearization)** 해서 어떤 메서드를 호출할지 결정한다. 클래스의 인스턴스를 생성할 때 스칼라는 클래스 자신과 조상 클래스, 트레이트를 일렬로 나열하여 순서를 정한다. 그리고 실행 중인 메서드 내부에서 super 호출을 하면 다음 단계에 위치한 클래스나 트레이트의 메서드가 호출된다. 이때 중요한 것은 믹스인되기 전까지는 상속 계층 안에서 트레이트의 위치가 동적으로 변경된다는 것이다.
-   믹스인은 재사용 가능한 코드를 독립적으로 작성한 후 필요한 곳에서 쉽게 조합할 수 있게 해주기 때문에 상속에 비해 코드 재사용과 확장의 관점에서 편리하다. 믹스인을 사용하더라도 상속에서 클래스의 숫자가 기하급수적으로 늘어나는 클래스 폭발 문제가 발생할 수 있다. 그러나 클래스 폭발 문제의 단점은 클래스가 늘어날수록 중복 코드도 함꼐 늘어난다는 점인데, 믹스인을 사용하면 클래스가 늘어나더라도 중복 코드가 발생되지 않는다.

---

### 10/18(화)

오브젝트 - 11. 합성과 유연한 설계  
[p.387 ~ p.388]

-   믹스인은 특정한 클래스의 메서드를 재사용하고 기능을 확장하기 위해 사용된다. 믹스인은 상속 계층 안에서 확장한 클래스보다 더 하위에 위치하게 된다. 즉 믹스인은 대상 클래스의 자식 클래스처럼 사용될 용도로 만들어지는 것이다. 따라서 믹스인을 **추상 서브 클래스(abstract subclass)** 라고 부르기도 한다.
-   믹스인을 사용하면 특정 클래스에 대한 변경 또는 확장을 독립적으로 구현한 후 필요한 시점에 차례대로 추가할 수 있다. 마틴 오더스키는 믹스인의 이러한 특징을 **쌓을 수 있는 변경(stackable modification)** 이라고 부른다.

---

### 10/19(수)

오브젝트 - 12. 다형성  
[p.389 ~ p.392]

-   **다형성(polymorphism)** 이라는 단어는 그리스에서 '많은'을 의미하는 'poly'와 '형태'를 의미하는 'morph'의 합성어로 '많은 형태를 가질 수 있는 능력'을 의미한다. 컴퓨터 과학에서는 다형성을 하나의 추상 인터페이스에 대해 코드를 작성하고 이 추상 인터페이스에 대해 서로 다른 구현을 연결할 수 있는 능력으로 정의한다.[Czarnecki00]  
    객체지향 프로그램에서 사용되는 다형성은 **유니버셜(Universal) 다형성** 과 **임시(Ad Hoc) 다형성** 으로 분류할 수 있다. 유니버셜 다형성은 다시 **매개변수(Parametric) 다형성** 과 **포함(Inclusion) 다형성**으로 분류되고, 임시 다형성은 다시 **오버로딩(Overloading) 다형성** 과 **강제(Coercion) 다형성** 으로 분류된다.
-   오버로딩 다형성:  
    하나의 클래스 안에서 동일한 이름의 메서드가 존재하는 경우를 말한다. 메서드 오버로딩을 사용하면 유사한 작업을 수행하는 메서드의 이름을 통일할 수 있기 때문에 기억해야 하는 이름의 수를 극적으로 줄일 수 있다.
-   강제 다형성:  
    언어가 지원하는 자동적인 타입 변환이나 사용자가 직접 구현할 타입 변환을 이용해 동일한 연산자를 다양한 타입에 사용할 수 있는 방식을 가리킨다. 일반적으로 오버로딩 다형성과 강제 다형성을 함께 사용하면 어떤 메서드가 호출될지를 판단하기 어렵다.
-   매개변수 다형성:  
    **제네릭 프로그래밍** 과 관련이 높은데 클래스의 인스턴스 변수나 메서드의 매개변수 타입을 임의의 타입으로 선언한 후 사용하는 시점에 구체적인 타입으로 지정하는 방식을 가리킨다. 이 방식을 사용하면 다양한 타입의 요소를 다루기 위해 동일한 오퍼레이션을 사용할 수 있다.
-   포함 다형성:  
    메시지가 동일하더라도 수신한 객체의 타입에 따라 실제로 수행되는 행동이 달라지는 능력을 의미한다. 포함 다형성은 **서브타입(Subtype) 다형성** 이라고도 부른다. 포함 다형성은 객체지향 프로그래밍에서 가장 널리 알려진 형태의 다형성이기 떄문에 특별한 언급이 없다면 포함 다형성을 의미하는 것이 일반적이다.  
    포함 다형성을 구현하는 가장 일반적인 방법은 상속을 사용하는 것이다. 두 클래스를 상속 관계로 연결하고 자식 클래스에서 부모 클래스의 메서드를 오버라이딩한 후 클라이언트는 부모 클래스만 참조하면 포함 다형성을 구현할 수 있다.  
    위에서 포함 다형성은 서브타입 다형성이라고도 부른다고 했다. 즉, 포함 다형성을 위한 전제조건은 자식 클래스가 부모 클래스의 서브타입이어야 한다는 것이다. 그리고 상속의 진정한 목적은 **코드 재사용이 아니라 다형성을 위한 서브타입 계층을 구축하는 것** 이다.  
    포함 다형성을 위해 상속을 사용하는 가장 큰 이유는 상속이 클래스들을 계층으로 쌓아 올린 후 상황에 따라 적절한 메서드를 선택할 수 있는 메커니즘을 제공하기 때문이다. 객체가 메시지를 수신하면 객체지향 시스템은 메시지를 처리할 적절한 메서드를 상속 계층 안에서 탐색한다. 실행할 메서드를 선택하는 기준은 어떤 메시지를 수신했는지에 따라, 어떤 클래스의 인스턴스인지에 따라, 상속 계층이 어떻게 구성돼 있는지에 따라 달라진다.

---

### 10/20(목)

오브젝트 - 12. 다형성  
[p.393 ~ p.399]

-   단순히 데이터와 행동의 관점에서 상속을 바라보면 상속이란 부모 클래스에서 정의한 데이터와 행동을 자식 클래스에서 자동적으로 공유할 수 있는 재사용 메커니즘으로 보인다. 그러나 이 관점은 상속을 오해한 것이다.
-   상속의 목적은 코드 재사용이 아니다. **상속은 프로그램을 구성하는 개념들을 기반으로 다형성을 가능하게 하는 타입 계층을 구축하기 위한 것이다.** 타입 계층에 대한 고민 없이 코드를 재사용하기 위해 상속을 사용하면 이해하기 어렵고 유지보수하기 버거운 코드가 만들어질 확률이 높다.  
    상속의 메커니즘을 이해하기 위해서는 아래 개념이 필요하다.
    -   업캐스팅
    -   동적 메서드 탐색
    -   동적 바인딩
    -   self 참조
    -   super 참조
-   상속 관계에서 부모 클래스와 자식 클래스에 동일한 시그니처를 가진 메서드가 존재할 때 자식 클래스의 메서드 우선순위가 더 높다. 우선순위가 높다는 것은 메시지를 수신했을 때 부모 클래스의 메서드가 아닌 자식 클래스의 메서드가 실행된다는 것이다.  
    자식 클래스 안에 상속받은 메서드와 동일한 시그니처의 메서드를 재정의해서 부모 클래스의 구현을 새로운 구현으로 대체하는 것을 **메서드 오버라이딩** 이라고 부른다.
-   메서드의 이름이 같지만 시그니처가 다른 경우도 있다. 이름이 같지만 시그니처가 다른 경우에는 사이좋게 공존할 수 있다. 즉, 클라이언트는 메서드 모두를 호출할 수 있다. 이처럼 부모 클래스에서 정의한 메서드와 이름은 동일하지만 시그니처는 다른 메서드를 자식 클래스에 추가하는 것을 **메서드 오버로딩** 이라고 부른다.

---

### 10/21(금)

오브젝트 - 12. 다형성  
[p.399 ~ p.403]

-   데이터 관점의 상속:  
    객체의 인스턴스를 생성하면 시스템은 객체의 인스턴스 변수를 저장할 수 있는 메모리 공간을 할당하고 생성자의 매개변수를 이용해 값을 설정한 후 생성된 인스턴스의 주소를 반환한다. 상속 관계에서 자식 클래스의 인스턴스를 생성하면 자식 클래스가 정의한 인스턴스 변수뿐만 아니라 부모 클래스가 정의한 인스턴스 변수도 포함한다.  
    상속을 인스턴스 관점에서 바라볼 때는 개념적으로 자식 클래스의 인스턴스 안에 부모 클래스의 인스턴스가 포함되는 것으로 생각하는 것이 유용하다. 혹은 자식 클래스의 인스턴스에서 부모 클래스의 인스턴스로 접근 가능한 링크가 존재하는 것처럼 생각해도 된다.  
    **자식 클래스의 인스턴스는 자동으로 부모 클래스에서 정의한 모든 인스턴스 변수를 내부에 포함한다.**
-   행동 관점의 상속:  
    행동 관점의 상속은 부모 클래스가 정의한 일부 메서드를 자식 클래스의 메서드로 포함시키는 것을 의미한다. 부모 클래스의 모든 퍼블릭 메서드는 자식 클래스의 퍼블릭 인터페이스에 포함된다. 따라서 외부의 객체가 부모 클래스의 인스턴스에게 전송할 수 있는 모든 메시지는 자식 클래스의 인스턴스에게도 전송할 수 있다.  
    부모 클래스에서 구현한 메서드를 자식 클래스의 인스턴스에서 실행할 수 있는 이유는 런타임에 시스템이 자식 클래스에 정의되지 않은 메서드가 있는 경우 이 메서드를 부모 클래스 안에서 탐색하기 때문이다. 자식 클래스에서 부모 클래스로의 메서드 탐색이 가능하기 때문에 자식 클래스는 마치 부모 클래스에 구현된 메서드의 복사본을 가지고 있는 것처럼 보이게 된다. 따라서 각 객체에 포함된 class 포인터와 클래스에 포함된 parent 포인터를 조합하면 현재 인스턴스의 클래스에서 최상위 부모 클래스에 이르기까지 모든 부모 클래스에 접근하는 것이 가능하다. 행동 관점에서 상속과 다형성의 개념을 이해하기 위해서는 상속 관계로 연결된 클래스 사이의 메서드 탐색 과정을 이해하는 것이 중요하다.  
    객체의 경우에는 서로 다른 상태를 저장할 수 있도록 각 인스턴스별로 독립적인 메모리를 할당받아야 한다. 하지만 메서드의 경우에는 동일한 클래스의 인스턴스끼리 공유가 가능하기 때문에 클래스는 한 번만 메모리에 로드하고 각 인스턴스별로 클래스를 가리키는 포인터를 갖게 하는 것이 경제적이다.

---

### 10/22(토)

오브젝트 - 12. 다형성  
[p.403 ~ p.405]

-   코드 안에서 선언된 참조 타입과 무관하게 실제로 메시지를 수신하는 객체의 타입에 따라 실행되는 메서드가 달라질 수 있는 것은 업캐스팅과 동적 바인딩이라는 메커니즘이 작용하기 때문이다.
    -   업캐스팅: 부모 클래스 타입으로 선언된 변수에 자식 클래스의 인스턴스를 할당하는 것이 가능하다.  
        서로 다른 클래스의 인스턴스를 동일한 타입에 할당하는 것을 가능하게 해준다. 따라서 부모 클래스에 대해 작성된 코드를 전혀 수정하지 않고도 자식 클래스에 적용할 수 있다.
    -   동적 바인딩: 선언된 변수의 타입이 아니라 메시지를 수신하는 객체의 타입에 따라 실행되는 메서드가 결정된다. 이것은 객체지향 시스템이 메시지를 처리할 적절한 메서드를 컴파일 시점이 아니라 실행 시점에 결정하기 떄문에 가능하다.  
        동적 메서드 탐색은 부모 클래스의 타입에 대해 메시지를 전송하더라도 실행 시에는 실제 클래스를 기반으로 실행될 메서드가 선택되게 해준다. 따라서 코드를 변경하지 않고도 실행되는 메서드를 변경할 수 있다.
-   개방-폐쇄 원칙과 업캐스팅, 동적 메서드 탐색:  
    업캐스팅과 동적 메서드 탐색은 코드를 변경하지 않고도 기능을 추가할 수 있게 해준다. 이것은 개방-폐쇄 원칙의 의도와 일치한다.  
    개방-폐쇄 원칙은 유연하고 확장 가능한 코드를 만들기 위해 의존관계를 구조화하는 방법을 설명한다. 업캐스팅과 동적 메서드 탐색은 상속을 이용해 개방-폐왜 원칙을 따르는 코드를 작성할 때 하부에서 동작하는 기술적인 내부 메커니즘을 설명한다. 즉, 개방-폐쇄 원칙이 목적이라면 업캐스팅과 동적 메서드 탐색은 목적에 이르는 방법이다.

---

### 10/23(일)

오브젝트 - 12. 다형성  
[p.405 ~ p.408]

-   업캐스팅:  
    상속을 이용하면 부모 클래스의 퍼블릭 인터페이스가 자식 클래스의 퍼블릭 인터페이스에 합쳐지기 때문에 부모 클래스의 인스턴스에게 전송할 수 있는 메시지를 자식 클래스의 인스턴스에게 전송할 수 있다. 부모 클래스의 인스턴스 대신 자식 클래스의 인스턴스를 사용하더라도 메시지를 처리하는 데는 아무런 문제가 없으며, 컴파일러는 **명시적인 타입 변환 없이도** 자식 클래스가 부모 클래스를 대체할 수 있다.  
    이러한 특성을 활용할 수 있는 곳은 대표적으로 대입문과 메서드의 파라미터 타입이다. 모든 객체지향 언어는 명시적으로 타입을 변환하지 않고도 부모 클래스 타입의 참조 변수에 자식 클래스의 인스턴스를 대입할 수 있도록 허용한다. 또한 부모 클래스 타입으로 선언된 파라미터에 자식 클래스의 인스턴스를 전달하는 것도 가능하다.  
    반대로 부모 클래스의 인스턴스를 자식 클래스 타입으로 변환하기 위해서는 **명시적인 타입 캐스팅** 이 필요하다. 이를 **다운캐스팅(downcasting)**이라고 부른다.  
    업캐스팅을 사용하게 되면 컴파일러의 관점에서는 자식 클래스는 아무런 제약 없이 부모 클래스를 대체할 수 있다. 따라서 부모 클래스와 협력하는 클라이언트는 다양한 자식 클래스의 인스턴스와도 협력하는 것이 가능하다. 이떄 협력할 수 있는 자식 클래스는 현재 상속 계층에 존재하는 자식 클래스 뿐만 아니라 앞으로 추가될 미래의 자식 클래스들까지 포함한다. 즉, 업캐스팅으로 인해 미래의 자식 클래스들도 협력에 참여할 수 있게 된다.
-   동적 바인딩:  
    함수를 호출하는 전통적인 언어들은 호출될 함수를 컴파일타임에 결정한다. 이처럼 컴파일타임에 호출할 함수를 결정하는 방식을 **정적 바인딩(static binding), 초기 바인딩(early binding), 또는 컴파일타임 바인딩(compile-time binding)** 이라고 부른다.  
    반면 객체지향 언어에서는 메시지를 수신했을 때 실행될 메서드가 런타임에 결정된다. 이처럼 실행할 메서드를 런타임에 결정하는 방식을 **동적 바인딩(dynamic binding) 또는 지연 바인딩(late binding)** 이라고 부른다.

---

### 10/24(월)

오브젝트 - 12. 다형성  
[p.408 ~ p.410]

-   객체지향 시스템은 아래의 규칙에 따라 실행할 메서드를 선택한다.

    -   메시지를 수신한 객체는 먼저 자신을 생성한 클래스에 적합한 메서드가 존재하는지 검사한다. 존재하면 메서드를 실행하고 탐색을 종료한다.
    -   메서드를 찾지 못했다면 부모 클래스에서 메서드 탐색을 계속한다. 이 과정은 적합한 메서드를 찾을 때까지 상속 계층을 따라 올라가며 계속된다.
    -   상속 계층의 가장 최상위 클래스에 이르렀지만 메서드를 발견하지 못한 경우 예외를 발생시키며 탐색을 중단한다.

    메시지 탐색할 때 **self 참조(self reference)** 라는 중요한 변수가 있다. 객체가 메시지를 수신하면 컴파일러는 self 참조라는 임시 변수를 자동으로 생성한 후 메시지를 수신한 객체를 가리키도록 설정한다. 동적 메서드 탐색은 self가 가리키는 객체의 클래스에서 시작하여 상속 계층의 역방향으로 이뤄지며 메서드 탐색이 종료되는 순간 self 참조는 자동으로 소멸된다.  
    정적 타입 언어인 C++, 자바, C# 에서는 self 참조는 this라고 부른다.

-   시스템은 메시지를 처리할 메서드를 탐색하기 위해 self 참조가 가리키는 메모리로 이동한다. 이 메모리에는 객체의 현재 상태를 표현하는 데이터와 객체의 클래스를 가리키는 class 포인터가 존재한다. class 포인터를 따라 이동하면 메모리에 로드된 클래스의 정보를 읽을 수 있다. 클래스 정보 안에는 클래스 안에 구현된 전체 메소드의 목록이 포함돼 있다. 이 목록 안에 메시지를 처리할 적절한 메서드가 존재하면 해당 메서드를 실행한 후 동적 메서드 탐색을 종료한다.  
    만약 적절한 메서드를 찾지 못했다면 parent 참조를 따라 부모 클래스로 이동한 후 탐색을 계속한다. 시스템은 상속 계층을 따라 최상위 클래스인 Object 클래스에 이를 때까지 메서드를 탐색한다. Object 클래스에서도 적절한 메서드를 찾지 못한 경우에는 에러를 발생시키고 메서드 탐색을 종료한다.  
    메서드 탐색은 자식 클래스에서 부모 클래스 방향으로 진행된다.
-   동적 메서드 탐색은 아래 두 가지 원리로 구성된다.
    -   **자동 메시지 위임**: 자식 클래스는 자신이 이해할 수 없는 메시지를 전송받은 경우 상속 계층에 따라 부모 클래스에게 처리를 위임한다. 클래스 사이의 위임은 프로그래머의 개입 없이 상속 계층에 따라 이뤄진다.
    -   **동적인 문맥**: 메시지를 수신했을 때 실제로 어떤 메서드를 실행할지를 결정하는 것은 컴파일 시점이 아닌 실행 시점에 이뤄지며, 메서드를 탐색하는 경로는 self 참조를 이용해서 결정한다. 메시지가 처리되는 문맥을 이해하기 위해서는 정적인 코드를 분석하는 것뿐 아니라 런타임에 실제로 메시지를 수신한 객체가 어떤 타입인지 추적해야 한다. 이 객체의 타입에 따라 메서드를 탐색하는 문맥이 동적으로 결정된다.

---

### 10/25(화)

오브젝트 - 12. 다형성  
[p.410 ~ p.413]

-   동적 메서드 탐색의 입장에서 상속 계층은 메시지를 수신한 객체가 자신이 이해할 수 없는 메시지를 부모 클래스에게 전달하기 위한 물리적인 경로를 정의하는 것으로 볼 수 있다. 적절한 메서드를 찾을 때까지 상속 계층을 따라 부모 클래스로 처리가 위임된다. 상속을 이용할 경우 프로그래머가 메시지 위임과 관련된 코드를 명시적으로 작성할 필요가 없다.[Metz12]. 이러한 관점에서 상속 계층을 정의하는 것은 메서드 탐색 경로를 정의하는 것과 동일하다.  
    일부 언어는 상속이 아닌 다른 방법을 통해 메시지를 자동으로 위임하는 메커니즘을 제공한다. 루비의 모듈(module), 스몰토크와 스칼라의 트레이트(trait), 스위프트의 프로토콜(protocol)과 확장(extension) 메커니즘이다.  
    자식 클래스에서 부모 클래스의 방향으로 메시지 처리가 위임되기 때문에 자식 클래스에서 어떤 메서드를 구현하고 있느냐에 따라 부모 클래스에 구현된 메서드의 운명이 결정된다. 메서드 오버라이딩은 자식 클래스의 메서드가 동일한 시그니처를 가진 부모 클래스의 메서드보다 먼저 탐색되기 때문에 벌어지는 현상이다. 메서드 오버로딩은 자식 클래스의 메서드의 이름과 부모 클래스의 메서드의 이름만 같고 시그니처가 완전히 동일하지 않은 메서드들이 공존하는 것을 말한다.
-   메서드 오버라이딩:  
    동적 메서드 탐색은 self 참조가 가리키는 객체의 클래스부터 시작하여 부모 클래스의 순서로 진행된다. 자식 클래스와 부모 클래스 양쪽 모두에 동일한 시그니처를 가진 메서드가 구련돼 있다면 자식 클래스의 메서드가 먼저 검색된다. 따라서 자식 클래스가 부모 클래스의 메서드를 오버라이딩하면 자식 클래스에서 부모 클래스로 향하는 메서드 탐색 순서 때문에 자식 클래스의 메서드가 부모 클래스의 메서드를 감추게 된다.

---

### 10/26(수)

오브젝트 - 12. 다형성  
[p.413 ~ p.416]

-   메서드 오버로딩:  
    메서드 오버로딩에서도 메서드 오버라이딩과 동일하게 동적 메서드 탐색은 메시지를 수신한 객체에서 시작된다. 메서드 오버로딩은 시그니처가 다르기 때문에 동일한 이름의 메서드가 공존한다. 메서드 오버라이딩은 메서드를 감추지만 메서드 오버로딩은 사이좋게 공존한다. 즉, 클라이언트의 관점에서 오버로딩된 모든 메서드를 호출할 수 있는 것이다.  
    C++와 같은 일부 언어에서는 상속 계층 사이의 메서드 오버로딩을 지원하지 않는다. C++는 같은 클래스 안에서는 메서드 오버로딩을 허용하지만 상속 계층 사이에서의 메서드 오버로딩은 금지한다. C++는 상속 계층 안에서 동일한 이름을 가진 메서드가 공존해서 발생하는 혼란을 방지하기 위해 부모 클래스에 선언된 이름이 동일한 메서드 전체를 숨겨서 클라이언트가 호출하지 못하도록 막는다. 이를 **이름 숨기기(name hiding)** 라고 부른다[Eckel03]. 이름 숨기기 문제를 해결하는 방법은 부모 클래스에 정의된 모든 메서드를 자식 클래스에서 오버로딩하는 것이다.  
    각 언어별로 동적 메서드 탐색과 관련 규칙이 다르기 때문에 사용할 때 주의가 필요하다.

---

### 10/27(목)

오브젝트 - 12. 다형성  
[p.416 ~ p.419]

-   동적인 문맥:  
    메시지를 수신한 객체가 무엇이냐에 따라 메서드 탐색을 위한 문맥이 동적으로 바뀐다. 동적인 문맥을 결정하는 것은 메시지를 수신한 객체를 가리키는 **self 참조** 다. 동일한 코드라고 하더라도 self 참조가 가리키는 객체가 무엇인지에 따라 메서드 탐색을 위한 상속 계층의 범위가 동적으로 변한다. 따라서 self 참조가 가리키는 객체의 타입을 변경함으로써 객체가 실행될 문맥을 동적으로 바꿀 수 있다.  
    self 참조가 동적 문맥을 결정하기 때문에 어떤 메서드가 실행될지를 예상하기 어렵다. 대표적으로 자신에게 다시 메시지를 전송하는 **self 전송(self send)** 이 있다. self 전송은 현재 클래스, 즉 자신의 메서드를 호출하는 것처럼 보이지만 현재 객체에게 메시지를 전송하는 것이다. 이때 현재 객체란 self 참조가 가리키는 객체를 말한다. self 전송을 이해하기 위해서는 **self 참조가 가리키는 바로 그 객체에서부터 메시지 탐색을 다시 시작** 한다는 사실을 기억해야 한다.  
    위 상황에서 상속이 끼어들면 상황이 복잡해진다. 자식 클래스가 메시지를 받게되면 메서드 탐색은 자식 클래스부터 시작된다. 자식 클래스에 적절한 메서드가 존재하지 않는 경우 부모 클래스에서 메서드 탐색을 하고, 적합한 메서드가 있다면 실행할 것이다. 부모 클래스에서 메서드를 실행하는 도중 self 참조가 발생하는 경우 self 참조가 가리키는 객체는 부모 클래스의 인스턴스가 아니라 자식 클래스의 인스턴스이다. 즉, 메시지 탐색은 부모 클래스에서 벗어나 self 참조가 가리키는 자식 클래스부터 다시 시작된다. **self 전송은 자식 클래스에서 부모 클래스 방향으로 진행되는 동적 메서드 탐색 경로를 다시 self 참조가 가리키는 원래의 자식 클래스로 이동 시킨다.** 이로 인해 실제로 실행될 메서드를 찾기 위해 상속 계층 전체를 훑어가며 코드를 이해해야 하는 상황이 발생할 수 있다. self 전송이 깊은 상속 계층과 계층 중간중간에 함정처럼 숨겨져 있는 메서드 오버라이딩과 만나면 이해하기 어려운 코드가 만들어진다.

---

### 10/28(금)

오브젝트 - 12. 다형성  
[p.419 ~ p.422]

-   정적 타입 언어에서는 코드를 컴파일할 때 상속 계층 안의 클래스들이 메시지를 이해할 수 있는지 여부를 판단한다. 따라서 상속 계층 전체를 탐색한 후에도 메시지를 처리할 수 있는 메서드를 발견하지 못했다면 컴파일 에러를 발생시킨다.  
    동적 타입 언어 역시 메시지를 수신한 객체의 클래스부터 부모 클래스의 방향으로 메서드를 탐색한다. 이때 차이점 동적 타입 언어에는 컴파일 단계가 존재하지 않기 때문에 실제로 코드를 실행해보기 전에는 메시지 처리 가능 여부를 판단할 수 없다.
-   몇 가지 동적 타입 언어는 최상위 클래스까지 메서드를 탐색한 후에 메서드를 처리할 수 없다는 사실을 발견하면 self 참조가 가리키는 현재 객체에게 메시지를 이해할 수 없다는 내용의 메시지를 전송한다. 이 메시지는 보통의 메시지처럼 self 참조가 기리키는 객체의 클래스에서부터 시작해서 상속 계층을 거슬러 올라가며 메서드를 탐색한다. 상속 계층 안의 어떤 클래스도 메시지를 처리할 수 없다면 메서드 탐색은 다시 한번 최상위 클래스에 이르게 되고 최종적으로 예외가 던져진다.
-   동적 타입 언어에서는 위 방법처럼 이해할 수 없는 메시지에 대해 예외를 던지는 것 외에도 선택할 수 있는 다른 방법이 있다. 메시지를 찾지 못했을 때 전송하는 메시지에 응답할 수 있는 메서드를 구현하는 것이다. 이 경우 객체는 자신의 인터페이스에 정의되지 않은 메시지를 처리하는 것이 가능하다.
-   동적 타입 언어는 이해할 수 없는 메시지를 처리할 수 있는 능력을 가짐으로써 메시지가 선언된 인터페이스와 메서드가 정의된 구현을 분리할 수 있다. 메시지 전송자는 자신이 원하는 메시지를 전송하고 메시지 수신자는 스스로의 판단에 따라 메시지를 처리한다. 이것은 메시지를 기반으로 협력하는 자율적인 객체라는 순수한 객체지향의 이상에 좀 더 가까운 것이다. 그러나 동적 타입 언어의 이러한 동적인 특성과 유연성은 코드를 이해하고 수정하기 어렵게 만들뿐 아니라 디버깅 과정을 복잡하게 만들기도 한다.
-   반면 정적 타입 언어는 유연성이 부족하지만 좀 더 안정적이다. 모든 메시지는 컴파일타임에 확인되고 이해할 수 없는 메시지는 컴파일 에러로 이어진다. 컴파일 시점에 수신 가능한 모든 메시지를 체크하기 때문에 이해할 수 없는 메시지를 처리할 수 있는 유연성은 잃게 되지만 실행 시점에 오류가 발생할 가능성을 줄일 수 있다.
-   도메인-특화 언어(DSL):  
    동적 타입 언어는 이해할 수 없는 메시지를 처리할 수 있다는 특징이 있고, 이러한 특징은 메타 프로그래밍 영역에서 진가를 발휘한다. 특히 동적 타입 언어는 정적 타입 언어보다 더 쉽고 강력한 **도메인-특화 언어(DSL: Domain-Specific Language)** 를 개발할 수 있는 것으로 간주된다. 마틴 파울러는 동적 타입 언어의 이러한 특징을 이용해 도메인-특화 언어를 개발하는 방식을 **동적 리셉션(dynamic reception)** 이라고 부른다.[Fowler10]

---

### 10/29(토)

오브젝트 - 12. 다형성  
[p.422 ~ p.425]

-   self 참조의 가장 큰 특징은 **동적** 이라는 점이다. self 참조는 메시지를 수신한 객체의 클래스에 따라 메서드 탐색을 위한 문맥을 실행 시점에 결정한다. self 참조와 대비된 것이 **super 참조(super reference)** 다.  
    자식 클래스에서 부모 클래스의 구현을 재사용해야 하는 경우가 있다. 대부분의 객체지향 언어들은 자식 클래스에서 부모 클래스의 인스턴스 변수나 메서드에 접근하기 위해 사용할 수 있는 super 참조라는 내부 변수를 제공한다. 자식 클래스는 super 참조를 이용하여 부모 클래스에게 **메시지를 전송** 할 수 있다.
-   super 참조의 용도는 부모 클래스에 정의된 메서드를 실행하기 위한 것이 아니다. super 참조의 용도는 **'지금 이 클래스의 부모 클래스에서부터 메서드 탐색을 시작하세요'** 다. 만약 부모 클래스에 원하는 메서드가 존재하지 않는다면 더 상위의 부모 클래스로 이동하면서 메서드가 존재하는 지 검사한다. 이것은 super 참조를 통해 실행하고자 하는 메서드가 반드시 부모 클래스에 위치하지 않아도 되는 유연성을 제공한다. 그 메서드가 조상 클래스 어딘가에 존재하기만 하면 성공적으로 탐색되기 때문이다. 이처럼 super 참조를 통해 메시지를 전송하는 것을 **super 전송(super send)** 이라고 부른다.  
    대부분의 객체지향 언어는 super 참조를 위한 의사변수를 제공한다. 자바에서는 super라는 예약어를 사용하고 C#은 base라는 예약어를 사용한다. C++의 경우 부모 클래스 이름과 범위 지정 연산자인 ::를 조합하여 사용한다.
-   self 전송은 메시지를 수신하는 객체의 클래스에 따라 메서드를 탐색할 시작 위치가 동적으로 결정되지만 super 전송은 항상 메시지를 전송하는 클래스의 부모 클래스에서부터 시작된다.[Niestrasz09] 따라서 super 전송은 메서드 탐색을 시작할 객체를 컴파일 시점에 미리 결정해 놓을 수 있다.  
    대부분 상속에서 super가 컴파일 시점에 미리 결정되지만 super를 런타임에 결정하는 경우도 있다. 믹스인에서 나왔던 스칼라의 트레이트는 super의 대상을 믹스인되는 순서에 따라 동적으로 결정한다. 따라서 사용하는 언어의 특성에 따라 컴파일 타임이 아닌 실행 시점에 super의 대상이 결정되는 경우도 있다.
