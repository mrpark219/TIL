---
layout: post
title: "2022년 10월 TIL"
date: 2022-10-01 22:00:00 +0900
categories: 202210 TIL
---

---

### 10/1(토)

오브젝트 - 10. 상속과 코드 재사용  
[p.308 ~ p.310]

-   객체지향 프로그래밍의 장점 중 하나는 코드를 재사용하기가 용이하다는 것이다. 전통적인 패러다임에서 코드를 재사용하는 방법은 코드를 복사한 후 수정하는 것이다. 반면 객체지향에서는 코드를 재사용하기 위해 '새로운' 코드를 추가한다. 객체지향에서는 코드를 일반적으로 클래스 안에 작성하기 때문에 객체지향에서 클래스를 재사용하는 전통적인 방법은 새로운 클래스를 추가하는 것이다.  
    재사용 관점에서 **상속**이란 클래스 안에 정의된 인스턴스 변수와 메서드를 자동으로 새로운 클래스에 추가하는 구현 기법이다. 객체지향에서는 상속 외에도 코드를 효과적으로 재사용할 수 있는 방법이 한 가지 더 있다. 바로 **합성**이다. 합성이란 새로운 클래스의 인스턴스 안에 기존 클래스의 인스턴스를 포함하는 방법이다.  
    코드를 재사용하려는 강력한 동기 이면에는 중복된 코드를 제거하려는 욕망이 숨어 있다.  
    중복 코드는 사람들의 마음속에 의심과 불신의 씨앗을 뿌린다. 중복 코드는 우리를 주저하게 만들뿐만 아니라 동료를 의심하게 만든다.
-   **DRY 원칙**:  
     중복 코드는 변경을 방해한다. 이것이 중복 코드를 제거해야 하는 가장 큰 이유다. 프로그램의 본질은 비즈니스와 관련된 지식을 코드로 변환하는 것이다. 이 지식은 항상 변하기 때문에 변경되는 지식에 맞춰 지식을 표현하는 코드 역시 변경해야 한다.  
     중복 코드가 가지는 가장 큰 문제는 코드를 수정하는 데 필요한 노력을 몇 배로 증가시킨다는 것이다. 우선 어떤 코드가 중복인지를 찾아야 한다. 중복 코드의 묶음을 찾았다면 찾아낸 모든 코드를 일관되게 수정해야 한다. 그 뒤 모든 중복 코드를 개별적으로 테스트해서 동일한 결과를 내놓는지 확인해야 한다. 중복 코드는 수정과 테스트에 드는 비용을 증가시킨다.  
     중복 여부를 판단하는 기준은 **변경**이다. 요구사항이 변경됐을 때 두 코드를 함께 수정해야 한다면 이 코드는 중복이다. 반면 함께 수정할 필요가 없다면 중복이 아니다. 코드의 모양이 서로 비슷한 것은 중복의 징후일 뿐 중복 여부를 결정하는 것은 코드가 변경에 대응하는 방식이다.  
     신뢰할 수 있고 수정하기 쉬운 소프트웨어를 만드는 효과적인 방법 중 하나는 중복을 제거하는 것이다. 엔드류 헌트와 데이비드 토마스는 프로그래머들이 **DRY 원칙**을 따라야 한다고 말한다. DRY는 '반복하지 마라'라는 뜻의 **Don't Repeat Yourself**의 첫 글자를 모아 만든 용어로 간단히 동일한 지식을 중복하지 말라는 뜻으로 해석할 수 있다.  
     DRY 원칙은 **한 번, 단 한번(Once and Only Once) 원칙** 또는 **단일 지점 제어(Single-Point Control) 원칙**이라고도 부른다.
    > DRY 원칙: 모든 지식은 시스템 내에서 단일하고, 애매하지 않고, 정말로 믿을 만한 표현 양식을 가져야 한다.

---

### 10/2(일)

오브젝트 - 10. 상속과 코드 재사용  
[p.310 ~ p.320]

-   많은 코드 더미 속에서 어떤 코드가 중복인지를 파악하는 일은 쉬운 일이 아니다. 중복 코드는 항상 함꼐 수정돼야 하기 때문에 수정할 때 하나라도 빠트린다면 버그로 이어질 것이다. 또한, 중복 코드를 수정하는 과정에서 중복 코드를 서로 다르게 수정할 가능성도 있다.  
    중복 코드를 제거하지 않은 상태에서 코드를 수정할 수 있는 유일한 방법은 새로운 중복 코드를 추가하는 것뿐이다. 새로운 중복 코드를 추가하는 과정에서 코드의 일관성이 무너질 위험이 있다. 더 큰 문제는 중복 코드가 늘어날수록 애플리케이션은 변경에 취약해지고 버그가 발생할 가능성이 높아진다는 것이다.
-   특정한 상황을 처리하기 위해 만들어진 두 클래스 사이의 중복 코드를 제거하는 방법은 클래스를 하나로 합치고, 상황을 구별하기 위한 타입 코드를 추가한 뒤 타입 코드의 값에 따라 로직을 분기시키는 것이다. 하지만 타입 코드를 사용하는 클래스는 낮은 응집도와 높은 결합도라는 문제에 시달리게 된다. 객체지향 프로그래밍 언어는 타입 코드를 사용하지 않고도 중복 코드를 관리할 수 있는 방법을 제공한다. 바로 **상속**이다.  
    상속의 기본 아이디어는 간단하다. 이미 존재하는 클래스와 유사한 클래스가 필요하다면 코드를 복사하지 말고 상속을 이용해 코드를 재사용하라는 것이다.
-   그러나 상속을 염두에 두고 설계되지 않은 클래스를 상속을 이용해 재사용하는 것은 쉽지 않다. 개발자는 재사용을 위해 상속 계층 사이에 무수히 많은 가정을 세웠을지도 모른다. 그 가정은 코드를 이해하기 어렵게 만들뿐만 아니라 직관에도 어긋날 수 있다. 상속을 이용해 코드를 재사용하기 위해서는 부모 클래스의 개발자가 세웠던 가정이나 추론 과정을 정확하게 이해해야 한다. 이것은 자식 클래스의 작성자가 부모 클래스의 구현 방법에 대해 정확한 지식을 가져야 한다는 것을 의미한다.  
    따라서 상속은 결합도를 높인다. 그리고 상속이 초래하는 부모 클래스와 자식 클래스 사이의 강한 결합이 코드를 수정하기 어렵게 만든다.

---

### 10/3(월)

오브젝트 - 10. 상속과 코드 재사용  
[p.320 ~ p.323]

-   자식 클래스의 메서드 안에서 super 참조를 이용해 부모 클래스의 메서드를 직접 호출할 경우 두 클래스는 강하게 결합된다. 따라서 super 호출을 제거할 수 있는 방법을 찾아 결합도를 제거해야 한다. 자식 클래스가 부모 클래스의 구현에 강하게 결합될 경우 부모 클래스의 변경에 의해 자식 클래스가 영향을 받는다. 상속을 사용하면 적은 노력으로도 새로운 기능을 쉽고, 빠르게 추가할 수 있지만 그로 인해 커다란 대가를 치러야 할 수도 있다.
-   상속 관계로 연결된 자식 클래스가 부모 클래스의 변경에 취약해지는 현상을 가리켜 **취약한 기반 클래스 문제(Fragile Base Class Problem, Brittle Base Class Problem)** 라고 부른다. 취약한 기반 클래스 문제는 코드 재사용을 목적으로 상속을 사용할 때 발생하는 가장 대표적인 문제로, 상속을 사용한다면 피할 수 없는 객체지향 프로그래밍의 근복적인 취약성이다.  
    취약한 기반 클래스 문제는 상속이라는 문맥 안에서 결합도가 초래하는 문제점을 가리키는 용어다. 상속 관계를 추가할수록 전체 시스템의 결합도가 높아진다는 사실을 알고 있어야 한다. 상속은 자식 클래스를 점진적으로 추가해서 기능을 확장하는 데는 용이하지만 높은 결합도로 인해 부모 클래스를 점진적으로 개선하는 것은 어렵게 만든다. 최악의 경우에는 모든 자식 클래스를 동시에 수정하고 테스트해야 할 수도 있다.  
    취약한 기반 클래스 문제는 캡슐화를 약화시키고 결합도를 높인다. 상속은 자식 클래스가 부모 클래스의 구현 세부사항에 의존하도록 만들기 때문에 캡슐화를 약화시킨다. 따라서 상속을 사용하면 부모 클래스의 퍼블릭 인터페이스가 아닌 구현을 변경하더라도 자식 클래스가 영향을 받기 쉬워진다. 상속 계층의 상위에 위치한 클래스에 가해지는 작은 변경만으로도 상속 계층에 속한 모든 자손들이 급격하게 요동칠 수 있다.

---

### 10/4(화)

오브젝트 - 10. 상속과 코드 재사용  
[p.324 ~ p.329]

-   상속받은 부모 클래스의 메서드가 자식 클래스의 내부 구조에 대한 규칙을 깨트릴 수 있다. 퍼블릭 인터페이스에 대한 고려 없이 단순히 코드 재사용을 위해 상속을 사용하는 것은 위험하다. 객체지향의 핵심은 객체들의 협력이다. 단순히 코드를 재사용하기 위해 불필요한 오퍼레이션이 인터페이스에 스며들도록 방치해서는 안 된다.  
    인트페이스 설계는 제대로 쓰기엔 쉽게, 엉터리로 쓰기엔 어렵게 만들어야 한다.
-   자식 클래스가 부모 클래스의 메서드를 오버라이딩할 경우 부모 클래스가 자신의 메서드를 사용하는 방법에 자식 클래스가 결합될 수 있다. 따라서 조슈아 블로치는 클래스가 상속되기를 바란다면 상속을 위해 클래스를 설계하고 문서화해야 하며, 그렇지 않은 경우에는 상속을 금지시켜야 한다고 주장한다.  
    조슈아 블로치는 오버라이딩 가능한 메서드들의 자체 사용(self-use), 즉 그 메서드들이 같은 클래스의 메서드를 호출하는지에 대해 반드시 문서화해야 한다고 말한다. 또한, 각각의 public이나 protected 메서드 및 생성자가 어떤 오버라이딩 가능한 메서드를 호출하는지, 어떤 순서로 하는지, 호출한 결과가 다음 처리에 어떤 영향을 주는지에 대해서도 반드시 문서화해야 한다고 말한다.  
    잘된 API 문서는 메서드가 무슨 일(what)을 하는지를 기술해야 하고, 어떻게 하는지(how)를 설명해서는 안 된다는 통념이 있지만, 서브 클래스가 안전할 수 있게끔 클래스를 문서화하려면 클래스의 상세 구현 내역을 기술해야 한다. 이것은 상속이 캡슐화를 위반함으로써 초래된 불행이다.

---

### 10/5(수)

오브젝트 - 10. 상속과 코드 재사용  
[p.329 ~ p.333]

-   상속을 사용하면 자식 클래스가 부모 클래스의 메서드를 오버라이딩하거나 불필요한 인터페이스를 상속받지 않았음에도 부모 클래스를 수정할 때 자식 클래스를 함꼐 수정해야 하는 문제가 발생한다. 상속을 사용하면 자식 클래스가 부모 클래스의 구현에 강하게 결합되기 때문에 이 문제를 피하기는 어렵다.  
    결합도란 다른 대상에 대해 알고 있는 지식의 양이다. 상속은 기본적으로 부모 클래스의 구현을 재사용한다는 기본 전제를 따르기 떄문에 자식 클래스가 부모 클래스의 내부에 대해 속속들이 알도록 강요한다.  
    조슈아 블로치는 이 문제에 대해 다음과 같이 말했다. 서브 클래스는 올바른 기능을 위해 슈퍼클래스의 세부적인 구현에 의존한다. 슈퍼클래스의 구현은 릴리스를 거치면서 변경될 수 있고, 그에 따라 서브 클래스의 코드를 변경하지 않더라도 오류가 발생할 수 있다. 슈퍼 클래스의 작성자가 확장될 목적으로 특별히 그 클래스를 설계하지 않았다면 서브 클래스는 슈퍼클래스와 보조를 맞춰서 진화해야 한다.  
    클래스를 상속하면 결합도로 인해 자식 클래스와 부모 클래스의 구현을 영원히 변경하지 않거나, 자식 클래스와 부모 클래스를 동시에 변경해야 한다.
-   취약한 기반 클래스 문제는 **추상화**를 통해 위험을 줄일 수 있다. 상속에 가장 큰 문제점은 자식 클래스와 부모 클래스가 강하게 결합되어 있는 것이다. 이 문제를 해결하는 가장 일반적인 방법은 자식 클래스가 부모 클래스의 구현이 아닌 추상화에 의존하도록 만드는 것이다. 즉, 부모 클래스와 자식 클래스 모두 추상화에 의존하도록 수정해야 한다.  
    코드 중복을 제거하기 위해 상속을 도입할 때는 두 가지 원칙이 있다.

    1. 두 메서드가 유사하게 보인다면 차이점을 메서드로 추출하면 된다. 메서드 추출을 통해 두 메서드를 동일한 형태로 보이도록 만들 수 있다.
    2. 부모 클래스의 코드를 하위로 내리지 말고 자식 클래스의 코드를 상위로 올리는 것이 좋다. 부모 클래스의 구체적인 메서드를 자식 클래스로 내리는 것보다 자식 클래스의 추상적인 메서드를 부모 클래스로 올리는 것이 재사용성과 응집도 측면에서 더 뛰어난 결과를 얻을 수 있다.

---

### 10/6(목)

오브젝트 - 10. 상속과 코드 재사용  
[p.333 ~ p.339]

-   코드 중복을 제거하기 위해 상속을 사용할 때는 '차이를 메서드로 추출하라' 원칙과 '중복 코드를 부모 클래스로 올려라' 원칙이 있다.
-   **차이를 메서드로 추출하라**:  
    가장 먼저 할 일은 중복 코드 안에서 차이점을 별도의 메서드로 추출하는 것이다. 이것은 "변하는 것으로부터 변하지 않는 것을 분리하라" 또는 "변하는 부분을 찾고 이를 캡슐화하라"라는 조언을 메서드 수준에서 적용한 것이다.  
    두 개의 유사한 클래스가 있고, 두 클래스의 메서드 구현 일부와 인스턴스 변수 목록이 다른 상황이라고 가정한다. 이때 먼저 할 일은 두 클래스의 메서드에서 서로 다른 부분을 별도의 메서드로 추출하는 것이다. 이때 추출한 메서드의 이름은 두 클래스에서 동일해야 한다. 이렇게 메서드를 추출하게 되면 두 클래스에서 구현의 일부가 달랐던 메서드는 서로 동일해질 것이고, 추출한 메서드 안에 서로 다른 부분을 격리시켜 놓을 수 있다. 이제 같은 코드를 부모 클래스로 올리면 된다.
-   **중복 코드를 부모 클래스로 올려라**:  
    위 상황을 만든 뒤에는 부모 클래스를 추가하면 된다. 목표는 모든 클래스들이 추상화에 의존하도록 만드는 것이기 때문에 이 클래스는 추상 클래스로 구현하는 것이 적합하다.  
    부모 클래스를 추가했으면 위에 만든 공통 부분(동일하게 만든 부분)을 부모 클래스로 이동시키면 된다. 공통 코드를 옮길 때 인스턴스 변수보다 메서드를 먼저 이동시키는 것이 편하다. 메서드를 옮기고 나면 그 메서드에 필요한 메서드나 인스턴스 변수가 무엇인지를 컴파일 에러를 통해 확인할 수 있기 때문이다. 컴파일 에러를 바탕으로 메서드와 인스턴스 변수를 이동시키면 불필요한 부분은 자식 클래스에 둔 채로 부모 클래스에 꼭 필요한 코드만 이동시킬 수 있다.  
    이동시키다 보면 차이점을 추출한 메서드도 옮겨야 한다. 이 경우 메서드의 시그니처는 동일하지만 내부 구현이 서로 다르기 때문에 메서드의 구현은 그대로 두고 공통 부분인 시그니처만 부모 클래스로 이동시켜야 한다. 시그니처만 이동하는 것이기 때문에 부모 클래스에서 해당 메서드를 추상 메서드로 선언하고, 자식 클래스에서 오버라이딩할 수 있도록 protected로 선언하는 것이 좋다.
-   위로 올리기(중복 코드를 부모 클래스로 올리기) 전략이 실패했더라도 수정하기 쉬운 문제를 발생시킨다. 추상화하지 않고 빼먹은 코드가 있더라도 하위 클래스가 해당 행동을 필요로 할 때가 오면 이 문제는 바로 눈에 띈다. 모든 하위 클래스가 이 행동을 할 수 있게 만들려면 여러 개의 중복 코드를 양산하거나 이 행동을 상위 클래스로 올리는 수밖에 없다. 즉, 위로 올리기에서 실수하더라도 추상화할 코드는 눈에 띄고 결국 상위 클래스로 올려지면서 코드의 품질이 높아진다. 하지만 이 리팩터링을 반대 방향으로 진행한다면, 다시 말해 구체적인 표현을 아래로 내리는 방식으로 현재 클래스를 구체 클래스에서 추상 클래스로 변경하려 하다면 작은 실수 한 번으로도 구체적인 행동을 상위 클래스에 남겨 놓게 된다.[Metz12]

---

### 9/7(금)

오브젝트 - 10. 상속과 코드 재사용  
[p.340 ~ p.343]

-   공통 코드를 부모 클래스로 이동시킨 후에 각 클래스는 서로 다른 변경의 이유를 가진다. 따라서 클래스들은 단일 책임 원칙을 준수하기 때문에 응집도가 높다.  
    변경하기 전에는 자식 클래스가 부모 클래스의 구현에 강하게 결합되어 있었지만, 변경 후에는 자식 클래스가 부모 클래스의 구체적인 구현이 아닌 추상화에만 의존하기 때문에 메서드의 시그니처가 변경되지 않는 한 부모 클래스의 내부 구현이 변경되더라도 자식 클래스는 영향을 받지 않는다. 따라서 낮은 결합도를 유지한다.  
    부모 클래스 역시 자신의 내부에 구현된 추상 메서드를 호출하기 때문에 추상화에 의존한다.  
    또한, 의존성 역전 원칙도 준수한다. 비즈니스 로직과 관련된 상위 수준의 정책을 구현하는 부모 클래스가 세부적인 로직을 구현하는 자식 클래스에 의존하지 않고 그 반대로 자식 클래스가 추상화인 부모 클래스에 의존하기 때문이다.  
    이 설계를 사용하게 되면 새로운 자식 클래스가 추가될 때 부모 클래스를 상속받는 새로운 클래스를 추가한 후 추상 메서드만 오버라이딩 하면 되기 때문에 쉽게 새로운 자식을 추가할 수 있다. 또한, 새로운 자식을 추가할 때 다른 클래스를 수정할 필요가 없다. 따라서 확장에는 열려 있고 수정에는 닫혀 있기 때문에 개방-폐쇄 원칙을 준수한다.
-   부모 클래스와 자식 클래스의 이름을 정할 때는 의도가 드러나는 이름을 선택하는 것이 좋다. 각 클래스가 어떤 내용을 구현한다는 사실을 명시적으로 전달할 수 있는 이름을 선택해야 한다.
-   부모 클래스와 자식 클래스로 분할된 상태에서 모든 클래스에 특정 로직이 추가돼야 하는 경우라고 가정한다. 클래스라는 도구는 메서드뿐만 아니라 인스턴스 변수도 함께 포함한다. 따라서 클래스 사이의 상속은 자식 클래스가 부모 클래스가 구현한 행동뿐만 아니라 인스턴스 변수에 대해서도 결합되게 만든다.  
    부모 클래스의 인스턴스 변수가 변하지 않는 상황에서 객체의 행동만 변경된다면 상속 계층에 속한 각 클래스를 독립적으로 진화시킬 수 있다. 그러나 인스턴스 변수가 추가되는 경우는 다르다. 자식 클래스는 자신의 인스턴스를 생성할 때 부모 클래스에 정의된 인스턴스 변수를 초기화해야 하기 때문에 자연스럽게 부모 클래스에 추가된 인스턴스 변수는 자식 클래스의 초기화 로직에 영향을 준다. 결과적으로 책임을 아무리 잘 분리하더라도 인스턴스 변수의 추가는 종종 상속 계층 전반에 걸친 수정을 유발한다.  
    부모 클래스에 인스턴스 변수가 추가되는 경우 이를 해결할 수 있는 방법은 2가지이다. 인스턴스 초기화 로직을 변경하는 것과 모든 자식 클래스에 특정 로직을 중복시키는 것인데 인스턴스 초기화 로직을 변경하는 것이 현명한 선택이다. 객체 생성 로직의 변경은 유연하게 대응할 수 있는 다양한 방법이 존재한다. 따라서 객체 생성 로직에 대한 변경을 막기보다는 핵심 로직의 중복을 막는 것이 좋다.
-   상속으로 인한 클래스 사이의 결합을 피할 수 있는 방법은 없다. 상속은 어떤 방식으로든 부모 클래스와 자식 클래스를 결합시킨다. 메서드 구현에 대한 결합은 추상 메서드를 통해 어느 정도 완화할 수 있지만 인스턴스 변수에 대한 결합은 제거할 수 있는 방법이 없다.

---

### 10/8(토)

오브젝트 - 10. 상속과 코드 재사용  
[p.344 ~ p.345]

-   상속은 이미 존재하는 클래스의 코드를 기반으로 다른 부분을 구현함으로써 새로운 기능을 쉽고 빠르게 추가할 수 있다. 상속이 강력한 이유는 익숙한 개념을 이용해서 새로운 개념을 쉽고 빠르게 추가할 수 있기 때문이다. 이처럼 기존 코드와 다른 부분만을 추가함으로써 애플리케이션의 기능을 확장하는 방법을 **차이에 의한 프로그래밍(programming by difference)** 이라고 부른다. 상속을 이용하면 이미 존재하는 클래스의 코드를 쉽게 재사용할 수 있기 때문에 애플리케이션의 점진적 정의(incremental definition)가 가능해진다.[Taivalsaari96]  
    차이에 의한 프로그래밍의 목표는 중복 코드를 제거하고 코드를 재사용하는 것이다. 이때 나오는 중복 코드 제거와 코드 재사용은 동일한 행동을 가리키는 서로 다른 단어다. 중복을 제거하기 위해서는 코드를 재사용 가능한 단위로 분해하고 재구성해야 한다. 코드를 재사용하기 위해서는 중복 코드를 제거해서 하나의 모듈로 모아야 한다. 중복 코드는 프로그래밍 세계에서 악의 근원으로, 중복 코드를 제거하기 위해 최대한 코드를 재사용해야 한다.
-   객체지향 세계에서 중복 코드를 제거하고 코드를 재사용할 수 있는 가장 유명한 방법은 상속이다. 상속은 여러 클래스에 공통적으로 포함돼 있는 중복 코드를 하나의 클래스로 모은다. 원래 클래스들에서 중복 코드를 제거한 후 중복 코드가 옮겨진 클래스를 상속 관계로 연결한다. 코드를 컴파일하면 상속 관계로 연결된 코드들이 하나로 합쳐진다. 따라서 상속을 사용하면 여러 클래스 사이에서 재사용 가능한 코드를 하나의 클래스 안으로 모을 수 있다.  
    상속을 이용하면 새로운 기능을 추가하기 위해 직접 구현해야 하는 코드의 양을 줄일 수 있기 때문에 굉징히 매력적이다. 상속이 코드 재사용 측면에서 매우 강력한 도구인 것은 사실이지만 강력한 만큼 잘못 사용할 경우에 돌아오는 피해 역시 크다. 상속의 오용과 남용은 애플리케이션을 이해하고 확장하기 어렵게 만든다. 따라서 정말 상속이 필요한 경우에만 사용하는 것이 좋다.  
    상속의 단점을 피하면서도 코드를 재사용할 수 있는 더 좋은 방법이 있다. 바로 합성이다.

---

### 10/9(일)

오브젝트 - 11. 합성과 유연한 설계  
[p.346 ~ p.347]

-   클래스 상속(class inheritance)과 객체 합성(object composition)은 객체지향 프로그래밍에서 가장 널리 사용되는 코드 재사용 기법이다. 상속이 부모 클래스와 자식 클래스를 연결해서 부모 클래스의 코드를 재사용하는 데 비해 합성은 전체를 표현하는 객체가 부분을 표현하는 객체를 포함해서 부분 객체의 코드를 재사용한다. 상속에서 부모 클래스와 자식 클래스 사이의 의존성은 컴파일타임에 해결되지만 합성에서 두 객체 사이의 의존성은 런타임에 해결된다. 상속 관계는 **is-a 관계**라고 부르고, 합성 관계는 **has-a 관계**라고 부른다.  
    상속을 이용하면 자식 클래스의 정의에 부모 클래스의 이름을 덧붙이는 것만으로 부모 클래스의 코드를 재사용할 수 있게 된다. 상속을 통해 자식 클래스는 부모 클래스의 정의 대부분을 물려받게 되며 부모 클래스와 다른 부분만 추가하거나 재정의함으로써 기존 코드를 쉽게 확장할 수 있다. 그러나 상속을 제대로 활용하기 위해서는 부모 클래스의 내부 구현에 대해 상세하게 알아야 하기 때문에 자식 클래스와 부모 클래스 사이의 결합도가 높아질 수밖에 없다.  
    합성은 구현에 의존하지 않는다는 점에서 상속과 다르다. 합성은 내부에 포함되는 객체의 구현이 아닌 퍼블릭 인터페이스에 의존한다. 따라서 합성을 이용하면 포함된 객체의 내부 구현이 변경되더라도 영향을 최소화할 수 있기 때문에 변경에 더 안정적인 코드를 얻을 수 있다.
-   상속 관계는 클래스 사이의 정적인 관계인 데 비해 합성 관계는 객체 사이의 동적인 관계다. 따라서 코드 작성 시점에 결정한 상속 관계는 변경 불가능하지만 합성 관계는 실행 시점에 동적으로 변경할 수 있다. 상속 대신 합성을 사용하면 변경하기 쉽고 유연한 설계를 얻을 수 있다.  
    합성을 사용하는 것이 구현 관점에서 좀 더 번거롭고 복잡하다. 그러나 **코드 재사용을 위해서는 객체 합성이 클래스 상속보다 더 좋은 방법**이다.  
     상속은 부모 클래스 안에 구현된 코드 자체를 재사용하지만 합성은 포함되는 객체의 퍼블릭 인터페이스를 재사용하기 때문에 상속 대신 합성을 사용하면 구현에 대한 의존성을 인터페이스에 대한 의존성으로 변경할 수 있다. 합성을 사용할 때 발생하는 높은 결합도를 객체 사이의 낮은 결합도로 대체할 수 있는 것이다.
-   클래스 상속은 다른 클래스를 이용해서 한 클래스의 구현을 정의하는 것이다. 이러한 서브 클래싱에 의한 재사용을 **화이트박스 재사용(white-box reuse)** 이라고 부른다. 화이트박스라 부르는 이유는 가시성 때문으로, 상속받으면 부모 클래스의 내부가 자식 클래스에 공개 된다.  
    객체 합성은 새로운 기능을 위해 겍체들을 합성한다. 객체를 합성하려면 합성할 객체들의 인터페이스를 명확하게 정의해야만 한다. 이를 **블랙박스 재사용(black-box reuse)** 이라고 부른다. 객체의 내부는 공개되지 않고 인터페이스를 통해서만 재사용되기 때문이다.[GOF94]

---

### 10/10(월)

오브젝트 - 11. 합성과 유연한 설계  
[p.347 ~ p.353]

-   코드 재사용을 위해 상속을 남용했을 때 직면할 수 있는 세 가지 문제점이 있다.

    1. 불필요한 인터페이스 상속 문제: 자식 클래스에게는 부적합한 부모 클래스의 오퍼레이션이 상속되기 때문에 자식 클래스 인스턴스의 상태가 불안정해지는 문제이다.
    2. 메서드 오버라이딩의 오작용 문제: 자식 클래스가 부모 클래스의 메서드를 오버라이딩할 때 자식 클래스가 부모 클래스의 메서드 호출 방법에 영향을 받는 문제이다.
    3. 부모 클래스와 자식 클래스의 동시 수정 문제: 부모 클래스와 자식 클래스 사이의 개념적인 결합으로 인해 부모 클래스를 변경할 때 자식 클래스도 함께 변경해야 하는 문제이다.

    합성을 사용하게 되면 상속을 사용했을 때 발생하는 위 세 가지 문제점을 해결할 수 있다. 상속을 합성으로 바꾸는 방법은 자식 클래스에 선언된 상속 관계를 제거하고 부모 클래스의 인스턴스를 자식 클래스의 인스턴스로 선언하면 된다.

-   불필요한 인터페이스 상속 문제:  
    자식 클래스에서 상속 관계를 제거하고 부모 클래스를 자식 클래스의 인스턴스 변수로 포함시켜 상속 관계를 합성 관계로 바꾼다. 그 뒤 자식 클래스가 필요한 오퍼레이션만 정의해서 사용하면 된다. 내부 구현에 밀접하게 결합되는 상속과 달리 합성으로 변경한 자식 클래스는 부모 클래스의 내부 구현에 관해 알지 못한다. 단지 자식 클래스가 정의한 오퍼레이션이 포함된 퍼블릭 인터페이스를 통해서만 부모 클래스와 협력할 수 있다.
-   메서드 오버라이딩의 오작용 문제:  
    부모 클래스의 인스턴스를 자식 클래스 내부에 포함한 후 자식 클래스의 퍼블릭 인터페이스에서 제공하는 오퍼레이션들을 이용해 필요한 기능을 구현하여 해결할 수 있다. '불필요한 인터페이스 상속 문제'에서 상속 대신 합성을 사용한 이유는 불필요한 인터페이스들이 퍼블릭 인터페이스에 스며드는 것을 방지하기 위해서다. 그러나 이 경우에는 부모 클래스가 제공하는 퍼블릭 인터페이스를 그대로 제공해야 한다.  
    부모 클래스에 대한 구현 결합도는 제거하면서 퍼블릭 인터페이스는 그대로 상속받을 수 있는 방법은 자바의 인터페이스를 사용하는 것이다. 자식 클래스의 코드에서 인터페이스의 오퍼레이션을 오버라이딩한 인스턴스 메서드에서 내부의 부모 클래스 인스턴스에게 동일한 메서드 호출을 그대로 전달하고 있다. 이를 **포워딩(forwarding)** 이라고 부르고 동일한 메서드를 호출하기 위해 추가된 메서드를 **포워딩 메서드(forwarding method)** 라고 부른다.[Bloch08] 포워딩은 기존 클래스의 인터페이스를 그대로 외부에 제공하면서 구현에 대한 결합 없이 일부 작동 방식을 변경하고 싶은 경우에 사용할 수 있는 유용한 기법이다.
-   부모 클래스와 자식 클래스의 동시 수정 문제:  
     향후 부모 클래스의 내부 구현을 변경하더라도 파급효과를 최대한 자식 클래스의 내부로 캡슐화할 수 있다. 대부분의 경우 구현에 대한 결합보다는 인터페이스에 대한 결합이 좋다.
-   상속과 비교해서 합성은 안정성과 유연성이라는 장점을 제공한다. 위 내용들은 합성을 사용해서 불안정한 코드를 안정적으로 유지하는 방법들이다.
-   몽키 패치(Monkey Patch):  
    현재 실행 중인 환경에만 영향을 미치도록 지역적으로 코드를 수정하거나 확장하는 것을 가리킨다. 루비 같은 동적 타입 언어에서는 이미 완성된 클래스에도 기능을 추가할 수 있는 열린 클래스(Open Class)라는 개념을 제공하는데, 몽키 패치의 일종이라고 볼 수 있다. C#의 확장 메서드(Extension Method)와 스칼라의 암시적 변환(implicit conversion) 역시 몽키 패치를 위해 사용할 수 있다. 자바는 언어 차원에서는 몽키 패치를 지원하지 않기 때문에 바이트코드를 직접 변환하거나 AOP(Aspect-Oriented Programming)를 이용해 몽키 패치를 구현하고 있다.

---

### 10/11(화)

오브젝트 - 11. 합성과 유연한 설계  
[p.353 ~ p.360]

-   상속으로 인해 결합도가 높아지면 코드를 수정하는 데 필요한 작업의 양이 과도하게 늘어나는 경향이 있다. 가장 일반적인 상황은 작은 기능들을 조합하여 더 큰 기능을 수행하는 객체를 만들어야 하는 경우다. 이 경우 하나의 기능을 추가하거나 수정하기 위해 불필요하게 많은 수의 클래스를 추가하거나 수정해야 하는 문제와 단일 상속만 지원하는 언어에서는 상속으로 인해 오히려 중복 코드의 양이 늘어난다는 문제가 있다.
-   상속 관계에서 자식 클래스가 부모 클래스의 메서드를 재사용하기 위해 super 호출을 사용하면 원하는 결과를 쉽게 얻을 수 있지만 자식 클래스와 부모 클래스 사이의 결합도가 높아지고 만다. 결합도를 낮추는 방법은 자식 클래스가 부모 클래스의 메서드를 호출하지 않도록 부모 클래스에 추상 메서드를 제공하는 것이다. 부모 클래스가 자신이 정의한 추상 메서드를 호출하고 자식 클래스가 이 메서드를 오버라이딩해서 부모 클래스가 원하는 로직을 제공하도록 수정하면 부모 클래스와 자식 클래스 사이의 결합도를 느슨하게 만들 수 있다. 이 방법은 자식 클래스가 부모 클래스의 구체적인 구현이 아니라 필요한 동작의 명세를 기술하는 추상화에 의존하도록 만든다.  
    그러나 부모 클래스에 추상 메서드를 추가하는 방법은 모든 자식 클래스들이 추상 메서드를 오버라이딩해야 하는 문제를 야기한다. 자식 클래스의 수가 적다면 큰 문제가 아니겠지만 자식 클래스가 많을 경우에는 꽤나 번거러운 일이다. 또한, 모든 추상 메서드의 구현이 동일하다는 문제가 있다. 유연성을 유지하면서도 중복 코드를 제거할 수 있는 방법은 부모 클래스의 추상 메서드에서 기본 구현을 제공하는 것이다.
-   추상 메서드와 훅 메서드:  
    개방-폐쇄 원칙을 만족하는 설계를 만들 수 있는 한 가지 방법은 부모 클래스에 새로운 추상 메서드를 추가하고 부모 클래스의 다른 메서드 안에서 호출하는 것이다. 자식 클래스는 추상 메서드를 오버라이딩하고 자신만의 로직을 구현해서 부모 클래스에서 정의한 플로우에 개입할 수 있다.  
    추상 메서드의 단점은 상속 계층에 속하는 모든 자식 클래스가 추상 메서드를 오버라이딩해야 한다는 것이다. 이 과정에서 중복 코드를 작성할 가능성이 크다. 해결 방법은 메서드에 기본 구현을 제공하는 것이다. 이처럼 추상 메서드와 동일하게 자식 클래스에서 오버라이딩할 의도로 메서드를 추가했지만 편의를 위해 기본 구현을 제공하는 메서드를 **훅 메서드(hook method)** 라고 부른다.

---

### 10/12(수)

오브젝트 - 11. 합성과 유연한 설계  
[p.361 ~ p.368]

-   상속을 사용하여 기능을 구현할 때 기본 정책이 있고, 부가 정책이 있다고 가정한다. 이때 부가 정책은 다음과 같은 특성을 가진다. '기본 정책의 계산 결과에 적용된다', '선택적으로 적용할 수 있다', '조합 가능하다', '부가 정책은 임의의 순서로 적용 가능하다'. 이러한 특성을 상속을 통해 구현하려면 모든 가능한 조합별로 자식 클래스를 하나씩 추가해야 한다. 구현하려고 하는 기능의 부모 클래스 아래에 기본 정책을 구현하는 자식 클래스를 만들고, 기본 정책을 구현한 클래스를 부모로 하는 부가 정책 자식 클래스를 만드는 것이다.  
    위 방식을 사용하면 상속의 남용으로 하나의 기능을 추가하기 위해 필요 이상으로 많은 수의 클래스를 추가해야 한다. 이러한 경우를 **클래스 폭발(class explosion)**[Shalloway01] 문제 또는 **조합의 폭발(combinational explosion)** 문제라고 부른다. 클래스 폭발 문제는 자식 클래스가 부모 클래스의 구현에 강하게 결합되도록 강요하는 상속의 근본적인 한계 때문에 발생하는 문제다. 컴파일타임에 결정된 자식 클래스와 부모 클래스 사이의 관계는 변경될 수 없기 때문에 자식 클래스와 부모 클래스의 다양한 조합이 필요한 상황에서 유일한 해결 방법은 조합의 수만큼 새로운 클래스를 추가하는 것뿐이다.  
    클래스 폭발 문제는 새로운 기능을 추가할 때뿐만 아니라 기능을 수정할 때도 문제가 된다. 하나의 정책이 변경되더라도 영향을 받는 코드가 여러 클래스 안에 중복돼 있기 때문에 하나라도 누락한다면 버그가 발생하고 말 것이다.  
    이 문제를 해결할 수 있는 최선의 방법은 상속을 포기하는 것이다.

---

### 10/13(목)

오브젝트 - 11. 합성과 유연한 설계  
[p.368 ~ p.372]

-   상속 관계는 컴파일타임에 결정되고 고정되기 때문에 코드를 실행하는 도중에는 변경할 수 없다. 따라서 여러 기능을 조합해야 하는 설계에 상속을 이용하면 모든 조합 가능한 경우별로 클래스를 추가해야 한다. 이 클래스 폭발 문제가 발생한다.  
    합성은 컴파일타임 관계에서 런타임 관계로 변경함으로써 위 문제를 해결한다. 합성을 사용하면 구현이 아닌 퍼블릭 인터페이스에 대해서만 의존할 수 있기 때문에 런타임에 객체의 관계를 자유롭게 변경할 수 있다.
-   합성을 사용하면 구현 시점에 정책들의 관계를 고정시킬 필요가 없으며 실행 시점에 정책들의 관계를 유연하게 변경할 수 있게 된다. 상속이 조합의 결과를 개별 클래스 안으로 밀어 넣는 방법이라면 합성은 조합을 구성하는 요소들을 개별 클래스로 구현한 후 실행 시점에 인스턴스를 조립하는 방법으로 사용한다. **컴파일 의존성에 속박되지 않고 다양한 방식의 런타임 의존성을 구성할 수 있다는 것이 합성이 제공하는 가장 큰 장점**이다.
-   그러나 합성을 사용하면 컴타임타임 의존성과 런타임 의존성의 거리가 멀어져 설계의 복잡도가 상승하고 이로 인해 코드를 이해하기 어려워진다. 설계는 변경과 유지보수를 위해 존재하며 트레이드오프의 산물이다. 대부분의 경우에는 단순한 설계가 정답이지만 변경에 따르는 공통이 복잡성으로 인한 혼란을 넘어서고 있다면 유연성을 택하는 것이 좋다. 아이러니하게도 변경하기 편리한 설계를 만들기 위해 복잡성을 더하고 나면 원래의 설계보다 단순해지는 경우를 종종 볼 수 있다.
-   다양한 종류의 객체와 협력하기 위해 합성 관계를 사용하는 경우에는 합성하는 객체의 타입을 인터페이스나 추상 클래스로 선언하고 의존성 주입을 사용해 런타임에 필요한 객체를 설정할 수 있도록 구현하는 것이 일반적이다.
