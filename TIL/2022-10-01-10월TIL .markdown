---
layout: post
title: "2022년 10월 TIL"
date: 2022-10-01 22:00:00 +0900
categories: 202210 TIL
---

---

### 10/1(토)

오브젝트 - 10. 상속과 코드 재사용  
[p.308 ~ p.310]

-   객체지향 프로그래밍의 장점 중 하나는 코드를 재사용하기가 용이하다는 것이다. 전통적인 패러다임에서 코드를 재사용하는 방법은 코드를 복사한 후 수정하는 것이다. 반면 객체지향에서는 코드를 재사용하기 위해 '새로운' 코드를 추가한다. 객체지향에서는 코드를 일반적으로 클래스 안에 작성하기 때문에 객체지향에서 클래스를 재사용하는 전통적인 방법은 새로운 클래스를 추가하는 것이다.  
    재사용 관점에서 **상속**이란 클래스 안에 정의된 인스턴스 변수와 메서드를 자동으로 새로운 클래스에 추가하는 구현 기법이다. 객체지향에서는 상속 외에도 코드를 효과적으로 재사용할 수 있는 방법이 한 가지 더 있다. 바로 **합성**이다. 합성이란 새로운 클래스의 인스턴스 안에 기존 클래스의 인스턴스를 포함하는 방법이다.  
    코드를 재사용하려는 강력한 동기 이면에는 중복된 코드를 제거하려는 욕망이 숨어 있다.  
    중복 코드는 사람들의 마음속에 의심과 불신의 씨앗을 뿌린다. 중복 코드는 우리를 주저하게 만들뿐만 아니라 동료를 의심하게 만든다.
-   **DRY 원칙**:  
     중복 코드는 변경을 방해한다. 이것이 중복 코드를 제거해야 하는 가장 큰 이유다. 프로그램의 본질은 비즈니스와 관련된 지식을 코드로 변환하는 것이다. 이 지식은 항상 변하기 때문에 변경되는 지식에 맞춰 지식을 표현하는 코드 역시 변경해야 한다.  
     중복 코드가 가지는 가장 큰 문제는 코드를 수정하는 데 필요한 노력을 몇 배로 증가시킨다는 것이다. 우선 어떤 코드가 중복인지를 찾아야 한다. 중복 코드의 묶음을 찾았다면 찾아낸 모든 코드를 일관되게 수정해야 한다. 그 뒤 모든 중복 코드를 개별적으로 테스트해서 동일한 결과를 내놓는지 확인해야 한다. 중복 코드는 수정과 테스트에 드는 비용을 증가시킨다.  
     중복 여부를 판단하는 기준은 **변경**이다. 요구사항이 변경됐을 때 두 코드를 함께 수정해야 한다면 이 코드는 중복이다. 반면 함께 수정할 필요가 없다면 중복이 아니다. 코드의 모양이 서로 비슷한 것은 중복의 징후일 뿐 중복 여부를 결정하는 것은 코드가 변경에 대응하는 방식이다.  
     신뢰할 수 있고 수정하기 쉬운 소프트웨어를 만드는 효과적인 방법 중 하나는 중복을 제거하는 것이다. 엔드류 헌트와 데이비드 토마스는 프로그래머들이 **DRY 원칙**을 따라야 한다고 말한다. DRY는 '반복하지 마라'라는 뜻의 **Don't Repeat Yourself**의 첫 글자를 모아 만든 용어로 간단히 동일한 지식을 중복하지 말라는 뜻으로 해석할 수 있다.  
     DRY 원칙은 **한 번, 단 한번(Once and Only Once) 원칙** 또는 **단일 지점 제어(Single-Point Control) 원칙**이라고도 부른다.
    > DRY 원칙: 모든 지식은 시스템 내에서 단일하고, 애매하지 않고, 정말로 믿을 만한 표현 양식을 가져야 한다.
