---
layout: post
title: "2022년 11월 TIL"
date: 2022-11-01 00:50:00 +0900
categories: 202211 TIL
---

---

### 11/1(화)

오브젝트 - 13. 서브클래싱과 서브타이핑  
[p.435 ~ p.436]

-   상속은 두 가지 용도로 사용된다.

    1. **타입 계층 구현**:  
       타입 계층 안에서 부모 클래스는 일반적인 개념을 구현하고 자식 클래스는 특수한 개념을 구현한다. 타입 계층의 관점에서 부모 클래스는 자식 클래스의 **일반화(generalization)** 이고 자식 클래스는 부모 클래스의 **특수화(specialization)** 이다.
    2. **코드 재사용**:  
       상속은 간단한 선언만으로 부모 클래스의 코드를 재사용할 수 있도록 해준다. 상속을 사용하면 점진적으로 애플리케이션의 기능을 확장할 수 있다. 그러나 재사용을 위해 상속을 사용할 경우 부모 클래스와 자식 클래스가 강하게 결합되기 떄문에 변경하기 어려운 코드를 얻을 가능성이 크다.

    따라서 상속을 사용하는 일차적인 목표는 타입 계층을 구현하는 것이여야 한다. 타입 계층을 목표로 상속을 사용하면 다형적으로 동작하는 객체들의 관계에 기반해 확장 가능하고 유연한 설계를 얻을 수 있다. 동일한 메시지에 대해 서로 다르게 행동할 수 있는 다형적인 객체를 구현하기 위해서는 객체의 행동을 기반으로 타입 계층을 구성해야 한다.

-   객체기반 프로그래밍과 객체지향 프로그래밍
    -   **객체기반 프로그래밍(Object-Based Programming)**:  
        상태와 행동을 캡슐화한 객체를 조합해서 프로그램을 구성하는 방식을 가리킨다.  
        다른 의미로 사용되는 경우가 있다. 객체기반 프로그래밍이 자바스크립트와 같이 클래스가 존재하지 않는 **프로토타입 기반 언어(Prototype-Based Language)**를 사용한 프로그래밍 방식을 가리키기 위해 사용되는 경우다. 이 관점에서 객체지향 프로그래밍이란 클래스를 사용하는 방식을 의미하고 객체기반 프로그래밍이란 클래스 없이 오직 객체만을 사용하는 프로그래밍 방식을 가리킨다.
    -   **객체지향 프로그래밍(Object-Oriented Programming)**:  
        객체기반 프로그래밍의 한 종류로, 객체기반 프로그래밍과 마찬가지로 객체들을 조합해서 애플리케이션을 개발하지만 **상속**과 **다형성**을 지원한다는 점에서 객체기반 프로그래밍과 차별화된다.

---

### 11/2(수)

오브젝트 - 13. 서브클래싱과 서브타이핑  
[p.436 ~ p.439]

-   **개념 관점의 타입**: **공통의 특징을 공유하는 대상들의 분류다.**  
    개념 관점에서 타입이란 우리가 인지하는 세상의 사물의 종류를 말한다. 즉, 우리가 인식하는 객체들에 적용하는 개념이나 아이디어를 가리켜 타입이라고 부른다. 타입은 사물을 분류하기 위한 틀로 사용된다. 어떤 대상이 타입으로 분류될 때 그 대상을 타입의 **인스턴스(instance)** 라고 부르고, 일반적으로 타입의 인스턴스를 **객체** 라고 한다.  
    타입은 아래의 세 가지 요소로 구성된다.[Martin98, Larman04]
    -   심볼(symbol): 타입에 이름을 붙인 것이다.
    -   내연(intension): 타입의 정의로서 타입에 속하는 객체들이 가지는 공통적인 속성이나 행동을 가리킨다. 일반적으로 타입에 속하는 객체들이 공유하는 속성과 행동의 집합이 내연을 구성한다.
    -   외연(extension): 타입에 속하는 객체들의 집합이다.
-   **프로그래밍 언어 관점의 타입**: **동일한 오퍼레이션을 적용할 수 있는 인스턴스들의 집합이다.**  
     프로그래밍 언어 관점에서 타입은 연속적인 비트에 의미와 제약을 부여하기 위해 사용된다. 하드웨어는 데이터를 0과 1로 구성된 일련의 비트 조합으로 취급한다. 하지만 비트 자체에는 타입이라는 개념이 존재하지 않는다. 비트에 담긴 데이터를 문자열로 다룰지, 정수로 다룰지는 전적으로 데이터를 사용하는 애플리케이션에 의해 결정된다. 따라서 프로그래밍 언어의 관점에서 타입은 비트 묶음에 의미를 부여하기 위해 정의된 제약과 규칙을 가리킨다.  
     프로그래밍 언어에서 타입은 두 가지 목적을 위해 사용된다.[Scott05]
    -   타입에 수행될 수 있는 유효한 오퍼레이션의 집합을 정의한다:  
        모든 객체지향 언어들은 객체의 타입에 따라 적용 가능한 연산자의 종류를 제한함으로써 프로그래머의 실수를 방지한다.
    -   타입에 수행되는 오퍼레이션에 대해 미리 약속된 문맥을 제공한다:  
        피연산자에 부여된 타입이 연산자의 문맥을 정의할 수 있다. 또한, 객체의 타입에 따라 객체를 생성하는 방법에 대한 문맥을 결정할 수 있다.
-   **객체지향 패러다임 관점의 타입**:  
    개념 관점의 타입과 프로그래밍 언어 관점의 타입을 객체지향 패러다임의 관점에서 조합하면 객체지향 패러다임 관점의 타입에 대해 아래와 같은 정의를 도출할 수 있다.
    **객체의 퍼블릭 인터페이스가 객체의 타입을 결정한다. 따라서 동일한 퍼블릭 인터페이스를 제공하는 객체들은 동일한 타입으로 분류된다.**
-   객체에게 중요한 것은 속성이 아니라 **행동** 이다. 어떤 객체들이 동일한 상태를 가지고 있더라도 퍼블릭 인터페이스가 다르면 이들은 서로 다른 타입으로 분류된다. 반대로 어떤 객체들이 내부 상태는 다르지만 동일한 퍼블릭 인터페이스를 공유한다면 이들은 동일한 타입으로 분류된다. **객체를 바라볼 때는 항상 객체가 외부에 제공하는 행동에 초점을 맞춰야 한다**.

---

### 11/3(목)

오브젝트 - 13. 서브클래싱과 서브타이핑  
[p.439 ~ p.443]

-   타입은 객체들의 집합으로 다른 타입을 포함하는 것이 가능하다. 타입 안에 포함된 객체들을 좀 더 상세한 기준으로 묶어 새로운 타입을 정의하면 새로운 타입은 기존 타입의 부분집합이 된다. 다른 타입을 포함하는 타입은 포함되는 타입보다 더 많은 인스턴스를 가진다.  
    다른 타입을 포함하는 타입은 포함되는 타입보다 좀 더 일반화된 의미를 표현할 수 있다. 반면 포함되는 타입은 좀 더 특수하고 구체적이다. 즉, 포함하는 타입은 외연 관점에서는 더 크고 내연 관점에서는 더 일반적이다. 반면 포함되는 타입은 외연 관점에서는 더 작고 내연 관점에서는 더 특수하다. 이것은 포함 관계로 연결된 타입 사이에 개념적으로 일반화와 특수화 관계가 존재한다는 것을 의미한다.  
    타입 계층을 구성하는 두 타입 간의 관계에서 더 일반적인 타입을 **슈퍼타입(supertype)** 이라고 부르고, 더 특수한 타입을 **서브타입(subtype)** 이라고 부른다.
-   객체의 정의를 의미하는 내연 관점에서 일반화란 어떤 타입의 정의를 좀 더 보편적이고 추상적으로 만드는 과정을 의미한다. 반대로 특수화란 어떤 타입의 정의를 좀 더 구체적이고 문맥 종속적으로 만드는 과정을 의미한다. 내연의 관점에서 특수한 타입의 정의는 일반적인 타입의 정의를 좀 더 구체화한 것이다.  
    집합을 의미하는 외연의 관점에서 일반적인 타입의 인스턴스 집합은 특수한 타입의 인스턴스 집합을 포함하는 슈퍼셋(superset)이다. 반대로 특수한 타입의 인스턴스 집합은 일반적인 타입의 인스턴스 집합에 포함된 서브셋(subset)이다. 따라서 특수한 타입에 속한 인스턴스는 동시에 더 일반적인 타입의 인스턴스이기도 하다.
-   일반화는 다른 타입을 완전히 포함하거나 내포하는 타입을 식별하는 행위 또는 그 행위의 결과를 가리킨다.
    특수화는 다른 타입 안에 전체적으로 포함되거나 완전히 내포되는 타입을 식별하는 행위 또는 그 행위의 결과를 가리킨다.[Martin98]
-   내연과 외연의 관점에서 서브타입과 슈퍼타입 정의:
    -   슈퍼타입
        -   집합이 다른 집합의 모든 멤버를 포함한다.
        -   타입 정의가 다른 타입보다 좀 더 일반적이다.
    -   서브타입
        -   집합에 포함되는 인스턴스들이 더 큰 집합에 포함된다.
        -   타임 정의가 다른 타입보다 좀 더 구체적이다.
-   객체지향 프로그래밍 관점에서 객체의 타입을 결정하는 것은 **퍼블릭 인터페이스**다. 일반적인 타입이란 비교하려는 타입에 속한 객체들의 퍼블릭 인터페이스보다 더 일반적인 퍼블릭 인터페이스를 가지는 객체들의 타입을 의미한다. 특수한 타입이란 비교하려는 타입에 속한 객체들의 퍼블릭 인터페이스보다 더 특수한 퍼블릭 인터페이스를 가지는 객체들의 타입을 의미한다. **서브타입의 인스턴스는 슈퍼타입의 인스턴스로 간주될 수 있다**.
    -   슈퍼타입: 서브타입이 정의한 퍼블릭 인터페이스를 일반화시켜 상대적으로 범용적이고 넓은 의미로 정의한 것이다.
    -   서브타입: 슈퍼타입이 정의한 퍼블릭 인터페이스를 특수화시켜 상대적으로 구체적이고 좁은 의미로 정의한 것이다.

---

### 11/4(금)

오브젝트 - 13. 서브클래싱과 서브타이핑  
[p.443 ~ p.447]

-   객체지향 프로그래밍 언어에서 타입을 구현하는 일반적인 방법은 클래스를 이용하는 것이다. 그리고 타입 계층을 구현하는 일반적인 방법은 상속을 이용하는 것이다. 상속을 이용해 타입 계층을 구현한다는 것은 부모 클래스가 슈퍼타입의 역할을, 자식 클래스가 서브타입의 역할을 수행하도록 클래스 사이의 관계를 정의한다는 것을 의미한다.
-   상속의 올바른 용도는 **타입 계층을 구현** 하는 것이다. 마틴 오더스키는 아래 두 가지 질문에 '예'라고 답할 수 있는 상황일 때 상속을 사용하라고 조언한다. 설계 관점에서 상속을 적용할지 여부는 두 번째 질문인 '행동 호환성'에 초점을 맞춰야 한다.
    1. 상속 관계가 is-a 관계를 모델링하는가?  
       자식 클래스는 부모 클래스다 라고 말해도 이상하지 않다면 상속을 사용할 후보로 간주할 수 있다.
    2. 클라이언트 입장에서 부모 클래스의 타입으로 자식 클래스를 사용해도 무방한가?  
       상속 계층을 사용하는 클라이언트의 입장에서 부모 클래스와 자식 클래스의 차이점을 몰라야 한다. 이를 자식 클래스와 부모 클래스 사이의 **행동 호환성** 이라고 부른다.
-   is-a 관계:  
    마틴 오더스키는 두 클래스가 어휘적으로 **is-a** 관계를 모델링할 경우에만 상속을 사용하도록 조언한다. 어떤 타입 S가 다른 타입 T의 일종이라면 당연히 "타입 S는 타입 T다(S is-a T)"라고 말할 수 있어야 한다.  
    그러나 is-a 관계가 직관적이고 명쾌한 것은 아니다. 스콧 마이어스는 새와 펭귄의 예를 들어 is-a 관계가 직관을 쉽게 배신할 수 있다는 것을 보여준다. 먼저 두 가지 사실에서 출발한다. '펭귄은 새다'와 '새는 날 수 있다' 이 두 가지 사실은 반은 맞고 반은 틀리다. 펭귄은 새지만 날 수 없는 새다. 이 예는 어휘적인 정의가 아니라 기대되는 행동에 따라 타입 계층을 구성해야 한다는 사실을 잘 보여준다.  
    만약 새의 정의에 날 수 있다는 행동이 포함되지 않는다면 펭귄은 새의 서브타입이 될 수 있다. 즉, 이 경우에는 어휘적인 관점과 행동 관점이 일치하게 되는 것이다.  
    타입 계층의 의미는 행동이라는 문맥에 따라 달라질 수 있다. 그에 따라 올바른 타입 계층이라는 의미 역시 문맥에 따라 달라질 수 있다. 따라서 슈퍼타입과 서브타입 관계에서는 is-a보다 행동 호환성이 더 중요하다.  
    새와 펭귄의 예는 is-a라는 말을 너무 단편적으로 받아들일 경우에 어떤 혼란이 발생할 수 있는지를 잘 보여준다. 스콧 마이어스는 이 상황을 명확하지 않은 자연어, 즉 사람의 말에 낚인 것이라고 표현한다.  
    따라서 어떤 두 대상을 언어적으로 is-a라고 표현할 수 있어도 일단은 상속을 사용할 예비 후보 정도로만 생각하는 것이 좋다.
-   행동 호환성:  
    새와 펭귄을 예로 든 것처럼 타입의 이름 사이에 개념적으로 어떤 연관성이 있다고 하더라도 행동에 연관성이 없다면 is-a 관계를 사용하지 말아야 한다.  
    **두 타입 사이에 행동이 호환되는 경우에만 타입 계층을 묶어야 한다.** 그리고 행동의 호환 여부를 판단하는 기준은 **클라이언트의 관점** 이다. 클라이언트가 두 타입이 동일하게 행동할 것이라고 기대한다면 두 타입을 타입 계층으로 묶을 수 있다. 반면 클라이언트가 두 타입이 동일하게 행동하지 않을 것이라고 기대한다면 두 타입을 타입 계층으로 묶어서는 안된다.  
    is-a라고 표현할 수 있다고 해서 두 타입이 올바른 타입 계층을 구성한다고 말할 수 없다. 중요한 것은 클라이언트의 기대다. 타입 계층을 이해하기 위해서는 그 타입 계층이 사용될 문맥을 이해하는 것이 중요한 것이다.

---

### 11/5(토)

오브젝트 - 13. 서브클래싱과 서브타이핑  
[p.447 ~ p.451]

-   행동 호환성을 만족시키지 않는 상속 계층을 그대로 유지한 채 클라이언트의 기대를 충족시킬 수 있는 방법을 찾기란 쉽지 않다. 문제를 해결할 수 있는 방법은 클라이언트의 기대에 맞게 상속 계층을 분리하는 것뿐이다.  
    이전에 살펴본 새와 펭귄 문제를 해결하기 위해서는 날 수 있는 새와 날 수 없는 새를 명확하게 구분할 수 있게 상속 계층을 분리하면 된다. 상속 계층을 분리하면 서로 다른 요구사항을 가진 클라이언트를 만족시킬 수 있을 것이다.  
    이 문제를 해결하는 다른 방법은 클라이언트에 따라 인터페이스를 분리하는 것이다. 새가 날 수 있으면서 걸을 수도 있어야 하고, 펭귄은 오직 걸을 수만 있다고 가정한다. 즉, 새는 '날다'와 '걷다' 메서드를 함께 구현하고 펭귄은 오직 걷다 메서드만 구현해야 하는 것이다. 그리고 오직 '날다' 메서지만 전송하는 클라이언트와 오직 '걷다' 메시지만 전송하는 또 다른 클라이언트가 있다고 가정한다. 인터페이스는 클라이언트가 기대하는 바에 따라 분리돼야 하기 때문에 하나의 클라이언트가 오직 '날다' 메시지만 전송하기를 원한다면 이 클라이언트에게는 '날다' 메시지만 보여야 한다. 따라서 가장 좋은 방법은 '날다' 오퍼레이션을 가진 '날다' 인터페이스와 '걷다' 오퍼레이션을 가진 '걷다' 인터페이스로 분리하는 것이다.  
    클라이언트에 따라 인터페이스를 분리하면 변경에 대한 영향을 더 세밀하게 제어할 수 있다. 대부분의 경우 인터페이스는 클라이언트의 요구가 바뀜에 따라 변경된다. 클라이언트에 따라 인터페이스를 분리하면 각 클라이언트의 요구가 바뀌더라도 영향의 파급 효과를 효과적으로 제어할 수 있게 된다. 이처럼 인터페이스를 클라이언트의 기대에 따라 분리함으로써 변경에 의해 영향을 제어하는 설계 원칙을 **인터페이스 분리 원칙(ISP: Interface Segregation Principle)** 이라고 부른다.

---

### 11/6(일)

오브젝트 - 13. 서브클래싱과 서브타이핑  
[p.451 ~ p.453]

-   상속은 두 가지 목적을 위해 사용된다. 하나는 코드 재사용을 위해서고, 다른 하나는 타입 계층을 구성하기 위해서다. 두 가지 목적에 **서브클레싱** 과 **서브타이핑** 이라는 특별한 이름이 있다.

    -   서브클래싱(subclassing): 다른 클래스의 코드를 재사용할 목적으로 상속을 사용하는 경우를 가리킨다. 자식 클래스와 부모 클래스의 행동이 호환되지 않기 때문에 자식 클래스의 인스턴스가 부모 클래스의 인스턴스를 대체할 수 없다. 서브클래싱을 **구현 상속(implementation inheritance)** 또는 **클래스 상속(class inheritance)** 이라고 부르기도 한다.
    -   서브타이핑(subtyping): 타입 계층을 구성하기 위해 상속을 사용하는 경우를 가리킨다. 서브타이핑에서는 자식 클래스와 부모 클래스의 행동이 호환되기 때문에 자식 클래스의 인스턴스가 부모 클래스의 인스턴스를 대체할 수 있다. 이때 부모 클래스는 자식 클래스의 슈퍼타입이 되고 자식 클래스는 부모 클래스의 서브 타입이 된다. 서브타이핑을 **인터페이스 상속(interface inheritance)** 이라고 부르기도 한다.

    서브클래싱과 서브타이핑을 나누는 기준은 상속을 사용하는 목적이다. 자식 클래스가 부모 클래스의 코드를 재사용할 목적으로 상속을 사용했다면 그것은 서브클래싱이다. 부모 클래스의 인스턴스 대신 자식 클래스의 인스턴스를 사용할 목적으로 상속을 사용했다면 그것은 서브타이핑이다.

-   슈터 타입과 서브 타입 사이의 관계에서 가장 중요한 것은 퍼블릭 인터페이스다. 슈퍼타입 인스턴스를 요구하는 모든 곳에서 서브 타입의 인스턴스를 대신 사용하기 위해 만족해야 하는 최소한의 조건은 서브타입의 퍼블릭 인터페이스가 슈퍼타입에서 정의한 퍼블릭 인터페이스와 동일하거나 더 많은 오퍼레이션을 포함해야 한다는 것이다. 따라서 개념적으로 서브타입이 슈퍼타입의 퍼블릭 인터페이스를 상속받는 것처럼 보이게 된다. 이것이 서브타이핑을 인터페이스 상속이라고 부르는 이유다. 그에 반해 서브 클래싱은 클래스의 내부 구현 자체를 상속받는 것에 초점을 맞추기 때문에 구현 상속 또는 클래스 상속이라고 부른다.
-   서브타이핑 관계가 유지되기 위해서는 서브타입이 슈퍼타입이 하는 모든 행동을 동일하게 할 수 있어야 한다. 즉, 어떤 타입이 다른 타입의 서브타입이 되기 위해서는 **행동 호환성(behavioral substitution)** [Riel96, Jacobson92, Taivalsaari96]을 만족시켜야 한다.  
    자식 클래스가 부모 클래스를 대신할 수 있기 위해서는 자식 클래스가 부모 클래스가 사용되는 모든 문맥에서 자식 클래스와 동일하게 행동할 수 있어야 한다. 그리고 행동 호환성을 만족하는 상속 관계는 부모 클래스를 새로운 자식 클래스로 대체하더라도 시스템이 문제없이 동작할 것이라는 것을 보장해야 한다. 즉, 자식 클래스와 부모 클래스 사이의 행동 호환성은 부모 클래스에 대한 자식 클래스의 **대체 가능성(substitutability)** 을 포함한다.

---

### 11/7(월)

오브젝트 - 13. 서브클래싱과 서브타이핑  
[p.453 ~ p.457]

-   1988년 바바라 리스코프는 올바른 상속 관계의 특징을 정의하기 위해 **리스코프 치환 원칙(LSP: Liskov Substitution Principle)** 를 발표했다. 리스코프에 의하면 상속 관계로 연결한 두 클래스가 서브타이핑 관계를 만족시키기 위해서는 다음의 조건을 만족시켜야 한다.

    > S형의 각 객체 o1에 대해 T형의 객체 o2가 하나 있고, T에 의해 정의된 프로그램 P에서 T가 S로 치환될 때, P의 동작이 변하지 않으면 S는 T의 서브타입이다.[Liskov88]

    즉, 리스코프 치환 원칙은 "서브타입은 그것의 기반 타입에 대해 대체 가능해야 한다"[Martin 2002a]는 것으로 클라이언트가 "차이점을 인식하지 못한 채 기반 클래스의 인터페이스를 통해 서브클래스로 사용할 수 있어야 한다"[Hunt99]는 것이다. 리스코프 치환 원칙은 **행동 호환성**을 설계 원칙으로 정리한 것이다.  
    리스코프 치환 원칙에 따르면 자식 클래스가 부모 클래스와 행동 호환성을 유지함으로써 부모 클래스를 대체할 수 있도록 구현된 상속 관계만을 서브타이핑이라고 불러야 한다. 이전에 is-a 관계를 설명하면서 예로 든 새와 펭귄에서 새에게 기대하는 행동을 펭귄에서는 기대할 수 없기 때문에 이는 리스코프 치환 원칙을 위반했다고 할 수 있다.

-   리스코프 치환 원칙을 위반하는 고전적인 사례로는 정사각형과 직사각형의 상속 관계가 있다. 대부분의 사람들은 "정사각형이 직사각형이다(Square is-a Rectangle)"라는 이야기를 당연하게 생각한다. 하지만 정사각형은 직사각형이 아닐 수도 있다.  
    개념적으로 정사각형은 직사각형의 특수한 경우이고 직사각형은 정사각형의 일반적인 경우이기 때문에 정사각형과 직사각형 사이에 어휘적으로 is-a 관계가 성립한다. 그러나 정사각형과 직사각형은 행동 호환성을 만족하지 못한다.  
    직사각형 타입의 변수와 가로, 세로의 길이를 인자로 받는 resize 메서드가 있다고 가정한다. resize 메서드는 인자로 전달받은 직사각형 타입의 가로, 세로 길이를 전달받은 가로, 세로 길이에 따라 변경해준다. 이 resize 메서드에서 직사격형 타입의 인자를 사격형 타입의 인자로 변경한다. 이때 직사각형의 인스턴스가 인자로 주어지면 사용자가 입력한 가로, 세로의 값으로 해당 직사각형의 크기가 조절될 것이다. 그러나 정사격형의 인스턴스가 주어지면 사용자가 입력한 가로, 혹은 세로의 값으로 가로와 세로 두 값이 동일하게 조절될 것이다. 즉, resize 메서드의 관점에서 직사각형 대신 사각형을 사용하면 resize 메서드가 가정한 방식대로 동작하지 않는다. 따라서 직사각형과 정사각형은 리스코프 원칙을 위반하기 때문에 서브타이핑 관계가 아니라 서브 클래싱 관계이다.
-   위 예제는 is-a라는 말이 얼마나 우리의 직관에서 벗어날 수 있는지를 잘 보여준다. 중요한 것은 **클라이언트 관점에서 행동이 호환되는지 여부** 다. 그리고 행동이 호환되는 경우에만 자식 클래스가 부모 클래스 대신 사용될 수 있다.

---

### 11/8(화)

오브젝트 - 13. 서브클래싱과 서브타이핑  
[p.457 ~ p.459]

-   리스코프 치환 원칙은 자식 클래스가 부모 클래스를 대체하기 위해서는 부모 클래스에 대한 클라이언트의 가정을 준수해야 한다는 것을 강조한다. 만약 부모 클래스와 자식 클래스 각각에 대해 전송할 수 있는 메시지와 기대하는 행동이 서로 다르다면 서로 다른 클라이언트와 협력해야 한다는 것을 의미한다.  
    리스코프 치환 원칙은 "클라이언트와 격리한 채로 본 모델은 의미 있게 검증하는 것이 불가능하다"[Martin02]는 아주 중요한 결론을 이끈다. 즉, 어떤 모델의 유효성은 클라이언트의 관점에서만 검증 가능하다는 것이다.  
    리스코프 치환 원칙은 상속 관계에 있는 두 클래스의 관계를 클라이언트와 떨어뜨려 놓고 판단하지 말라고 속삭인다. 상속 관계는 클라이언트 관점에서 자식 클래스가 부모 클래스를 대체할 수 있을 때만 올바르다.
-   클라이언트 관점에서 자식 클래스의 행동이 부모 클래스의 행동과 호환되지 않고 그로 인해 대체가 불가능하다면 어휘적으로 ia-a 라고 말할 수 있더라도 그 관계를 is-a 관계라고 할 수 없다. is-a는 클라이언트 관점에서 is-a 일 때만 참이다. is-a 관계는 항상 **클라이언트 입장** 에서 생각해야 한다.  
    is-a 관계는 객체지향에서 중요한 것은 객체의 속성이 아니라 객체의 행동이라는 것을 강조한다. 일반적으로 클라이언트를 고려하지 않은 채 개념과 속성의 측면에서 상속 관계를 정할 경우 리스코프 치환 원칙을 위반하는 서브클래싱에 이르게 될 확률이 높다.
-   상속이 서브타이핑을 위해 사용될 경우에만 is-a 관계다. 서브클래싱을 구현하기 위해 상속을 사용했다면 is-a 관계라고 말할 수 없다.

---

### 11/9(수)

오브젝트 - 13. 서브클래싱과 서브타이핑  
[p.459 ~ p.461]

-   리스코프 치환 원칙은 클라이언트가 어떤 자식 클래스와도 안정적으로 협력할 수 있는 상속 구조를 구현할 수 있는 가이드라인을 제공한다. 새로운 자식 클래스를 추가하더라도 클라이언트의 입장에서 동일하게 행동하기만 한다면 클라이언트를 수정하지 않고도 상속 계층을 확장할 수 있다.  
    리스코프 치환 원칙을 사용하면 기능 확장을 위해 자식 클래스를 추가하더라도 코드를 수정할 필요가 없어진다. 따라서 리스코프 치환 원칙은 개방-폐쇄 원칙을 만족하는 설계를 위한 전제 조건이다. 일반적으로 리스코프 치환 원칙은 잠재적인 개방-폐쇄 원칙이다.[Martin02]
-   클래스 상속은 타입 계층을 구현할 수 있는 방법 중 하나다. 자바와 C#의 인터페이스나 스칼라의 트레이트, 동적 타입 언어의 덕 타이핑 등의 기법을 사용하면 클래스 사이의 상속을 사용하지 않고 서브타이핑 관계를 구현할 수 있다. 물론 클래스 상속 외의 방법을 사용할 때도 리스코프 치환 원칙을 준수해야만 서브타이핑 관계라고 할 수 있다.

---

### 11/10(목)

오브젝트 - 13. 서브클래싱과 서브타이핑  
[p.461 ~ p.465]

-   클라이언트와 서버 사이의 협력을 의무(obligation)와 이익(benefit)으로 구성된 계약 관점에서 표현하는 것을 **계약에 의한 설계(DBC: Design By Contract)** 라고 부른다. 계약에 의한 설계는 클라이언트가 정상적으로 메서드를 실행하기 위해 만족시켜야 하는 **사전조건(precondition)** 과 메서드가 실행된 후에 서버가 클라이언트에게 보장해야 하는 **사후조건(postcondition)**, 메서드 실행 전과 실행 후에 인스턴스가 만족시켜야 하는 **클래스 불변식(class invariant)** 의 세 가지 요소로 구성된다.  
    계약에 의한 설계와 리스코프 치환 원칙 사이의 관계는 다음 문장으로 요약할 수 있다. **서브타입이 리스코프 치환 원칙을 만족시키기 위해서는 클라이언트와 슈퍼타입 간에 체결된 '계약'을 준수해야 한다.**
-   계약에 의한 설계에 따르면 협력하는 클라이언트와 슈퍼타입의 인스턴스 사이에는 어떤 계약이 맺어져 있다. 클라이언트와 슈퍼타입은 이 계약을 준수할 때만 정상적으로 협력할 수 있다.  
    리스코프 치환 원칙은 서브타입이 그것의 슈퍼타입을 대체할 수 있어야 하고 클라이언트가 차이점을 인식하지 못한 채 슈퍼타입의 인터페이스를 이용해 서브타입과 협력할 수 있어야 한다고 말한다. 클라이언트의 입장에서 서브타입은 슈퍼타입의 **한 종류**여야 한다. 서브타입이 슈퍼타입처럼 보일 수 있는 유일한 방법은 **클라이언트가 슈퍼타입과 맺은 계약을 서브타입이 준수하는 것** 뿐이다.

---

### 11/11(금)

오브젝트 - 13. 서브클래싱과 서브타이핑  
[p.465 ~ p.469]

-   계약의 관점에서 상속이 초래하는 가장 큰 문제는 자식 클래스가 부모 클래스의 메서드를 오버라이딩할 수 있다는 것이다. 자식 클래스가 부모 클래스의 메서드를 오버라이딩하면서 더 강화된 사전조건을 정의하는 경우 업캐스팅 후 해당 메서드를 사용할 때 협력에 실패한다. 따라서 자식 클래스가 부모 클래스의 서브타입이 되기 위해서는 다음 조건을 만족시켜야 한다. **서브타입에 더 강력한 사전조건을 정의할 수 없다.**  
    반대로 자식 클래스가 부모 클래스의 메서드를 오버라이딩하면서 더 약화된 사전조건을 정의하는 경우에는 아무런 문제가 발생하지 않는다. 따라서 **서브타입에 슈퍼타입과 같거나 더 약한 사전조건을 정의할 수 있다.**  
    자식 클래스가 사후조건을 강화하는 경우에는 계약을 위반하지 않는다. 따라서 **서브타입에 슈퍼타입과 같거나 더 강한 사후조건을 정의할 수 있다.**  
    반면 자식 클래스가 사후조건을 약하게 정의하는 경우에는 원하지 않았던 결과로 이어질 수 있다. 따라서 **서브타입에 더 약한 사후조건을 정의할 수 없다.**
-   계약에 의한 설계는 클라이언트 관점에서의 대체 가능성을 계약으로 설명할 수 있다는 사실을 잘 보여준다. 따라서 서브타이핑을 위해 상속을 사용하고 있다면 부모 클래스가 클라이언트와 맺고 있는 계약에 관해 깊이 있게 고민할 필요가 있다.

---

### 11/12(토)

오브젝트 - 14. 일관성 있는 협력  
[p.470 ~ p.473]

-   애플리케이션을 개발하다 보면 유사한 요구사항을 반복적으로 추가하거나 수정하게 되는 경우가 있다. 이때 객체들의 협력 구조가 서로 다른 경우에는 코드를 이해하기도 어렵고 코드 수정으로 인해 버그가 발생할 위험성도 높아진다. 즉, 전체적인 설계의 일관성이 무너진다.  
    객체지향 패러다임의 장점을 설계를 재사용할 수 있다는 것이다. 재사용을 위해서는 객체들의 협력 방식을 일관성 있게 만들어야 한다. 일관성은 설계에 드는 비용을 감소시킨다. 과거의 해결 방법을 반복적으로 사용해서 유사한 기능을 구현하는 데 드는 시간과 노력을 대폭 줄일 수 있기 때문이다. 특정한 문제를 유사한 방법으로 해결하고 있다는 사실을 알면 문제를 이해하는 것만으로도 코드의 구조를 예상할 수 있게 된다.  
    가능하다면 유사한 기능을 구현하기 위해 유사한 협력 패턴을 사용하는 것이 좋다. 객체들의 협력이 전체적으로 일관성 있는 유사한 패턴을 따른다면 시스템을 이해하고 확장하기 위해 요구되는 정신적인 부담을 크게 줄일 수 있다. 이를 위해 필요한 것은 약간의 기억력과 적응력뿐이다.
