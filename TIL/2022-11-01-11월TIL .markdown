---
layout: post
title: "2022년 11월 TIL"
date: 2022-11-01 00:50:00 +0900
categories: 202211 TIL
---

---

### 11/1(화)

오브젝트 - 13. 서브클래싱과 서브타이핑  
[p.435 ~ p.436]

-   상속은 두 가지 용도로 사용된다.

    1. **타입 계층 구현**:  
       타입 계층 안에서 부모 클래스는 일반적인 개념을 구현하고 자식 클래스는 특수한 개념을 구현한다. 타입 계층의 관점에서 부모 클래스는 자식 클래스의 **일반화(generalization)** 이고 자식 클래스는 부모 클래스의 **특수화(specialization)** 이다.
    2. **코드 재사용**:  
       상속은 간단한 선언만으로 부모 클래스의 코드를 재사용할 수 있도록 해준다. 상속을 사용하면 점진적으로 애플리케이션의 기능을 확장할 수 있다. 그러나 재사용을 위해 상속을 사용할 경우 부모 클래스와 자식 클래스가 강하게 결합되기 떄문에 변경하기 어려운 코드를 얻을 가능성이 크다.

    따라서 상속을 사용하는 일차적인 목표는 타입 계층을 구현하는 것이여야 한다. 타입 계층을 목표로 상속을 사용하면 다형적으로 동작하는 객체들의 관계에 기반해 확장 가능하고 유연한 설계를 얻을 수 있다. 동일한 메시지에 대해 서로 다르게 행동할 수 있는 다형적인 객체를 구현하기 위해서는 객체의 행동을 기반으로 타입 계층을 구성해야 한다.

-   객체기반 프로그래밍과 객체지향 프로그래밍
    -   **객체기반 프로그래밍(Object-Based Programming)**:  
        상태와 행동을 캡슐화한 객체를 조합해서 프로그램을 구성하는 방식을 가리킨다.  
        다른 의미로 사용되는 경우가 있다. 객체기반 프로그래밍이 자바스크립트와 같이 클래스가 존재하지 않는 **프로토타입 기반 언어(Prototype-Based Language)**를 사용한 프로그래밍 방식을 가리키기 위해 사용되는 경우다. 이 관점에서 객체지향 프로그래밍이란 클래스를 사용하는 방식을 의미하고 객체기반 프로그래밍이란 클래스 없이 오직 객체만을 사용하는 프로그래밍 방식을 가리킨다.
    -   **객체지향 프로그래밍(Object-Oriented Programming)**:  
        객체기반 프로그래밍의 한 종류로, 객체기반 프로그래밍과 마찬가지로 객체들을 조합해서 애플리케이션을 개발하지만 **상속**과 **다형성**을 지원한다는 점에서 객체기반 프로그래밍과 차별화된다.

---

### 11/2(수)

오브젝트 - 13. 서브클래싱과 서브타이핑  
[p.436 ~ p.439]

-   **개념 관점의 타입**: **공통의 특징을 공유하는 대상들의 분류다.**  
    개념 관점에서 타입이란 우리가 인지하는 세상의 사물의 종류를 말한다. 즉, 우리가 인식하는 객체들에 적용하는 개념이나 아이디어를 가리켜 타입이라고 부른다. 타입은 사물을 분류하기 위한 틀로 사용된다. 어떤 대상이 타입으로 분류될 때 그 대상을 타입의 **인스턴스(instance)** 라고 부르고, 일반적으로 타입의 인스턴스를 **객체** 라고 한다.  
    타입은 아래의 세 가지 요소로 구성된다.[Martin98, Larman04]
    -   심볼(symbol): 타입에 이름을 붙인 것이다.
    -   내연(intension): 타입의 정의로서 타입에 속하는 객체들이 가지는 공통적인 속성이나 행동을 가리킨다. 일반적으로 타입에 속하는 객체들이 공유하는 속성과 행동의 집합이 내연을 구성한다.
    -   외연(extension): 타입에 속하는 객체들의 집합이다.
-   **프로그래밍 언어 관점의 타입**: **동일한 오퍼레이션을 적용할 수 있는 인스턴스들의 집합이다.**  
     프로그래밍 언어 관점에서 타입은 연속적인 비트에 의미와 제약을 부여하기 위해 사용된다. 하드웨어는 데이터를 0과 1로 구성된 일련의 비트 조합으로 취급한다. 하지만 비트 자체에는 타입이라는 개념이 존재하지 않는다. 비트에 담긴 데이터를 문자열로 다룰지, 정수로 다룰지는 전적으로 데이터를 사용하는 애플리케이션에 의해 결정된다. 따라서 프로그래밍 언어의 관점에서 타입은 비트 묶음에 의미를 부여하기 위해 정의된 제약과 규칙을 가리킨다.  
     프로그래밍 언어에서 타입은 두 가지 목적을 위해 사용된다.[Scott05]
    -   타입에 수행될 수 있는 유효한 오퍼레이션의 집합을 정의한다:  
        모든 객체지향 언어들은 객체의 타입에 따라 적용 가능한 연산자의 종류를 제한함으로써 프로그래머의 실수를 방지한다.
    -   타입에 수행되는 오퍼레이션에 대해 미리 약속된 문맥을 제공한다:  
        피연산자에 부여된 타입이 연산자의 문맥을 정의할 수 있다. 또한, 객체의 타입에 따라 객체를 생성하는 방법에 대한 문맥을 결정할 수 있다.
-   **객체지향 패러다임 관점의 타입**:  
    개념 관점의 타입과 프로그래밍 언어 관점의 타입을 객체지향 패러다임의 관점에서 조합하면 객체지향 패러다임 관점의 타입에 대해 아래와 같은 정의를 도출할 수 있다.
    **객체의 퍼블릭 인터페이스가 객체의 타입을 결정한다. 따라서 동일한 퍼블릭 인터페이스를 제공하는 객체들은 동일한 타입으로 분류된다.**
-   객체에게 중요한 것은 속성이 아니라 **행동** 이다. 어떤 객체들이 동일한 상태를 가지고 있더라도 퍼블릭 인터페이스가 다르면 이들은 서로 다른 타입으로 분류된다. 반대로 어떤 객체들이 내부 상태는 다르지만 동일한 퍼블릭 인터페이스를 공유한다면 이들은 동일한 타입으로 분류된다. **객체를 바라볼 때는 항상 객체가 외부에 제공하는 행동에 초점을 맞춰야 한다**.
