---
layout: post
title: "2022년 12월 TIL"
date: 2022-12-01 23:35:00 +0900
categories: 202212 TIL
---

---

### 12/1(목)

오브젝트 - 부록B. 타입 계층의 구현
[p.576 ~ p.582]

-   타입 계층을 구현할 수 있는 다양한 방법:

    2. 인터페이스를 이용한 타입 계층 구현:  
       대부분의 언어는 다중 상속을 지원하지 않는다. 그리고 상속 계층을 통해 타입을 구현하면 자식 클래스가 부모 클래스와 클래스의 구현에 강하게 결합될 확률이 높다. 따라서 상속 계층 안의 클래스 하나를 변경했는데도 수많은 자식 클래스들이 영향을 받을 수 있다. 상속으로 인한 결합도 문제를 피하고 다중 상속이라는 구현 제약도 해결할 수 있는 방법은 클래스가 아닌 인터페이스를 사용하여 타입 계층을 구현하는 것이다.  
       한 타입은 좀 더 많은 행동을 가진 다른 타입에 의해 확장될 수 있다. 이때 인터페이스가 다른 인터페이스를 확장하도록 만들면 슈퍼타입과 서브타입 간의 타입 계층을 구성할 수 있다.  
       인터페이스를 통해 타입을 정의하면 클래스를 통해 해당 타입에 속하는 객체들을 구현할 수 있다. 자바와 C#에서는 인터페이스를 이용해 타입의 퍼블릭 인터페이스를 정의하고 클래스를 이용해 객체를 구현하는 것이 일반적인 패턴이다. 인터페이스와 클래스를 함께 조합하면 다중 상속의 딜레마에 빠지지 않을 수 있고 단일 상속 계층으로 인한 결합도 문제를 피할 수 있다. 아래는 타입과 타입을 구현한 클래스 사이의 관계의 특징이다.

        - 여러 클래스가 동일한 타입을 구현할 수 있다:  
          한 인터페이스를 구현하는 여러 클래스들은 서로 다른 방법으로 구현할 수 있지만 동일한 타입을 가진다.
        - 하나의 클래스가 여러 타입을 구현할 수 있다:  
          한 클래스가 여러 개의 인터페이스를 구현할 수 있다.

        타입은 동일한 퍼블릭 인터페이스를 가진 객체들의 범주이고, 클래스는 타입에 속하는 객체들을 구현하기 위한 구현 메커니즘이다.

---

### 12/2(금)

오브젝트 - 부록B. 타입 계층의 구현
[p.582 ~ p.584]

-   타입 계층을 구현할 수 있는 다양한 방법:

    3. 추상 클래스를 이용한 타입 계층 구현:  
       추상 클래스를 이용하면 클래스 상속을 이용해 구현을 공유하면서도 결합도로 인한 부작용을 피할 수 있다. 구체 클래스로 타입을 정의해서 상속받는 방법과 추상 클래스로 타입을 정의해서 상속받는 방법 사이에는 아래의 두 가지 중요한 차이점이 있다.

        - 의존하는 대상의 추상화 정도가 다르다:  
          클래스를 이용해 타입 계층을 구현한 경우 자식 클래스의 메서드가 부모 클래스의 메서드의 구체적인 내부 구현에 강하게 결합된다. 반면 추상 클래스의 경우 자식 클래스가 부모 클래스의 내부 구현이 아닌 추상 메서드의 시그니처에만 의존한다.
        - 상속을 사용하는 의도가 다르다:  
          클래스를 이용해 타입 계층을 구현하는 경우 상속을 염두로 두고 설계된 것이 아니다. 따라서 클래스에는 미래의 확장을 위한 어떤 준비도 돼 있지 않다. 반면 추상 클래스의 경우 처음부터 상속을 염두에 두고 설계된 클래스다. 추상 클래스는 자신의 인스턴스를 직접 생성할 수 없다. 추상 클래스는 추상 메서드를 제공함으로써 상속 계층을 쉽게 확장할 수 있게 하고 결합도로 인한 부작용을 방지할 수 있는 안전망을 제공한다.

    모든 구체 클래스의 부모 클래스를 항상 추상 클래스로 만들기 위해 노력해야 한다. 의존하려는 대상이 더 추상적일수록 결합도는 낮아지고 결합도가 낮아질수록 변경으로 인한 영향도는 줄어든다.
