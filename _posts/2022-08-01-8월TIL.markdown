---
layout: post
title: "2022년 8월 TIL"
date: 2022-08-01 00:05:00 +0900
categories: 202208 TIL
---

### 8/1(월)

객체지향의 사실과 오해 - 부록A. 추상화 기법  
분류와 인스턴스화

[개념과 범주]  
객체를 분류하고 범주로 묶는 것은 객체들의 특정 집합에 공통의 **개념**을 적용하는 것을 의미한다. 개념이란 속성과 행위가 유사한 객체에 공통적으로 적용되는 관념이나 아이디어다.  
세상에 존재하는 객체에 개념을 적용하는 과정을 **분류**라고 한다. 분류는 객체를 특정한 개념을 나타내는 집합의 구성 요소로 포함시킨다.  
사람들은 분류를 통해 개별 현상을 하나의 개념으로 다룬다. 분류는 객체를 타입과 연관시키는 것이다. 분류의 역은 타입에 해당하는 객체를 생성하는 과정으로 **인스턴스화** 또는 **예시**라고 한다.

객체지향에서 개념을 가리키는 표준 용어는 **타입**이다. 타입은 개념과 동의어이다. 분류란 객체들을 동일한 타입 또는 범주로 묶는 과정을 의미하므로 객체를 타입의 **인스턴스**라고 한다.

분류는 객체와 타입 간의 관계를 나타낸 것이다. 어떤 객체가 타입의 정의에 부합할 경우 그 객체는 해당 타입으로 분류되며 자동으로 타입의 인스턴스가 된다.

[타입]  
객체를 타입에 따라 분류하기 위해서는 객체가 타입에 속하는지 여부를 확인할 수 있어야 한다. 특정 객체를 어떤 타입이라고 말할 수 있으려면 타입에 대한 명확한 정의가 필요하다. 타입에 대한 명확한 정의가 내려진 후에 어떤 객체가 타입의 인스턴스인지 여부를 쉽게 판단할 수 있다.  
타입을 객체의 분류 장치로서 적용하려면 아래 세 가지 관점에서의 정의가 필요하다.

-   **심볼**: 타입을 가리키는 간략한 이름이나 명칭
-   **내연**: 타입의 오나전한 정의, 내연의 의미를 이용해 객체가 타입에 속하는지 여부를 확인할 수 있다.
-   **외연**: 타입에 속하는 모든 객체들의 집합

도메인을 분석하는 동안 이름, 의미, 객체들의 집합을 이용해 개념을 정의할 수 있다.

[외연과 집합]  
타입의 외연은 타입에 속하는 객체들의 집합으로 표현한다. 집합은 외연을 가리키는 또 다른 명칭이다. 객체들은 동시에 서로 다른 집합에 포함될 수도 있다.  
사람들은 한 시점에 동일한 객체를 다양한 방식으로 인지하기 때문에 이것은 사람들이 세상을 인지하는 일반적인 방식을 반영한다.  
한 객체가 한 시점에 하나의 타입에만 속하는 것을 **단일 분류(single classification)**라고 한다. 반면 한 객체가 한 시점에 여러 타입에 속할 경우 이를 **다중 분류(multiple classification)**라고 한다.

대부분의 객체지향 프로그래밍 언어들은 단일 분류만을 지원한다. 대부분의 언어에서 한 객체는 오직 한 클래스의 인스턴스여야만 하며 동시에 두 개의 클래스의 인스턴스일 수는 없다. 이는 다중 상속과는 다른 것으로, 다중 상속은 하나의 타입이 다수의 슈퍼타입을 가질 수 있도록 허용하지만 타입 정의를 생략할 수는 없다. 반면 다중 분류는 특정한 타입을 정의하지 않고도 하나의 객체가 서로 다른 타입의 인스턴스가 되도록 허용한다.

객체를 특정한 타입으로 분류하면 해당 객체는 타입의 집합에 포함된다. 객체가 한 집합에서 다른 집합의 원소로 자신이 속하는 타입을 변경할 수 있는 경우를 **동적 분류(dynamic classification)**라고 한다. 반면 객체가 자신의 타입을 변경할 수 없는 경우를 **정적 분류(static classification)**라고 한다.

다중 분류와 동적 분류는 서로 베타적인 개념이 아니다. 다중 분류와 동적 분류를 함께 적용하는 것이 실세계의 복잡성을 모델링하는 데 유용하다. 대부분의 언어는 일반 클래스로부터 인스턴스를 생성한 후 클래스를 변경하는 방법을 제공하지 않는다. 즉, 객체의 타입을 변경할 수 없다. 따라서 대부분의 언어는 정적 분류만 허용하며 동적 분류를 구현할 수 있는 방법을 제공하지 않는다.

다중 분류와 동적 분류는 개념적인 관점에서 도메인을 분석하는 데 유용하지만 객체지향 프로그래밍 언어로 구현하는 것이 쉽지 않다. 그렇기 때문에 다중 분류와 정적 분류 방식으로 객체들의 범주를 재조정하는 편이 분석과 구현 간의 차이를 메울 수 있는 가장 현실적인 방법이다.

[클래스]  
객체지향 프로그래밍 언어를 이용해 타입을 구현하는 가장 보편적인 방법은 클래스를 이용하는 것이다. '타입을 구현한다'라고 표현한 이유는 클래스와 타입이 동일한 개념이 아니기 때문이다. 클래스는 타입을 구현하는 용도 외에도 코드를 재사용하는 용도로 사용되기도 한다. 클래스 외에도 인스턴스를 생성할 수 없는 추상 클래스나 인터페이스를 통해 타입을 구현할 수도 있다.

객체들이 동일한 특성을 가진다면 그것들은 동일한 카테고리에 속한다. 따라서 객체들의 카테고리는 객체들이 공유하는 공통적인 특성에 의해 정의된다. 또한, 객체의 특성을 본질적인 속성과 유연적인 속성으로 분류할 수 있다. 본질(essence)이란 한 사물의 가장 핵심적이고 필수불가결한 속성이다. 본질적이지 않은 속성을 우연적(accidental) 속성이라고 한다.

클래스는 객체가 공유하는 본질적인 속성을 정의한다. 대부분의 객체지향 프로그래밍 언어에서 동일한 범주에 속하는 객체는 동일한 클래스의 인스턴스여야 한다. 대부분의 객체지향 언어는 본질적인 속성을 표현할 수 있지만 우연적인 속성은 표현할 수 없다. 따라서 동일한 범주에 속하는 객체는 모두 동일한 속성을 가져야 한다.

자바스크립트처럼 클래스가 존재하지 않는 프로토타입 기반의 언어에서 분류와 인스턴스화는 프로토타입이라는 객체의 복사를 통해 이뤄진다.

---

### 8/2(화)

객체지향의 사실과 오해 - 부록A. 추상화 기법  
일반화와 특수화

[범주의 계층]  
1735년 카를로스 린네는 생문 분류법에 대한 논문인 「자연의 체계」를 발표한다. 이는 '계'라는 최상위 단계가 있는 중첩된 계층 구조였다. 이는 다시 문, 강, 목, 과, 속, 종으로 세분화됐으며 각 단계를 가리키는 라틴어 명칭이 존재했다.  
린네의 계층 구조는 좀 더 세부적인 범주가 계층의 하위에 위치하고 좀 더 일반적인 범주가 계층의 상위에 위치한다. 이떄 게층의 상위에 위치한 범주를 계층의 하위에 위치한 범주의 **일반화**라고 하고, 계층의 하위에 위치한 범주는 계층의 상위에 위치한 범주의 **특수화**라고 한다.

[서브타입]  
객체지향에서는 범주는 개념을 의미하고, 개념은 타입을 의미함으로 일반호와 특수화는 계층 구조 안에 존재하는 타입 간의 관계를 의미한다. 어떤 타입이 다른 타입보다 일반적이라면 이 타입을 **슈퍼타입(supertype)**이라고 한다. 어떤 타입이 다른 타입보다 좀 더 특수하다면 이 타입을 **서브 타입(subtype)**이라고 한다. 슈퍼타입은 서브타입의 일반화이고 서브타입은 슈퍼타입의 특수화이다.

일반화와 특수화의 계층 구조에서 서브타입은 슈퍼타입이 가진 본질적인 속성과 함께 자신만의 추가적인 속성을 가진다. 이는 내연의 관점에서 슈퍼타입의 정의가 서브타입의 정의보다 더 일반적이라는 것을 의미한다.  
서브타입은 슈퍼타입의 본질적인 속성을 모두 포함하기 때문에 계층에 속하는 모든 서브타입들이 슈퍼타입의 속성을 공유한다는 것을 예상할 수 있다. 이를 통해 파편화된 사실을 모르더라도 복잡한 세상의 속성을 논리적으로 쉽게 이해할 수 있다.

크레이그 라만은 어떤 타입이 다른 타입의 서브타입이 되기 위해서는 '100% 규칙'과 'Is-a 규칙'을 준수해야 한다고 말한다. 100% 규칙은 슈퍼타입의 정의가 100% 서브타입에 적용되야 하며 서브타입은 속성과 연관관계 면에서 슈퍼타입과 100% 일치하는 것을 말한다. Is-a 규칙은 서브타입의 모든 인스턴스는 슈퍼타입 집합에 포함되어야 한다는 것이다. 대게 영어로 서브타입은 슈퍼타입이다(subtype is a supertype)라는 구문을 만듦으로써 테스트할 수 있다.  
흔히 일반화 관계를 **is-a 관계**라고 말한다. is-a 관계의 본질은 서브타입이 슈퍼타입의 부분집합이라는 것이다.

[상속]  
프로그래밍 언어를 이용해 일반화와 특수화 관계를 구현하는 가장 일반적인 방법은 클래스 간의 상속을 사용하는 것이다. 그러나 프로그램 내의 두 클래스 간의 상속 관계가 존재할 때 이 관계를 반드시 일반화 관계라고 할 수는 없다.

일반화의 원칙은 한 타입이 다른 타입의 서브타입이 되기 위해서는 슈퍼타입에 순응(conformance)해야 한다는 것이다. 순응에는 구조적인 순응(structural conformance)과 행위적인 순응(behavioral conformance)의 두 가지 종류가 있다. 두 가지 모두 특정 기대 집합에 대해 서브타입의 슈퍼타입에 대한 **대체 가능성**을 의미한다. 구조적인 순응은 기대 집합은 속성과 연관관계에 대한 것이며 행위적인 순응은 기대 집합은 행위가 동일한 계약을 기반으로 하느냐에 관한 것이다.

구조적인 순응은 타입의 내연과 관련된 100% 규칙을 의미한다. 즉 서브타입은 슈퍼타입이 가지고 있는 속성과 연관관계 면에서 100% 일치해야 한다. 따라서 서브타입이 슈퍼타입을 대체하더라도 구조에 관한 동일한 기대 집합을 만족시킬 수 있다.

행위적인 순응은 타입의 행위에 관한 것이며, 서브타입은 슈퍼타입을 행위적으로 대체 가능해야 한다. 이를 **리스코프 치환 원칙(Liskov Substitution Principle)**이라고 한다.

상속의 또 다른 용도는 코드 중복을 제거하고, 공통 코드를 재사용하기 위한 언어적 메커니즘을 제공하는 것이다. 상속은 **서브타이핑(subtyping)**과 **서브클래싱(subclassing)**의 두가지 용도로 사용될 수 있다. 서브클래스가 슈퍼클래스를 대체할 수 있는 경우를 서브타이핑이라고 한다. 서브클래스가 슈퍼클래스를 대체할 수 없는 경우는 서브클래싱이라고 한다. 서브타이핑을 **인터페이스 상속(interface inheritance)**이라고 하고, 서브클래싱을 **구현 상속(implementation inheritance)**이라고 한다.

일반화를 위한 서브타이핑은 특정 기대 집합에 대한 서브타입과 슈퍼타입 간의 구조적, 또는 행위적 순응 관계를 의미하며, 대체 가능성을 내포한다. 상속은 서브타이핑을 프로그래밍 언어적으로 구현할 떄 사용하지만, 모든 상속이 서브타이핑인 것은 아니다. 서브클래스가 슈퍼클래스를 대체할 수 없고 단지 코드만 공유하고 있다면 서브타이핑이 아니라 서브클래싱이라고 한다.

여러 클래스로 구성된 상속 계층에서 수신된 메시지를 이해하는 기본적인 방법은 클래스 간의 **위임(delegation)**을 사용하는 것이다. 어떤 객체의 클래스가 수신된 메시지를 이해할 수 없다면 메시지를 부모 클래스로 위임한다. 부모 클래스에서도 메시지를 이해할 수 없다면 자신의 부모 클래스로 다시 메시지를 위임한다. 이는 계층 내의 어떤 클래스가 메시지를 처리하거나 최상위 부모 클래스에 위임도리 떄까지 반복된다.

클래스가 없는 프로토타입 언어에서 상속은 객체와 객체 간의 관계로 이뤄진다. 즉, 어떤 타입의 객체를 특정 객체 타입의 특수화로 만들거나 행동을 공유할 수 있게 만들고 싶은 경우 객체와 객체를 상속 관계를 통해 연결한다. 클래스 기반 언어와 프로토타입 기반 언어 모두 메시지는 위임 메커니즘에 의해 처리된다. 차이점은 자식 클래스와 부모 클래스 사이가 아니라 자식 객체와 부모 객체 사이에 위임이 이뤄진다는 것이다.

---

### 8/3(수)

객체지향의 사실과 오해 - 부록A. 추상화 기법  
집합과 분해

[계층적인 복잡성]

-   복잡성은 '계층'의 형태를 띤다.
-   단순한 형태로부터 복잡한 형태로 진화하는 데 걸리는 시간은 그 사이에 존재하는 '안정적인 형태'의 수와 분포에 의존한다.

안정적인 형태의 부분으로부터 전체를 구축하는 행위를 **집합**이라고 하고 집합과 반대로 전체를 부분으로 분할하는 행위를 **분해**라고 한다. 집합은 불필요한 세부 사항을 추상화한다. 필요한 시점에는 전체를 분해함으로써 그 안에 포함된 부분들을 새로운 전체로 다룰 수 있다. 전체와 부분 간의 일관된 계층 구조는 재귀적인 설계를 가능하게 한다.

집합은 전체의 내부로 불필요한 세부 사항을 감춰주기 때문에 추상화 메커니즘인 동시에 캡슐화 메커니즘이다. 외부에서는 전체에 관해서만 알고 내부를 모르기 때문에 내부의 구성을 변경하더라도 외부에 영향을 미치지 않는다. 집합과 분배는 한 번에 다뤄야 하는 요소의 수를 감소시킴으로써 인지 과부하를 방지한다.

[합성 관계]  
객체와 객체 사이에 전체-부분 관계를 구현하기 위해서는 **합성 관계**를 사용한다. 합성 관계는 부분을 전체 안에 캡슐화함으로써 인지 과부하를 방지한다. 따라서 객체들의 그룹과 관련된 복잡성이 완화된다.  
단순한 물리적 통로가 존재하는 관계를 **연관 관계**라고 한다.

합성 관계와 연관 관계 사이의 차이가 항상 명확한 것은 아니지만 일반적으로 합성 관계로 연결된 객체는 포함하는 객체가 제거될 때 내부에 포함된 객체도 함께 제거된다. 반면 연관 관계로 연결된 두 객체는 생명주기와 관련된 어떤 제약도 부과하지 않는다. 연관 관계로 연결된 두 객체는 독립적으로 제거될 수 있다. 합성 관계는 생명주기 측면에서 연관 관계보다 더 강하게 객체들을 결합한다.

[패키지]  
소프트웨어의 구조를 단순화하기 위해서는 서로 연관성이 높은 클래스 집합을 논리적인 단위로 통합해야 한다. 소프트웨어의 전체적인 구조를 표현하기 위해 관련된 클래스 집합을 하나의 논리적인 단위로 묶는 구성 요소를 **패키지(package)**또는 **모듈(module)**이라고 한다.  
패키지를 이용하면 시스템의 전체적인 구조를 이해하기 위해 한 번에 고려해야 하는 요소의 수를 줄일 수 있다. 또한 개별 클래스가 아닌 클래스의 집합을 캡슐화함으로써 전체적인 복잡도를 낮출 수 있다. 함께 협력하는 응집도 높은 클래스 집합을 하나의 패키지 내부로 모으면 코드를 이해하기 위해 패키지의 경계를 넘나들 필요가 적어진다.  
패키지는 내부에 포함된 클래스들을 감춤으로써 시스템의 구조를 추상화한다.

---

### 8/4(목)

오브젝트 - 1. 객체, 설계
[p.7 ~ p.25]

-   소프트웨어 모듈이 가져야 하는 세 가지 기능:
    > 모든 소프트웨어 모듈에는 세 가지 목적이 있다. 첫 번쨰 목적은 실행 중에 제대로 동작하는 것이다. 이것은 모듈의 존재 이유할 수 있다. 두 번쨰 목적은 변경을 위해 존재하는 것이다. 대부분의 모듈은 생명주기 동안 변경되기 때문에 간단한 작업만으로 변경이 가능해야 한다. 변경하기 어려운 모듈은 제대로 동작하더라도 개선해야 한다. 모듈의 세 번째 목적은 코드를 읽는 사람과 의사소통하는 것이다. 모듈은 특별한 훈련 없이도 개발자가 쉽게 읽고 이해할 수 있어야 한다. 읽는 사람과 의사소통할 수 없는 모듈은 개선해야 한다.[Martin02]
-   의존성(dependency):  
    의존성이라는 말 속에는 어떤 객체가 변경될 떄 그 객체에게 의존하는 다른 객체도 함께 변경될 수 있다는 사실이 내포돼 있다. 그렇기 때문에 애플리케이션의 기능을 구현하는 데 필요한 최소한의 의존성만 유지하고, 불필요한 의존성을 제거해야 한다.
-   결합도(coupling):  
    객체 사이의 의존성이 과한 경우를 가리킨다. 반대로 객체들이 합리적인 수준으로 의존할 경우에는 결합도가 낮다고 한다. 설계의 목표는 객체 사이의 결합도를 낮춰 변경이 용이한 설계를 만드는 것이다.
-   캡슐화(encapsulation):  
    개념적이나 물리적으로 객체 내부의 세부적인 사항을 감추는 것을 말한다. 캡슐화의 목적은 변경하기 쉬운 객체를 만드는 것이다. 캡슐화를 통해 객체 내부로의 접근을 제한하면 객체와 객체 사이의 결합도를 낮출 수 있기 때문에 설계를 좀 더 쉽게 변경할 수 있게 된다.
-   객체를 인터페이스(interface)와 구현(implementation)으로 나누고 인터페이스만을 공개하는 것은 객체 사이의 결합도를 낮추고 변경하기 쉬운 코드를 작성하기 위해 따라야 하는 가장 기본적인 설계 원칙이다.

---

### 8/5(금)

오브젝트 - 1. 객체, 설계  
[p.25 ~ p.29]

-   객체의 자율성을 높이게 되면 이해하기 쉽고 유연한 설계를 얻을 수 있다. 핵심은 객체 내부의 상태를 캡슐화하고 객체 간에 오직 메시지를 통해서만 상호작용하도록 만드는 것이다.
-   응집도(cohesion):  
    밀접하게 연관된 작업만을 수행하고 연관성 없는 작업은 다른 객체에게 위임하는 객체를 가리켜 응집도가 높다고 말한다. 자신의 데이터를 스스로 처리하는 자율적인 객체를 만들면 결합도를 낮출 수 있을뿐더러 응집도를 높일 수 있다.
-   절차적 프로그래밍(Procedural Programming):  
    모든 처리가 프로세스(Process)를 담당하는 하나의 클래스 안에 위치하고 나머지 클래스는 단지 데이터(Data)의 역할만 수행한다. 절차적 프로그래밍은 데이터의 변경으로 인한 영향을 지역적으로 고립시키기 어럽다.
-   객체지향 프로그래밍(Object-Oriented Programming):  
    데이터와 프로세스가 동일한 모듈 내부에 위치하도록 프로그래밍하는 방식이다. 휼륭한 객체지향 설계의 핵심은 캡슐화를 이용해 의존성을 적절히 관리함으로써 객체 사이의 밀집도를 낮추는 것이다.
-   책임의 이동(shift of responsibility):  
    절차적 프로그래밍 방식에서는 제어 흐름, 즉 책임이 한 클래스에 집중돼 있다. 그러나 객체지향 설계에서는 제어 흐름이 각 객체에 적절하게 분산돼 있다. 하나의 기능을 완성하는 데 필요한 책임이 여러 객체에 걸쳐 분산돼 있는 것이다. 절차적 프로그래밍 방식에서 절차지향 설계로 변경할 때 한 곳에 몰려있던 책임이 개별 객체로 이동하게 된다. 이것이 책임의 이동이 의미하는 것이다. 객체지향 설계에서는 각 객체에 책임이 적절하게 분배되고 각 객체는 **자신을 스스로 책임**진다.

---

### 8/6(토)

오브젝트 - 1. 객체, 설계  
[p.29 ~ p.36]

-   어떤 기능을 설계하는 방법은 한 가지 이상일 수 있다.
-   동일한 기능을 한 가지 이상의 방법으로 설계할 수 있기 때문에 결국 설계는 트레이드오프(trade-off: 하나가 증가하면 다른 하나는 무조건 감소한다는 것을 뜻한다)의 산물이다.
-   의인화(anthropomorphism):  
    능동적이고 자율적인 존재로 소프트웨어를 설계하는 원칙을 가리킨다. 현실에서는 수동적인 존재라고 하더라도 객체지향의 세계로 들어오면 모든 것이 능동적이고 자율적인 존재로 바뀐다.
-   설계란 코드를 배치하는 것이다[Metz12].
-   좋은 설계란 오늘 완성해야 하는 기능을 구현하는 코드를 짜야 하는 동시에 내일 쉽게 변경할 수 있는 코드를 짜야 한다[Metz12].

---

### 8/7(일)

오브젝트 - 2. 객체지향 프로그래밍  
[p.37 ~ p.42]

-   객체지향 패러다임으로 프로그래밍 하는 위한 방법
    1. 어떤 클래스가 필요한지를 고민하기 전에 어떤 객체들이 필요한지 고민하라.  
       클래스는 공통적인 상태와 행동을 공유하는 객체들을 추상화한 것이다. 따라서 클래스의 윤곽을 잡기 위해서는 어떤 객체들이 어떤 상태와 행동을 가지는지를 먼저 결정해야 한다.
    2. 객체를 독립적인 존재가 아니라 기능을 구현하기 위해 협력하는 공동체의 일원으로 봐야 한다.  
       객체는 홀로 존재하는 것이 아니라 다른 객체에게 도움을 주거나 의존하면서 살아가는 협력적인 존재다. 따라서 객체를 협력하는 공동체의 일원으로 바라보는 것이 중요하다. 객체들의 모양과 윤곽이 잡히면 공통된 특성과 상태를 가진 객체들을 타입으로 분류하고 이 타입을 기반으로 클래스를 구현하면 된다.
-   도메인(domain):  
    문제를 해결하기 위해 사용자가 프로그램을 사용하는 분야를 말한다.
-   객체지향 프로그래밍이 강력한 이유는 요구사항을 분석하는 초기 단계부터 프로그램을 구현하는 마지막 단계까지 객체라는 동일한 추상화 기법을 사용할 수 있기 때문이다. 요구사항과 프로그램을 객체라는 동일한 관점에서 바라볼 수 있기 때문에 도메인을 구성하는 개념들이 프로그램의 객체와 클래스로 매끄럽게 연결될 수 있다.
-   도메인 개념들을 구현하기 위해 클래스를 사용하며 일반적으로 클래스의 이름은 도메인 개념의 이름과 동일하거나 유사하게 짓는다. 클래스 사이의 관계도 최대한 도메인 개념 사이에 맺어진 관계와 유사하게 만들어야 한다.

---

### 8/8(월)

오브젝트 - 2. 객체지향 프로그래밍  
[p.42 ~ p.45]

-   객체는 **상태(state)**와 **행동(behavior)**을 함께 가지는 복합적인 존재이다. 또한, 객체는 스스로 판단하고 행동하는 **자율적인 존재**다.
-   객체는 상태와 행동을 함께 포함하는 식별 가능한 단위로 정의한다. 이처럼 데이터와 기능을 객체 내부로 함께 묶는 것을 **캡슐화**라고 부른다.
-   객체지향 프로그래밍 언어들은 외부에서의 접근을 통제할 수 있는 **접근 제어(access control)** 메커니즘을 제공한다. 접근 제어를 위해 public, protected, private과 같은 **접근 수정자(access modifier)**를 제공한다.
-   객체 내부에 대한 접근을 통제하는 이유는 객체를 자율적인 존재로 만들기 위해서이다. 객체지향의 핵심은 스스로 상태를 관리하고, 판단하고, 행동하는 자율적인 객체들의 공동체를 구성하는 것이다. 객체가 자율적인 존재로 우뚝 서기 위해서는 외부의 간섭을 최소화해야 한다.
-   캡슐화와 접근 제어는 객체를 두 부분으로 나눈다.

    1. 외부에서 접근 가능한 부분으로 **퍼블릭 인터페이스(public interface)**라고 부른다.
    2. 외부에서는 접근 불가능하고 오직 내부에서만 접근 가능한 부분으로 이를 **구현(implementation)**이라고 부른다.

    **인터페이스와 구현의 분리(separation of interface and implementation)** 원칙은 휼륭한 객체지향 프로그램을 만들기 위해 따라야 하는 핵심 원칙이다.

-   프로그래머의 역할을 **클래스 작성자(class creator)**와 **클라이언트 프로그래머(client programmer)**로 구분하는 것이 유용하다[Eckel06]. 클래스 작성자는 새로운 데이터 타입을 프로그램에 추가하고, 클라이언트 프로그래머는 클래스 작성자가 추가한 데이터 타입을 사용한다.
-   클라이언트 프로그래머의 목표는 필요한 클래스들을 엮어서 애플리케이션을 빠르고 안정적으로 구축하는 것이다. 클래스 작성자는 클라이언트 프로그래머에게 필요한 부분만 공개하고 나머지는 꽁꽁 숨겨야 한다. 클라이언트 프로그래머가 숨겨 놓은 부분에 마음대로 접근할 수 없도록 방지함으로써 클라이언트 프로그래머에 대한 영향을 걱정하지 않고도 내부 구현을 마음대로 변경할 수 있다. 이를 **구현 은닉(implementation hiding)**이라고 부른다.
-   구현 은닉은 클래스 작성자와 클라이언트 프로그래머 모두에게 유용한 개념이다. 클라이언트 프로그래머는 내부의 구현을 무시한 채 인터페이스만 알고 있어도 클래스를 사용할 수 있기 때문에 머릿속에 담아둬야 하는 지식의 양을 줄일 수 있다. 클래스 작성자는 인터페이스를 바꾸지 않는 한 외부에 미치는 영향을 걱정하지 않고도 내부 구현을 마음대로 변경할 수 있다.

---

### 8/9(화)

오브젝트 - 2. 객체지향 프로그래밍  
[p.46 ~ p.55]

-   의미를 좀 더 명시적이고 분명하게 표현할 수 있다면 객체를 사용해서 해당 개념을 구현하는 것이 좋다. 그 개념이 하나의 인스턴스 변수만을 포함하더라도 개념을 명시적으로 표현하는 것은 전체적인 설계의 명확성과 유연성을 높여준다.
-   협력(Collaboration): 시스템의 어떤 기능을 구현하기 위해 객체들 사이에 이뤄지는 상호작용을 말한다.
-   객체는 다른 객체의 인터페이스에 공개된 행동을 수행하도록 **요청(request)**할 수 있다. 요청을 받은 객체는 자율적인 방법에 따라 요청을 처리한 후 **응답(response)**한다.
-   객체가 다른 객체와 상호작용할 수 있는 유일한 방법은 **메시지를 전송(send a message)**하는 것뿐이다. 다른 객체에게 요청이 도착할 때 해당 객체가 **메시지를 수신(receive a message)**했다고 한다. 수신된 메시지를 처리하기 위한 자신만의 방법을 **메서드(method)**라고 한다.
-   메시지와 메서드의 구분에서부터 **다형성(polymorphism)**의 개념이 출발한다.
-   객체지향에서 중요하게 여겨지는 두 가지 개념은 **상속(inheritance)**과 **다형성**이고, 그 기반에는 **추상화(abstraction)**라는 우너리가 숨겨져 있다.
-   인스턴스를 생성할 필요없는 객체는 **추상 클래스(abstract class)**를 통해 구현할 수 있다. 추상 클래스는 하나 이상의 추상 메서드를 포함하고 있는 클래스로, 객체 지향 프로그래밍에서 중요한 특징인 다형성을 가지는 메서드의 집합을 정의할 수 있도록 해준다. 반드시 사용해야 하는 메서드를 추상 클래스에 추상 메서드로 선언하면, 이 클래스를 상속받는 모든 클래스에서는 이 추상 메서드를 반드시 재정의해야 한다.
-   부모 클래스에 기본적인 알고리즘의 흐름을 구현하고 중간에 필요한 처리를 자식 클래스에 위임하는 디자인 패턴을 TEMPLATE METHOD 패턴[GOF94]이라고 부른다.
-   오버라이딩(overriding): 부모 클래스에 정의된 같은 이름, 같은 파라미터 목록을 가진 메서드를 자식 클래스에서 재정의하는 경우를 가리킨다. 자식 클래스의 메서드는 오버라이딩한 부모 클래스의 메서드를 가리기 때문에 외부에서는 부모 클래스의 메서드가 보이지 않는다.
-   오버로딩(overloading): 메서드의 이름은 같지만 제공되는 파라미터의 목록이 다르다. 오버로딩한 메서드는 원래 메서드를 가리지 않기 때문에 공존한다.

---

### 8/10(수)

오브젝트 - 2. 객체지향 프로그래밍  
[p.55 ~ p.63]

-   어떤 클래스가 다른 클래스에 접근할 수 있는 경로를 가지거나 해당 클래스의 객체의 메서드를 호출할 경우 두 클래스 사이에 의존성이 존재한다고 말한다.
-   코드의 의존성과 실행 시점의 의존성을 서로 다를 수 있다. 즉 클래스 사이의 의존성과 객체 사이의 의존성은 동일하지 않을 수 있다. 쉽게 재사용할 수 있으며, 확장 가능한 객체지향 설계가 가지는 특징은 코드의 의존성과 실행 시점의 의존성이 다르다는 것이다.
-   코드의 의존성과 실행 시점의 의존성이 다르면 다를수록 코드를 이해하기 어려워진다. 코드를 이해하기 위해서는 코드뿐 아니라 객체를 생성하고 연결하는 부분을 찾아야 하기 때문이다. 그러나 코드의 의존성과 실행 시점의 의존성이 다르면 다를 수록 코드는 코드는 더 유연해지고 확장 가능해진다.
-   클래스를 새로 만들어야 하는 상황에서 이미 그 클래스와 유사한 클래스가 있다고 가정한다. 이떄 그 클래스의 코드를 가져와 약간만 수정해서 새로운 클래스를 만들 수 있다면 편할 것이다. 더 좋은 방법은 그 클래스의 코드를 전혀 수정하지 않고 재사용하는 것일 것이다. 이를 가능하게 하는 것이 **상속**이다.
-   자식 클래스는 상속을 통해 부모 클래스의 인터페이스를 물려받기 때문에 부모 클래스 대신 사용될 수 있다. 컴파일러는 코드 상에서 부모 클래스가 나오는 모든 장소에서 자식 클래스를 사용하는 것을 허용한다. 이처럼 자식 클래스가 부모 클래스를 대신하는 것을 **업케스팅(upcasting)**이라고 부른다. 업케스팅이라고 부르는 이유는 일반적으로 클래스 다이어그램을 작성할 떄 부모 클래스를 자식 클래스 위에 위치시키기 때문이다.
-   동일한 메시지를 전송하지만 실제로 어떤 메서드가 실행될 것인지는 메시지를 수신하는 객체의 클래스가 무엇이냐에 따라 달라지는 것을 **다형성**이라고 부른다.
-   다형성은 객체지향 프로그램의 컴파일 시간 의존성과 실행 시간 의존성이 다를 수 있다는 사실을 기반으로 한다.
-   다형성은 동일한 메시지를 수신했을 때 객체의 타입에 따라 다르게 응답할 수 있는 능력을 가지고 있기 때문에 다형적인 협력에 참여하는 객체들은 모두 같은 메시지를 이해할 수 있어야 한다. 즉 인터페이스가 동일해야 한다.
-   메시지와 메서드를 실행 시점에 바인딩하는 것을 **지연 바인딩(lazy binding)**또는 **동적 바인딩(dynamic binding)**이라고 부른다. 반면 전통적인 함수 호출처럼 컴파일 시점에 실행될 함수나 프로시저를 결정하는 것을 **초기 바인딩(early binding)** 또는 **정적 바인딩(static binding)**이라고 부른다.

---

### 8/11(목)

오브젝트 - 2. 객체지향 프로그래밍  
[p.64 ~ p.67]

-   상속은 두 가지 분류로 나눌 수 있다.

    1. **구현 상속(implementation inheritance)**: **서브클래싱(subclassing)**이라고도 부른다. 순수하게 코드를 재사용하기 위한 목적으로 상속을 사용하는 것을 말한다.
    2. **인터페이스 상속(interface inheritance)**: **서브타이핑(subtyping)**이라고도 부른다. 다형적인 협력을 위해 부모 클래스와 자식 클래스가 인터페이스를 공유할 수 있도록 상속을 이용하는 것을 말한다.

    상속은 구현 상속이 아닌 인터페이스 상속을 사용해야 한다. 인터페이스를 재사용할 목적이 아니라 구현을 재사용할 목적으로 상속을 사용하면 변경에 취약한 코드를 낳게 될 확률이 높다.

-   인터페이스:  
    구현은 공유할 필요가 없고 순수하게 인터페이스만 공유하고 싶을 때 사용한다. 구현에 대한 고려 없이 다형적인 협력에 참여하는 클래스들이 공유 가능한 외부 인터페이스를 정의한 것이다. C++에서는 **추상 기반 클래스(ABC: Abstract Base Class)**를 통해 인터페이스 개념을 구현할 수 있다.
-   추상화를 사용하면 아래 두 가지 장점이 있다.
    1. 추상화의 계층만 따로 떼어 놓고 살펴보면 요구사항의 정책을 높은 수준에서 서술할 수 있다.  
       추상화를 사용하면 세부적인 내용을 무시한 채 상위 정책을 쉽고 간단하게 표현할 수 있다. 추상화의 이런 특징은 세부사항에 억눌리지 않고 상위 개념만으로도 도메인의 중요한 개념을 설명할 수 있게 한다. 또한, 추상화를 이용한 설계는 필요에 따라 표현의 수준을 조정하는 것이 가능하다.  
       추상화를 이용해 상위 정책을 기술한다는 것은 기본적인 애플리케이션의 협력 흐름을 기술한다는 것을 의미한다. 재사용 가능한 설계의 기본을 이루는 **디자인 패턴(design pattern)**이나 **프레임워크(framework)** 모두 추상화를 이용해 상위 정책을 정의하는 객체지향의 메커니즘을 활용하고 있다.
    2. 설계가 좀 더 유연해진다.  
       위 설명과 같이 추상화를 이용해 상위 정책을 표현하면 기존 구조를 수정하지 않고도 새로운 기능을 쉽게 추가하고 확장할 수 있다. 이는 설계를 유연하게 해준다.
-   항상 예외 케이스를 최소화하고 일관성을 유지할 수 있는 방법을 선택하는 것이 좋다.
-   추상화가 유연한 설계를 가능하게 하는 이유는 설계가 구체적인 상황에 결합되는 것을 방지하기 때문이다. **컨텐스트 독립성(context independency)**라고 불리는 개념은 프레임워크와 같은 유연한 설계가 필수적인 분야에서 그 진가를 발휘한다.
-   **결론은 유연성이 필요한 곳에 추상화를 사용하라는 것이다.**

---

### 8/12(금)

오브젝트 - 2. 객체지향 프로그래밍  
[p.68 ~ p.72]

-   구현과 관련된 모든 것들이 트레이드오프의 대상이 될 수 있다. 작성하는 모든 코드에는 합당한 이유가 있어야 하며 사소한 결정이라도 트레이드오프를 통해 얻어진 결론과 그렇지 않은 결론 사이의 차이는 크다.
-   상속은 코드를 재사용하기 위해 널리 사용되는 방법이지만 널리 사용하는 방법이라고 해서 가장 좋은 방법인 것은 아니다. 객체지향 설계와 관련된 자료에서는 코드 재사용을 위해서는 상속보다 **합성(composition)**이 더 좋은 방법이라고 이야기한다. 합성은 다른 객체의 인스턴스를 자신의 인스턴스 변수로 포함해서 재사용하는 방법을 말한다.
-   상속은 객체지향에서 코드를 재사용하기 위해 널리 사용되는 기법이다. 하지만 아래 두 가지 관점에서 설계에 안 좋은 영향을 미친다.
    1. 상속이 캡슐화를 위반한다.  
       상속을 이용하기 위해서는 부모 클래스의 내부 구조를 잘 알고 있어야 한다. 즉, 부모 클래스의 구현이 자식 클래스에 노출되는 것이다. 캡슐화의 약화는 자식 클래스가 부모 클래스에 강하게 결합되도록 만들기 때문에 부모 클래스를 변경할 떄 자식 클래스도 함께 변경될 확률이 높아진다.
    2. 상속은 설계를 유연하지 못하게 만든다.  
       상속은 부모 클래스와 자식 클래스 사이의 관계를 컴파일 시점에 결정한다. 따라서 실행 시점에 객체의 종류를 변경하는 것이 불가능하다.
-   인터페이스에 정의된 메시지를 통해서만 코드를 재사용하는 방법을 **합성**이라고 한다. 상속은 부모 클래스의 코드와 자식 클래스의 코드를 컴파일 시점에 하나의 단위로 강하게 결합하는 데 비해 합성은 인터페이스를 통해 약하게 결합된다.
-   합성은 상속이 가지는 두 가지 문제점을 모두 해결한다. 인터페이스에 정의된 메시지를 통해서만 재사용이 가능하기 떄문에 구현을 효과적으로 캡슐화할 수 있다. 또한 의존하는 인스턴스를 교체하는 것이 비교적 쉽기 때문에 설계를 유연하게 만든다. 상속은 클래스를 통해 강하게 결합되는 데 비해 합성은 메시지를 통해 느슨하게 결합된다.[GOF94]
-   그렇다고 해서 상속을 사용하지 말라는 것이 아니다. 대부분의 설계에서는 상속과 합성을 함께 사용해야 한다. 코드를 재사용하는 경우에는 상속보다 합성을 선호하는 것이 옳지만 다형성을 위해 인터페이스를 재사용하는 경우에는 상속과 합성을 함께 조합해서 사용할 수 밖에 없다.

---

### 8/13(토)

오브젝트 - 3. 역할, 책임, 협력  
[p.73 ~ p.77]

-   객체지향 패러다임의 관점에서 핵심은 **역할(role)**, **책임(responsibility)**, **협력(collaboration)**이다. 객체지향의 본질은 협력하는 객체들의 공동체를 창조하는 것이다. 객체지향 설계의 핵심은 협력을 구성하기 위해 적절한 객체를 갖고 적절한 책임 할당하는 과정에서 드러난다.
-   객체지향 원칙을 따르는 애플리케이션의 객체들은 요청의 흐름에 따라 자신에게 분배된 로직을 실행하면서 전체 기능을 완성한다. 객체들이 애플리케이션의 기능을 구현하기 위해 수행하는 상호작용을 **협력**이라고 한다. 객체가 협력에 참여하기 위해 수행하는 로직은 **책임**이라고 부른다. 객체들이 협력 안에서 수행하는 책임들이 모여 객체가 수행하는 **역할**을 구성한다.
-   **협력**  
    협력은 객체지향 세계에서 기능을 구현할 수 있는 유일한 방법이다. 두 객체 사이의 렵력은 하나의 객체가 다른 객체에게 도움을 요청할 때 시작된다. **메시지 전송(message sending)**은 객체 사이의 협력을 위해 사용할 수 있는 유일한 커뮤니케이션 수단이다.

    > 협력이란 어떤 객체가 다른 객체에게 무엇인가를 요청하는 것이다. 한 객체는 어떤 것이 필요할 때 다른 객체에게 전적으로 위임하거나 서로 협력한다. 즉, 두 객체가 상호작용을 통해 더 큰 책임을 수행하는 것이다. 객체 사이의 협력을 설계할 떄는 객체를 서로 분리된 인스턴스가 아닌 협력하는 파트너로 인식해야 한다.

    메시지를 수신한 객체는 **메서드**를 실행해 요청에 응답한다. 이때 객체는 메시지를 처리할 방법을 **스스로 선택**한다. 외부의 객체는 오직 메시지만 전송할 수 있을 뿐이며 메시지를 어떻게 처리할지는 메시지를 수신한 객체가 직접 결정한다. 이는 객체가 자신의 일을 스스로 처리할 수 있는 자율적인 존재라는 것을 의미한다.

-   자율적인 객체란 자신의 상태를 직접 관리하고 스스로의 결정에 따라 행동하는 객체다. 객체의 자율성을 보장하기 위해서는 필요한 정보와 정보에 기반한 행동을 같은 객체 안에 모아놓아야 한다. 즉, 객체를 자율적으로 만드는 가장 기본적인 방법은 내부 구현을 **캡슐화**하는 것이다.
-   객체지향은 객체를 중심에 놓는 프로그래밍 패러다임이다. 이때 객체란 상태와 행동을 함께 캡슐화하는 실행 단위다. 애플리케이션 안에 객체가 필요한 이유는 그 객체가 어떤 협력에 참여하고 있기 때문이다. 그리고 객체가 협력에 참여할 수 있는 이유는 협력에 필요한 적절한 행동을 보유하고 있기 때문이다. 결론적으로 객체의 행동을 결정하는 것은 객체가 참여하고 있는 협력이며 협력이 바뀌면 객체가 제공해야 하는 행동 역시 바뀌어야 한다. 협력은 객체가 필요한 이유와 수행하는 행동의 동기를 제공한다.
-   객체의 행동을 결정하는 것이 협력이라면 객체의 상태를 결정하는 것은 행동이다. 객체의 상태는 그 객체가 행동을 수행하는 데 필요한 정보가 무엇인지로 결정된다. 객체는 자신의 상태를 스스로 결정하고 관리하는 자율적인 존재이기 때문에 객체가 수행하는 행동에 필요한 상태도 함께 가지고 있어야 한다.

-   상태는 객체가 행동하는 데 필요한 정보에 의해 결정되고 행동은 협력 안에서 객체가 처리할 메시지로 결졍된다. 결과적으로 객체가 참여하는 협력이 객체를 구성하는 행동과 상태를 모두 결정한다. 따라서 협력은 객체를 설계하는 데 필요한 일종의 **문맥(context)**을 제공한다.

---

### 8/14(일)

오브젝트 - 3. 역할, 책임, 협력  
[p.78 ~ p.83]

-   객체를 설계하기 위해 필요한 문맥인 협력이 갖춰졌을 때 다음으로 할 일은 협력에 필요한 행동을 수행할 수 있는 적절한 객체를 찾는 것이다. 이때 협력에 참여하기 위해 객체가 수행하는 행동을 **책임**이라고 부른다.
-   **책임**:  
    객체에 의해 정의되는 응집도 있는 행위의 집합으로, 객체가 유지해야 하는 정보와 수행할 수 있는 행동에 대해 개략적으로 서술한 문장이다. 즉, 객체의 책임은 객체가 '무엇을 알고 있는가'와 '무엇을 할 수 있는가'로 구성된다. 크레이그 라만은 이러한 분류 체계에 따라 객체의 책임을 크게 **'하는 것(doing)'**과 **'아는 것(knowing)'**의 두 가지 범주로 나누어 세분화하고 있다.
    -   하는 것
        -   객체를 생성하거나 계산을 수행하는 등의 스스로 하는 것
        -   다른 객체의 행동을 시작시키는 것
        -   다른 객체의 행동을 제어하고 조절하는 것
    -   아는 것
        -   사적인 정보에 관해 아는 것
        -   관련된 객체에 관해 아는 것
        -   자신이 유도하거나 계산할 수 있는 것에 관해 아는 것
-   일반적으로 책임과 메시지의 크기는 다르다. 책임은 객체가 수행할 수 있는 행동을 종합적이고 간략하게 서술하기 때문에 메시지보다 추상적이고 개념적으로도 더 크다. 처음에는 단순한 책임이라고 생각했던 것이 여러 개의 메시지로 분할되기도 하고 하나의 객체가 수행할 수 있다고 생각했던 책임이 나중에는 여러 객체들이 협력해야만 하는 커다란 책임으로 자라는 것이 일반적이다.
-   객체는 자신이 맡은 책임을 수행하는 데 필요한 정보를 알고 있을 책임이 있다. 또한, 객체는 자신이 할 수 없는 작업을 도와줄 객체를 알고 있어야 할 책임이 있다. 어떤 책임을 수행하기 위해서는 그 책임을 수행하는 데 필요한 정보도 함께 알아야 할 책임이 있는 것이다.
-   책임은 객체지향 설계의 핵심이다. 협력이 중요한 이유는 객체에게 할당할 책임을 결정할 수 있는 문맥을 제공하기 때문이다. 적절한 협력이 적절한 책임을 제공하고, 적절한 책임을 적절한 객체에게 할당해야만 단순하고 유연한 설계를 창조할 수 있다.
-   CRC 카드:  
    CRC라는 단어는 후보(Candidate), 책임(Responsibility), 협력자(Collaborator)의 첫 글자를 따서 만들어졌다. 하나의 CRC 카드는 협력에 참여하는 하나의 **후보**를 표현한다. 후보는 역할, 객체, 클래스 어떤 것이라도 될 수 있다. 카드의 선이 없는 면에는 후보의 목적을 기술한다. 목적은 후보가 외부에 제공해야 하는 서비스를 하나의 문장으로 표현한 것이다.  
    선이 있는 다른 면의 상단에는 후보 이름을 적는다. 좌측 하단에는 목적을 좀 더 세분화해서 무엇을 알고 무엇을 해야 하는지에 대한 **책임**을 차례대로 적는다. 카드의 우측에는 책임을 수행하면서 함께 협력할 협력자들을 나열한다. 협력자는 후보가 잣니의 책임을 완수하기 위해 정보나 기능을 요청할 대상 후보를 의미한다.  
    CRC 카드는 객체지향 설계에 적용할 수 있는 구체적이고 실재적인 재료로, 역할을 식별하고, 책임을 할당하며, 협력을 명시적으로 표현하는 구체적이면서도 실용적인 설계 기법이다.
-   자율적인 객체를 만드는 가장 기본적인 방법은 책임을 수행하는 데 필요한 정보를 가장 잘 알고 있는 전문가에게 그 책임을 할당하는 것이다. 이를 책임 할당을 위한 INFORMATION EXPERT(정보 전문가) 패턴이라고 부른다.
-   객체에게 책임을 할당하기 위해서는 먼저 협력이라는 문맥을 정의해야 한다. 협력을 설계하는 출발점은 시스템이 사용자에게 제공하는 기능을 시스템이 담당할 하나의 책임으로 바라보는 것이다. 객체지향 설계는 시스템의 책임을 완료하는 데 필요한 더 작은 책임을 찾아내고 이를 객체들에게 할당하는 반복적인 과정을 통해 모양을 갖춰간다.
-   객체가 책임을 수행하게 하는 유일한 방법은 메시지를 전송하는 것이므로 책임을 할당하는 것은 메시지의 이름을 결정하는 것과 같다. 메시지를 선택했으면 메시지를 처리할 적절한 객체를 선택해야 한다. 기본 전략은 정보 전문가에게 책임을 할당하는 것이다.
-   객체지향 설계는 협력에 필요한 메시지를 찾고 메시지에 적절한 객체를 선택하는 반복적인 과정을 통해 이뤄진다. 그리고 메시지는 메시지를 수신할 객체의 책임을 결정한다. 협력을 설계하면서 객체의 책임을 식별해 나가는 과정에서 최종적으로 얻게 되는 결과물은 시스템을 구성하는 객체들의 인터페이스와 오퍼레이션의 목록이다.

---

### 8/15(월)

오브젝트 - 3. 역할, 책임, 협력  
[p.83 ~ p.86]

-   협력을 설계하기 위해서는 책임에 초점을 맞춰야 한다. 어떤 책임을 선택하느냐가 전체적인 설계의 방향과 흐름을 결정한다. 이처럼 책임을 찾고 책임을 수행할 적절한 객체를 찾아 책임을 할당하는 방식으로 협력을 설계하는 방법을 **책임 주도 설계(RDD: Responsibility-Driven Design)**라고 부른다. 아래는 책임 주도 설계 방법의 과정이다.

    1. 시스템이 사용자에게 제공해야 하는 기능인 시스템 책임을 파악한다.
    2. 시스템 책임을 더 작은 책임으로 분할한다.
    3. 분할된 책임을 수행할 수 있는 적절한 객체 또는 역할을 찾아 책임을 할당한다.
    4. 객체가 책임을 수행하는 도중 다른 객체의 도움이 필요한 경우 이를 책임질 적절한 객체 또는 역할을 찾는다.
    5. 해당 객체 또는 역할에게 책임을 할당함으로써 두 객체가 협력하게 된다.

    구현이 아닌 책임에 집중하는 것이 중요한 이유는 유연하고 견고한 객체지향 시스템을 위해 가장 중요한 재료가 바로 책임이기 때문이다.

-   객체에게 책임을 할당하는 데 필요한 메시지를 먼저 식별하고 메시지를 처리할 객체를 나중에 선택했다는 것이 중요하다. 객체가 메시지를 선택하는 것이 아니라 메시지가 객체를 선택하게 했다. 메시지가 객체를 선택하게 해야 하는 두 가지 중요한 이유가 있다.

    1. 객체가 **최소한의 인터페이스(minimal interface)**를 가질 수 있게 된다. 필요한 메시지가 식별될 때까지 객체의 퍼블릭 인터페이스에 어떤 것도 추가하지 않기 때문에 객체는 애플리케이션에 크지도, 작지도 않은 꼭 필요한 크기의 퍼블릭 인터페이스를 가질 수 있다.
    2. 객체는 충분히 **추상적인 인터페이스(abstract interface)**를 가질 수 있게 된다. 객체의 인터페이스는 무엇(what)을 하는지는 표현해야 하지만 어떻게(how) 수행하는지를 노출해서는 안된다. 메시지는 외부의 객체가 요청하는 무언가를 의미하기 때문에 메시지를 먼저 식별하면 무엇을 수행할지에 초점을 맞추는 인터페이스를 얻을 수 있다.

-   객체가 존재하는 이유는 협력에 참여하기 위해서다. 객체를 객체답게 만드는 것은 객체의 상태가 아니라 객체가 다른 객체에게 제공하는 행동이다.
-   객체지향 패러다임에 갓 입문한 사람들이 가장 쉽게 빠지는 실수는 객체의 행동이 아니라 상태에 초점을 맞주는 것이다. 이런 방식은 객체의 내부 구현이 퍼블릭 인터페이스에 노출되도록 만들기 때문에 **캡슐화**를 저하한다. 이와 같이 객체의 내부 구현에 초점을 맞춘 설계 방법을 **데이터-주도 설계(Data-Driven Design)**라고 부른다.
-   캡슐화를 위반하지 않도록 구현에 대한 결정을 뒤로 미루면서 객체의 행위를 고려하기 위해서는 항상 협력이라는 문맥 안에서 객체를 생각해야 한다. 협력 관계 속에서 다른 객체에게 무엇을 제공해야 하고 다른 객체로부터 무엇을 얻어야 하는지를 고민해야만 휼륭한 책임을 수확할 수 있다. 개별 객체의 상태와 행동이 아닌 시스템의 기능을 구현하기 위한 협력에 초점을 맞춰야만 응집도가 높고 결합도가 낮은 객체들을 창조할 수 있다.
-   중요한 것은 객체의 상태가 아니라 행동이다. 협력이 객체의 행동을 결정하고 행동이 상태를 결정한다. 그리고 그 행동이 객체의 책임이 된다.

---

### 8/16(화)

오브젝트 - 3. 역할, 책임, 협력  
[p.86 ~ p.92]

-   객체는 협력이라는 주어진 문맥 안에서 특정한 목적을 갖게 된다. 객체가 어떤 특정한 협력 안에서 수행하는 책임의 집합을 **역할**이라고 부른다. 협력을 모델링할 때는 특정한 객체가 아니라 역할에게 책임을 할당한다고 생각하는 게 좋다.
-   역할이 중요한 이유는 역할을 통해 유연하고 재사용 가능한 협력을 얻을 수 있기 때문이다. 역할은 다른 것으로 교체할 수 있는 책임의 집합을 의미한다. 동일한 책임을 수행하는 역할을 기반으로 여러 개의 협력을 하나로 통합할 수 있다. 따라서 역할을 이용하면 불필요한 중복 코드를 제거할 수 있다. 또한, 특정 역할을 수행할 수 있는 객체라면 어떤 객체라도 협력에 참여할 수 있다.
-   역할을 구현하는 가장 일반적인 방법은 **추상 클래스**와 **인터페이스**를 사용하는 것이다. 협력의 관점에서 추상 클래스와 인터페이스는 구체 클래스들이 따라야 하는 책임의 집합을 서술한 것이다. 추상 클래스는 책임의 일부를 구현해 놓은 것이고 인터페이스는 구체 클래스들이 따라야 하는 책임의 집합을 서술한 것이다. 추상 클래스와 인터페이스는 동일한 책임을 수행하는 다양한 종류의 클래스들을 협력에 참여시킬 수 있는 확장 포인트를 제공한다. 이들은 동일한 책임을 수행하는 객체들을 협력 안에 수용할 수 있는 역할이다. 이때 중요한 것은 역할이 다양한 종류의 객체를 수용할 수 있는 일종의 슬롯이자 구체적인 객체들의 타입을 캡슐화하는 추상화하는 것이다.
-   협력에 참여하는 후보가 여러 종류의 객체에 의해 수행될 필요가 있다면 그 후보는 역할이 되지만 단지 한 종류의 객체만이 협력에 참여할 필요가 있다면 후보는 객체가 된다. 협력에 적합한 책임을 수행하는 대상이 한 종류라면 간단하게 객체로 간주한다. 만약 여러 종류의 객체들이 참여할 수 있다면 역할이라고 부르면 된다.
-   설계 초반에는 적절한 책임과 협력의 큰 그림을 탐색하는 것이 가장 중요한 목표여야 하고 역할과 객체를 명확하게 구분하는 것은 그렇게 중요하는 않다는 것이다. 따라서 애매하다면 단순하게 객체로 시작하고 반복적으로 책임과 협력을 정제해가면서 필요한 순간에 객체로부터 역할을 분리해내는 것이 가장 좋은 방법이다.
-   다양한 객체들이 협력에 참여한다는 것이 확실하다면 역할로 시작하는 것이 좋다. 그러나 정확한 결정을 내기리 어려운 상황이라면 구체적인 객체로 시작해야 한다.
-   트리그비 린스카우는 역할을 설계의 중심 개념으로 보는 **역할 모델링(Role Modeling)** 개념을 제안했다. 상호작용하는 객체들의 협력 패턴을 역할들 사이의 협력 패턴으로 추상화함으로써 유연하고 재사용 가능한 시스템을 얻을 수 있는 방법이다.
-   역할의 가장 큰 장점은 설계의 구성 요소를 추상화할 수 있다는 것이다.

---

### 8/17(수)

오브젝트 - 3. 역할, 책임, 협력  
[p.92 ~ p.96]

-   역할은 공통의 책임을 바탕으로 객체의 종류를 숨길 수 있기 때문에 객체의 추상화로 볼 수 있다.
-   추상화는 두 가지 장점을 가지고 있다.
    1. 세부 사항에 억눌리지 않고도 상위 수준의 정책을 쉽고 간단하게 표현할 수 있다.  
       추상화를 적절하게 사용하면 불필요한 세부 사항을 생략하고 핵심적인 개념을 강조할 수 있다. 상위 수준에서 협력을 설정하면 구체적인 객체들이 가지는 복잡성을 제거하고 단순화해서 표현할 수 있다. 역할이 중요한 이유는 동일한 협력을 수행하는 객체들을 추상화할 수 있기 때문이다.
    2. 설계를 유연하게 만들 수 있다는 것이다.  
       역할은 다양한 종류의 객체를 끼워 넣을 수 있는 일종의 슬롯일고 생각하면 쉽게 이해할 수 있다. 협력 안에서 동일한 책임을 수행하는 객체들은 동일한 역할을 수행하기 때문에 서로 대체 가능하다. 따라서 역할은 다양한 환경에서 다양한 객체들을 수용할 수 있게 해주므로 협력을 유연하게 만든다.
-   객체는 협력이라는 실행 문맥 안에서 특정한 역할을 수행하며 협력이 끝나면 협력에서의 역할을 잊고 원래의 객체로 돌아온다. 협력이라는 문맥 안에서 역할은 특정한 협력에 참여해서 책임을 수행하는 객체의 일부다. 역할은 모양이나 구조에 의해 정의될 수 없으며 로직 시스템의 문맥 안에서 무엇을 하는지에 의해서만 정의될 수 있다.
-   하나의 배역을 여러 배우가 연기할 수 있는 것처럼 동일한 역할을 수행하는 하나 이상의 객체들이 존재할 수 있다. 이것은 협력 관점에서 동일한 역할을 수행하는 객체들은 서로 대체 가능하다는 것을 의미한다.

---

### 8/18(목)

오브젝트 - 4. 설계 품질과 트레이드오프  
[p.97 ~ p.108]

-   객체지향 설계의 핵심은 역할, 책임, 협력이다. 협력은 애플리케이션의 기능을 구현하기 위해 메시지를 주고받는 객체들 사이의 상호작용이다. 책임은 객체가 다른 객체와 협력하기 위해 수행하는 행동이고, 역할은 대체 가능한 책임의 집합이다.
-   객체지향 설계란 올바른 객체에게 올바른 책임을 할당하면서 낮은 결합도와 높은 응집도를 가진 구조를 창조하는 활동이다. 이 정의에는 객체지향 설계에 대한 두 가지 관점이 섞여 있다. 하나는 객체지향 설계의 핵심이 책임이라는 것이고, 나머지 하나는 책임을 할당하는 작업이 응집도와 결합도 같은 설계 품질과 깊이 연관돼 있다는 것이다.
-   결합도와 응집도를 합리적인 수준으로 유지할 수 있는 중요한 원칙이 있다. 객체의 상태가 아니라 객체의 행동에 초점을 맞추는 것이다. 객체를 단순한 데이터의 집합으로 바라보는 시각은 객체의 내부 구현을 퍼블릭 인터페이스에 노출시키는 결과를 낳기 때문에 결과적으로 설계가 변경에 취약해진다. 이런 문제를 해결하기 위해서는 방법은 객체의 책임에 초점을 맞추는 것이다. 책임은 객체의 상태에서 나아가 객체와 객체 사이의 상호작용으로 설계 중심을 이동시키고, 결합도가 낮고 응집도가 높으며 구현을 효과적으로 캡슐화하는 객체들을 창조할 수 있는 기반을 제공한다.
-   객체지향 설계에서는 두 가지 방법을 이용해 시스템을 객체로 분할할 수 있다. 첫 번쨰 방법은 상태를 분할의 중심축으로 삼는 방법이고, 두 번째 방법은 책임을 분할의 중심축으로 삼는 방법이다.
    -   데이터 중심의 관점에서 객체는 자신이 포함하고 있는 데이터를 조작하는 데 필요한 오퍼레이션을 정의한다. 또한, 객체의 상태에 초점을 맞추며 객체를 독립된 데이터 덩어리로 바라본다.
    -   책임 중심의 관점에서 객체는 다른 객체가 요청할 수 있는 오퍼레이션을 위해 필요한 상태를 보관한다. 또한, 객체의 행동에 초점을 맞추며 객체를 협력하는 공동체의 일원으로 바라본다.
-   객체의 상태를 구현에 속한다. 구현은 불안정하기 때문에 변하기 쉽다. 상태를 객체 분할의 중심축으로 삼으면 구현에 관한 세부사항이 객체의 인터페이스에 스며들게 되어 캡슐화의 원칙이 무너진다. 반면 객체의 책임은 인터페이스에 속한다. 객체는 책임을 드러내는 안정적인 인터페이스 뒤로 책임을 수행하는 데 필요한 상태를 캡슐화함으로써 구현 변경에 대한 파장이 외부로 퍼져나가는 것을 방지한다. 따라서 책임에 초점을 맞추면 상대적으로 변경에 안정적인 설계를 얻을 수 있다.
-   데이터 중심의 설계는 객체가 내부에 저장해야 하는 '데이터가 무엇인가'를 묻는 것으로 시작한다. 객체의 종류를 저장하는 인스턴스 변수와 인스턴스의 종류에 따라 베타적으로 사용될 인스턴스 변수를 하나의 클래스 안에 함께 포함시키는 방식은 데이터 중심의 설계안에서 흔히 볼 수 있는 패턴이다.
-   데이터의 준비가 끝나면 내부 데이터가 객체의 엷은 막을 빠져나가 외부의 다른 객체들을 오염시키는 것을 막아야 한다. 이를 달성할 수 있는 가장 간단한 방법은 내부의 데이터를 반환하는 **접근자(accessor)**와 데이터를 변경하는 **수정자(mutator)**를 추가하는 것이다.

---

### 8/19(금)

오브젝트 - 4. 설계 품질과 트레이드오프  
[p.108 ~ p.112]

-   **캡슐화**:
    -   상태와 행동을 하나의 객체로 모으는 이유는 객체의 내부 구현을 외부로부터 감추기 위해서다. 객체지향이 강력한 이유는 변경이 한 곳에서 일어나더라도 전체 시스템에 영향을 끼치지 않도록 조절할 수 있기 때문이다. 객체를 사용하면 변경 가능성이 높은 부분은 내부에 숨기고 외부에는 상대적으로 안정적인 부분만 공개함으로써 변경의 여파를 통제할 수 있다.
    -   변경될 가능성이 폰은 부분을 **구현**이라고 부르고 상대적으로 안정적인 부분을 **인터페이스**라고 부른다. 객체를 설계하기 위한 가장 기본적인 아이디어는 변경의 정도에 따라 구현과 인터페이스를 분리하고 외부에서는 인터페이스에만 의존하도록 관계를 조절하는 것이다.
    -   **캡슐화는 외부에서 알 필요가 없는 부분을 감춤으로써 대상을 단순화하는 추상화의 한 종류**이다. 객체지향 설계의 가장 중요한 원리는 **불안정한 구현 세부사항을 안정적인 인터페이스 뒤로 캡슐화하는 것**이다.
    -   설계가 필요한 이유는 요구사항이 변경되기 때문이고, 캡슐화가 중요한 이유는 불안정한 부분과 안정적인 부분을 분리해서 변경의 영향을 통제할 수 있기 때문이다. 객체 내부에서 변경될 수 있는 어떤 것이라도 캡슐화해야 한다.
-   **응집도와 결합도**:
    -   **응집도**는 모듈에 포함된 내부 요소들이 연관돼 있는 정도를 나타낸다. 모듈 내의 요소들이 하나의 목적을 위해 긴미랗게 협력한다면 그 모듈은 높은 응집도를 가진다. 객체지향의 관점에서 응집도는 객체 또는 클래스에 얼마나 관련 높은 책임들을 할당했는지를 나타낸다.
    -   **결합도**는 의존성의 정도를 나타내며 다른 모듈에 대해 얼마나 많은 지식을 갖고 있는지를 나타내는 척도다. 어떤 모듈이 다른 모듈에 대해 너무 자세한 부분까지 알고 있다면 두 모듈은 높은 결합도를 가진다. 객체지향의 관점에서 결합도는 객체 또는 클래스가 협력에 필요한 적절한 수준의 관계만을 유지하고 있는지를 나타낸다.
    -   일반적으로 좋은 설계란 높은 응집도와 낮은 결합도를 가진 모듈로 구성된 설계를 의미한다. 애플리케이션을 구성하는 각 요소의 응집도가 높고 서로 느슨하게 결합돼 있다면 그 애플리케이션은 좋은 설계를 가졌다고 볼 수 있다.
    -   높은 응집도와 낮은 결합도를 설계를 추구해야 하는 이유는 그것이 설계를 변경하기 쉽게 만들기 때문이다. 변경의 관점에서 응집도란 **변경이 발생할 때 모듈 내부에서 발생하는 변경의 정도**로 측정할 수 있다. 하나의 변경을 수용할 때 모듈 전체가 함꼐 변경된다면 응집도가 높은 것이고, 모듈의 일부만 변경된다면 응집도가 낮은 것이다. 또한, 하나의 변경에 대해 하나의 모듈만 변경된다면 응집도가 높은 것이고, 다수의 모듈이 함께 변경돼야 한다면 응집도가 낮은 것이다. 응집도가 높을 수록 변경의 대상과 범위가 명확해지기 때문에 코드를 변경하기 쉬워진다.
    -   변경의 관점에서 결합도는 **한 모듈이 변경되기 위해서 다른 모듈의 변경을 요구하는 정도**로 측정할 수 있다. 즉, 하나의 모듈을 수정할 때 얼마나 많은 모듈을 함께 수정해야 하는지를 나타낸다는 것이다. 따라서 결합도가 높으면 높을수록 함께 변경해야 하는 모듈의 수가 늘어나기 때문에 변경하기가 어려워진다. 변경 시 영향을 받는 모듈의 수 외에도 변경의 원인을 이용해 결합도의 개념을 설명할 수도 있다. 내부 구현을 변경했을 때 이것이 다른 모듈에 영향을 미치는 경우에는 두 모듈 사이의 결합도가 높다고 표현한다. 따라서 클래스의 구현이 아닌 인터페이스에 의존하도록 코드를 작성해야 낮은 결합도를 얻을 수 있다.
    -   결합도가 높아도 상관 없는 경우도 있다. 일반적으로 변경될 확률이 매우 적은 안정적인 모듈에 의존하는 것은 아무런 문제가 되지 않는다. 그러나 직접 작성한 코드의 경우 항상 불안정하며 언제라도 변경될 가능성이 높다. 그렇기 때문에 직접 작성한 코드의 경우에는 낮은 결합도를 유지하려고 노력해야 한다.
-   캡슐화의 정도가 응집도와 결합도에 영향을 미친다. 캡슐화를 지키면 모듈 안의 응집도는 높아지고 모듈 사이의 결합도는 낮아진다. 캡슐화를 위반하면 모듈 안의 응집도는 낮아지고 모듈 사이의 결합도는 높아진다. 따라서 응집도와 결합도를 고려하기 전에 먼저 캡슐화를 향상시키기 위해 노력해야 한다.

---

### 8/20(토)

오브젝트 - 4. 설계 품질과 트레이드오프  
[p.112 ~ p.117]

-   책임 중심의 설계는 객체의 내부 구현을 안정적인 인터페이스 뒤로 캡슐화하고, 데이터 중심의 설계는 캡슐화를 위반하고 객체의 내부 구현을 인터페이스의 일부로 만든다.
-   데이터 중심의 설계는 아래 3가지의 문제점을 가진다.
    1. 캡슐화 위반  
       접근자(getter)와 수정자(setter) 메서드는 객체 내부의 상태에 대한 어떤 정보도 캡슐화하지 못한다. 접근자와 수정자는 특정 이름의 인스턴스 변수가 존재한다는 사실을 퍼블릭 인터페이스에 노골적으로 드러낸다.  
       설계할 때 협력에 관해 고민하지 않으면 캡슐화를 위반하는 과도한 접근자와 수정자를 가지게 되는 경향이 있다. 객체가 사용될 문맥을 추측할 수밖에 없는 경우 개발자는 어떤 상황에서도 해당 객체가 사용될 수 있게 최대한 많은 접근자 메서드를 추가하게 되는 것이다. 이처럼 접근자와 수정자에 과도하게 의존하는 설계 방식을 **추측에 의한 설계 전략(design-by-guessing strategy)**[Holub04]이라고 부른다.
    2. 높은 결합도  
       객체 내부의 구현이 객체의 인터페이스에 드러난다는 것은 클라이언트가 구현에 강하게 결합된다는 것을 의미한다. 그리고 이런 경우에는 내부 구현을 변경했음에도 이 인터페이스에 의존하는 모든 클라이언트들도 함께 변경해야 한다.  
       결합도 측면에서 데이터 중심 설계는 여러 데이터 객체들을 사용하는 제어 로직이 특정 객체 안에 집중되기 때문에 하나의 제어 객체가 다수의 데이터 객체에 강하게 결합된다는 것이다. 이 결합도로 인해 어떤 데이터 객체를 변경하더라도 제어 객체를 함께 변경할 수밖에 없다. 데이터 중심의 설계는 전체 시스템을 하나의 거대한 의존성 덩어리로 만들어 버리기 때문에 어떤 변경이라도 일단 발생하고 나면 시스템 전체가 요동칠 수밖에 없다.
    3. 낮은 응집도  
       서로 다른 이유로 변경되는 코드가 하나의 모듈 안에 공존할 때 모듈의 응집도가 낮다고 말한다. 따라서 각 모듈의 응집도를 살펴보기 위해서는 코드를 수정하는 이유가 무엇인지 살펴봐야 한다.  
       낮은 응집도는 아래 두 가지 측면에서 설계에 문제를 일으킨다.
        - 변경의 이유가 서로 다른 코드들을 하나의 모듈 안에 뭉쳐놓았기 때문에 아무 상관이 없는 코드들이 영향을 받게 된다. 어떤 코드를 수정한 후에 아무런 상관도 없던 코드에 문제가 발생하는 것은 모듈의 응집도가 낮을 때 발생하는 대표적인 증상이다.
        - 하나의 요구사항 변경을 반영하기 위해 동시에 여러 모듈을 수정해야 한다. 응집도가 낮을 경우 다른 모듈에 위치해야 할 책임의 일부가 엉뚱한 곳에 위치하게 되기 떄문이다.
-   **단일 책임 원칙(SRP: Single Responsibility Principle)**:  
    로버트 마틴은 모듈의 응집도가 변경과 연관이 있다는 사실을 강조하기 위해 단일 책임 원칙이라는 설계 원칙을 제시했다. 단일 책임 원칙이란 클래스는 단 한 가지의 변경 이유만 가져야 한다는 것이다. 한 가지 주의할 점은 단일 책임 원칙이라는 맥략에서 '책임'이라는 말이 '변경의 이유'라는 의미로 사용된다는 점이다. 단일 책임 원칙에서의 책임은 역할, 책임, 협력에서 이야기하는 책임과는 다르며 변경과 관련된 더 큰 개념을 가리킨다.

---

### 8/21(일)

오브젝트 - 4. 설계 품질과 트레이드오프  
[p.117 ~ p.125]

-   캡슐화는 설계의 제1원리다. 객체는 자신이 어떤 데이터를 가지고 있는지를 내부에 캡슐화하고 외부에 공개해서는 안된다. 깨체는 스스로의 상태를 책임져야 하며 외부에서는 인터페이스에 정의된 메서드를 통해서만 상태에 접근할 수 있어야 한다. 이때 메서드는 단순히 속성 하나의 값을 반환하거나 변경하는 접근자나 수정자가 아니라 객체가 책임져야 하는 무언가를 수행하는 의미 있는 메서드를 말한다. 속성의 가시성을 private으로 설정했다고 해도 접근자와 수정자를 통해 속성을 외부로 젝오하고 있다면 캡슐화를 위반한 것이다.
-   코드 중복은 악의 근원으로 코드 중복을 초래할 수 있는 모든 원인을 제거하는 것이 중요하다.
-   상태와 행동을 객체라는 하나의 단위로 묶는 이유는 객체 스스로 자신의 상태를 처리할 수 있게 하기 위해서다. 객체는 단순한 데이터 제공자가 아니다. 객체 내부에 저장되는 데이터보다 객체가 협력에 참여하면서 수행할 책임을 정의하는 오퍼레이션이 더 중요하다. 따라서 객체를 설계할 때는 아래 두 개의 질문을 통해 객체의 내부 상태를 저장하는 방식과 저장된 상태에 대해 호출할 수 있는 오퍼레이션의 집합을 얻을 수 있다.
    1. 이 객체가 어떤 데이터를 포함해야 하는가?
    2. 이 객체가 데이터에 대해 수행해야 하는 오퍼레이션은 무엇인가?

---

### 8/22(월)

오브젝트 - 4. 설계 품질과 트레이드오프  
[p.125 ~ p.132]

-   내부 구현의 변경이 외부로 퍼져나가는 **파급 효과(ripple effect)**는 캡슐화가 부족하다는 증거다.
-   캡슐화의 진정한 의미:  
    캡슐화는 단순히 객체 내부의 데이터를 외부로부터 감추는 것 이상의 의미를 가진다. 캡슐화는 변경될 수 있는 어떤 것이라도 감추는 것을 의미한다. 내부 속성을 외부로 감추는 것은 '데이터 캡슐화'라고 불리는 캡슐화의 한 종류이다.  
    캡슐화는 변경될 수 있는 어떤 것이라도 감추는 것을 의미하기 때문에 설계에서 변하는 것이 무엇인지 고려하고 변하는 개념을 캡슐화해야 한다[GOF94].  
    캡슐화란 변하는 어떤 것이든 감추는 것이다[Bain08]. 그것이 무엇이든 구현과 관련된 것이라면 말이다.
-   하나의 변경을 수용하기 위해 코드의 여러 곳을 동시에 변경해야 한다는 것은 응집도가 낮기 때문이다. 응집도가 낮은 이유는 캡슐화를 위반했기 때문이다.
-   데이터 중심의 설계가 변경에 취약한 이유는 아래 두 가지이다.
    1. 데이터 중심의 설계는 본질적으로 너무 이른 시기에 데이터에 관해 결정하도록 강요한다.
    2. 데이터 중심의 설계에서는 협력이라는 문맥을 고려하지 않고 객체를 고립시킨 채 오퍼레이션을 결정한다.
-   데이터 중심의 설계에 익숙한 개발자들은 일반적으로 데이터와 기능을 분리하는 절차적 프로그래밍 방식을 따른다. 이것은 상태와 행동을 하나의 단위로 캡슐화하는 객체지향 패러다임에 반하는 것이다. 접근자와 수정자는 public 속성과 크게 다르지 않기 때문에 객체의 캡슐화가 되지 않는다.
-   비록 데이터를 처리하는 작업과 데이터를 같은 객체 안에 두더라도 데이터에 초점에 맞춰져 있다면 만족스러운 캡슐화를 얻기 어렵다. 데이터를 먼저 결정하고 데이터를 처리하는 데 필요한 오퍼에시녀을 나중에 결정하는 방식은 데이터에 관한 지식이 객체의 인터페이스에 고스란히 드러나게 된다.
-   객체지향 애플리케이션을 구현한다는 것은 협력하는 객체들의 공동체를 구축한다는 것을 의미한다. 따라서 협력이라는 문맥 안에서 필요한 책임을 결정하고 이를 수행할 적절한 객체를 결정하는 것이 가장 중요하다. 올바른 객체지향 설계의 무게 중심은 항상 객체의 내부가 아니라 외부에 맞춰져 있어야 한다. 중요한 것은 객체가 다른 객체와 협력하는 방법이다.

---

### 8/23(화)

오브젝트 - 5. 책임 할당하기  
[p.133 ~ p.136]

-   책임에 초점을 맞춰서 설계할 때 직면하는 가장 큰 어려움은 어떤 객체에게 어떤 책임을 할당할지를 결정하기 쉽지 않다는 것이다. 책임 할당 과정은 일종의 트레이드오프 활동으로 동일한 문제를 해결할 수 있는 다양한 책임 할당 방법이 존재하며, 어떤 방법이 최선인지는 상황과 문맥에 따라 달라진다.
-   데이터 중심의 설계에서 책임 중심의 설계로 전환하기 위해서는 아래 두 가지 원칙을 따라야 한다.
    1. 데이터보다 행동을 먼저 결정하라:  
       객체에게 중요한 것은 데이터가 아니라 외부에 제공하는 행동이다. 클라이언트의 관점에서 객체가 수행하는 행동이란 곧 객체의 책임을 의미한다. 객체는 협력에 참여하기 위해 존재하며 협력 안에서 수행하는 책임이 객체의 존재가치를 증명한다.  
       객체의 데이터에서 행동으로 무게 중심을 바꾸기 위한 방법은 객체를 설계하기 위한 질문의 순서를 바꾸는 것이다. 데이터 중심의 설계에서는 "이 객체가 포함해야 하는 데이터가 무엇인가"를 결정한 후에 "데이터를 처리하는 데 필요한 오퍼레이션은 무엇인가"를 결정한다. 반면 책임 중심의 설계에서는 "이 객체가 수행하는 책임은 무엇인가"를 결정한 후에 "이 책임을 수행하는 데 필요한 데이터는 무엇인가"를 결정한다. 즉, 책임 중심의 설게에서는 객체의 행동, 책임을 먼저 결정한 후에 객체의 상태를 결정한다는 것이다.
    2. 협력이라는 문맥 안에서 책임을 결정하라:  
       객체에게 할당된 책임의 품질은 협력에 적합한 정도로 결정된다. 책임은 객체의 입장이 아니라 객체가 참여하는 협력에 적합해야 한다.  
       협력을 시작하는 주체는 메시지 전송자이기 떄문에 협력에 적합한 책임이란 메시지 수신자가 아니라 메시지 전송자에게 적합한 책임을 의미한다. 즉, 메시지를 전송하는 클라이언트의 의도에 적합한 책임을 할당해야 한다는 것이다.  
       협력에 적합한 책임을 수확하기 위해서는 객체를 결정한 후에 메시지를 선택하는 것이 아니라 메시지를 결정한 후에 객체를 선택해야 한다. 메시지가 존재하기 때문에 그 메시지를 처리할 객체가 필요한 것이다. 객체가 메시지를 선택하는 것이 아니라 메시지가 객체를 선택하게 해야 한다.
-   클래스 기반 설계에서 메시지 기반 설계로의 전환하게 되면 훨씬 유연한 애플리케이션을 만들 수 있다. "이 클래스가 필요하다는 점은 알겠는데 이클래스는 무엇을 해야 하지?"라는 질문을 하지 않고 "메시지를 전송해야 하는데 누구에게 전송해야 하지?"라고 질문하는 것이 메시지 기반 설게로 향하는 첫걸음이다. 객체를 가지고 있기 떄문에 메시지를 보내는 것이 아니라 메시지를 전송하기 떄문에 객체를 갖게 된 것이다.
-   클라이언트는 어떤 객체가 메시지를 수신할지 알지 못한다. 클라이언트는 단지 임의의 객체가 메시지를 수신할 것이라는 사실을 믿고 자신의 의도를 표현할 메시지를 전송할 뿐이다. 이때 메시지를 수신하기로 결정된 객체는 메시지를 처리할 '책임'을 할당받게 된다.
-   메시지를 먼저 결정하기 떄문에 메시지 송신자는 메시지 수신자에 대한 어떠한 가정도 할 수 없다. 메시지 전송자의 관점에서 메시지 수신자가 깔끔하게 캡슐화되는 것이다. 이처럼 협력이라는 문맥 안에서 메시지에 집중하는 책임 중심의 설계는 캡슐화의 원리를 지키기 쉬워진다.
-   아래는 책임 주도 설계의 흐름이다.
    1. 시스템이 사용자에게 제공해야 하는 기능인 시스템 책임을 파악한다.
    2. 시스템 책임을 더 작은 책임으로 분할한다.
    3. 분할된 책임을 수행할 수 있는 적절한 객체 또는 역할을 찾아 책임에 할당한다.
    4. 객체가 책임을 수행하는 도중 다른 객체의 도움이 필요한 경우 이를 책임질 적절한 객체 또는 역할을 찾는다.
    5. 해당 객체 또는 역할에게 책임을 할당함으로써 두 객체가 협력하게 된다.

---

### 8/24(수)

오브젝트 - 5. 책임 할당하기  
[p.137 ~ p.142]

-   **GRASP 패턴**:  
    GRASP(General Responsibility Assignment Software Pattern)는 일반적인 책임 할당을 위한 소프트웨어 패턴의 약자로 객체에게 책임을 할당할 때 지침으로 삼을 수 있는 원칙들의 집합을 패턴 형식으로 정리한 것이다.
-   설계를 시작하기 전에 도메인에 대한 개략적인 모습을 그려 보는 것이 유용하다. 도메인 안에는 무수히 많은 개념들이 존재하며 이 도메인 개념들을 책임 할당의 대상으로 사용하면 코드에 도메인의 모습을 투영하기 수월해진다. 따라서 어떤 책임을 할당해야 할 때 가장 먼저 고민해야 하는 유력한 후보는 '도메인'이다.
-   올바른 도메인 모델이란 존재하지 않는다. 올바른 구현을 이끌어낼 수 있다면 도메인 모델에 정답은 없다. 필요한 것은 도메인을 그대로 투영한 모델이 아니라 구현에 도움이 되는 모델이다.
-   책임 주도 설계 방식의 첫 단계는 애플리케이션이 제공해야 하는 기능을 애플리케이션의 책임으로 생각하는 것이다. 이 책임을 애플리케이션에 대해 전송된 메시지로 간주하고 이 메시지를 책임질 첫 번째 객체를 선택하는 것으로 설계를 시작한다. 이때 메시지는 메시지를 수신할 객체가 아니라 메시지를 전송할 객체의 의도를 반영해서 결정해야 한다. 메시지를 결정했으면 메시지에 적합한 객체를 선택해야 한다.
-   객체에게 책임을 할당하는 첫 번쨰 원칙은 책임을 수행할 정보를 알고 있는 객체에게 책임을 할당하는 것이다. GRASP에서는 이를 **INFORMATION EXPERT(정보 전문가) 패턴**이라고 부른다. INFORMATION EXPERT 패턴은 객체가 자율적인 존재여야 한다는 사실을 다시 한번 상기시킨다. 정보를 알고 있는 객체만이 책임을 어떻게 수행할지 스스로 결정할 수 있기 떄문이다. INFORMATION EXPERT 패턴을 따르면 정보와 행동을 최대한 가까운 곳에 위치시키기 때문에 캡슐화를 유지할 수 있다. 따라서 높은 응집도가 가능하며 결합도가 낮아져서 간결하고 유지보수하기 쉬운 시스템을 구축할 수 있다.
-   INFORMATION EXPORT 패턴은 객체가 자신이 소유하고 있는 정보와 관련된 작업을 수행한다는 일반적인 직관을 표현한 것이다. 이때 정보는 데이터와 다르다는 점의 주의해야 한다. 책임을 수행하는 객체가 정보를 알고 있다고 해서 그 정보를 저장하고 있을 필요는 없다. 객체는 해당 정보를 제공할 수 있는 다른 객체를 알고 있거나 필요한 정보를 계산해서 제공할 수도 있다. 어떤 방식이건 정보 전문가가 데이터를 반드시 저장하고 있을 필요가 없다는 점이 중요하다.
-   메시지에 적합한 객체를 찾았다면 메시지를 수신했을 때 메시지를 처리하기 위한 절차와 구현을 고민하면 된다. 메시지를 처리하는 과정에서 스스로 처리할 수 없는 작업이 있다면 외부에 도움을 요청해야 한다. 이 요청이 외부로 전송해야 하는 새로운 메시지가 되고, 최종적으로 이 메시지가 새로운 객체의 책임으로 할당된다. 이 같은 연쇄적인 메시지 전송과 수신을 통해 협력 공동체가 구성된다.

---

### 8/25(목)

오브젝트 - 5. 책임 할당하기  
[p.142 ~ p.145]

-   설계는 트레이드오프 활동으로 동일한 기능을 구현할 수 있는 무수히 많은 설계가 존재한다. 따라서 설계를 진행하다 보면 몇 가지 설계 중에서 한 가지를 선택해야 하는 경우가 빈번하게 발생한다.
-   높은 응집도와 낮은 결합도는 객체에 책임을 할당할 때 항상 고려해야 하는 기본 원리다. 책임을 할당할 수 있는 다양한 대안들이 존재한다면 응집도와 결합도의 측면에서 더 나은 대안을 선택하는 것이 좋다. GRASP에서는 이를 **LOW COUPLING(낮은 결합도) 패턴**과 **HIGHT COHESION(높은 응집도)** 이라고 부른다.
-   LOW COUPLING 패턴:  
    의존성을 낮추고 변화의 영향을 줄이며 재사용성을 증가시킬 수 있는 방법은 설게의 전체적인 결합도를 낮게 유지되도록 책임을 할당하는 것이다. 낮은 결합도는 모든 설계 결정에서 염두에 둬야 하는 원리다. 현재의 책임 할당을 검토하거나 여러 설계 대안들이 있을 때 낮은 결합도를 유지할 수 있는 설계를 선택해야 한다.
-   HIGH COHESION 패턴:  
    복잡성을 관리할 수 있는 수준으로 관리하기 위한 방법은 높은 응집도를 유지할 수 있게 책임을 할당하는 것이다. 낮은 결합도처럼 높은 응집도 역시 모든 설계 결정에서 염두에 둬야할 원리다. 현재의 책임 할당을 검토하고 있거나 여러 설계 대안 중 하나를 선택해야 한다면 높은 응집도를 유지할 수 있는 설계를 선택해야 한다.

-   협력의 죄종 결과물은 시스템의 인스턴스를 생성하는 것이다. 이것은 협력에 참여하는 어떤 객체에게는 시스템 인스턴스를 생성할 책임을 할당해야 한다는 것을 의미한다. GRASP의 **CREATOR(창조자) 패턴**은 이 같은 경우에 사용할 수 있는 책임 할당 패턴으로서 책체를 생성할 책임을 어떤 객체에게 할당할지에 대한 지침을 제공한다. 객체 A를 생성해야 할 때 아래 조건을 최대한 많이 만족하는 B 객체에게 객체 생성 책임을 할당하면 된다.

    -   B가 A 객체를 포함하거나 참조한다.
    -   B가 A 객체를 기록한다.
    -   B가 A 객체를 긴밀하게 사용한다.
    -   B가 A 객체를 초기화하는 데 필요한 데이터를 가지고 있어야 한다.(이 경우 B는 A에 대한 정보 전문가다)

    CREATOR 패턴의 의도는 어떤 방식으로든 생성되는 객체와 연결되거나 관련될 필요가 있는 객체에 해당 객체를 생성할 책임을 맡기는 것이다. 생성될 객체에 대해 잘 알고 있어야 하거나 그 객체를 사용해야 하는 객체는 어떤 방식으로든 생성될 객체와 연결되기 때문이다. CREATOR 패턴은 이미 존재하는 객체 사이의 관계를 이용하기 때문에 설계가 낮은 결합도를 유지할 수 있게 한다.

---

### 8/26(금)

오브젝트 - 5. 책임 할당하기  
[p.146 ~ p.153]

-   메시지가 객체를 선택하도록 책임 주도 설계의 방식을 따르면 캡슐화와 낮은 결합도라는 목표를 비교적 손쉽게 달성할 수 있다.
-   변경에 취약한 클래스란 코드를 수정해야 하는 이유를 하나 이상 가지는 클래스다. 변경에 취약한 클래스는 응집도가 낮고, 응집도가 낮다는 것은 서로 연관성 없는 기능이나 데이터가 하나의 클래스 안에 뭉쳐져 있다는 것을 의미한다. 따라서 낮은 응집도가 초래하는 문제를 해결하기 위해서는 **변경의 이유에 따라 클래스를 분리해야 한다.**
-   일반적으로 설계를 개선하는 작업은 변경의 이유가 하나 이상인 클래스를 찾는 것으로부터 시작하는 것이 좋다. 아래는 그런 클래스들을 쉽게 찾을 수 있는 패턴이다.
    1. **인스턴스 변수가 초기화되는 시점**을 살펴보는 것이다:  
       응집도가 높은 클래스는 인스턴스를 생성할 때 모든 속성을 함께 초기화한다. 반면 응집도가 낮은 클래스는 객체의 속성 중 일부만 초기화하고 일부는 초기화되지 않은 상태로 남겨진다. 클래스의 속성이 서로 다른 시점에 초기화되거나 일부만 초기화된다는 것은 응집도가 낮다는 증거로 이를 해결하기 위해 **함께 초기화되는 속성을 기준으로 코드를 분리해야 한다.**
    2. **메서드들이 인스턴스 변수를 사용하는 방식**을 살펴보는 것이다:  
       모든 메서드가 객체의 모든 속성을 사용한다면 클래스의 응집도는 높다고 볼 수 있다. 반면 메서드들이 사용하는 속성에 따라 그룹이 나뉜다면 클래스의 응집도가 낮다고 볼 수 있다. 클래스의 응집도를 높이기 위해서는 **속성 그룹과 해당 그룹에 접근하는 메서드 그룹을 기준으로 코드를 분리해야 한다.**
-   클래스의 응집도를 판단하는 세 가지 방법

    1. 클래스가 하나 이상의 이유로 변경돼야 한다면 응집도가 낮은 것이다. 변경의 이유를 기준으로 클래스를 분리해야 한다.
    2. 클래스의 인스턴스를 초기화하는 시점에 경우에 따라 서로 다른 속성들을 초기화하고 있다면 응집도가 낮은 것이다. 초기화되는 속성의 그룹을 기준으로 클래스를 분리해야 한다.
    3. 메서드 그룹이 속성 그룹을 사용하는지 여부로 나뉜다면 응집도가 낮은 것이다. 이들 그룹을 기준으로 클래스를 분리해야 한다.

    일반적으로 응집도가 낮은 클래스는 이 세 가지 문제를 동시에 가진다. 메서드의 크기가 너무 커서 문제가 명확하게 보이지 않는 경우 긴 메서드를 응집도 높은 메서드로 잘게 분해해 나가면 숨겨져 있던 문제점이 명확하게 드러나는 경우가 많다.
