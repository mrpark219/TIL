---
layout: post
title: "2022년 8월 TIL"
date: 2022-08-01 00:05:00 +0900
categories: 202208 TIL
---

### 8/1(월)

객체지향의 사실과 오해 - 부록A. 추상화 기법  
분류와 인스턴스화

[개념과 범주]  
객체를 분류하고 범주로 묶는 것은 객체들의 특정 집합에 공통의 **개념**을 적용하는 것을 의미한다. 개념이란 속성과 행위가 유사한 객체에 공통적으로 적용되는 관념이나 아이디어다.  
세상에 존재하는 객체에 개념을 적용하는 과정을 **분류**라고 한다. 분류는 객체를 특정한 개념을 나타내는 집합의 구성 요소로 포함시킨다.  
사람들은 분류를 통해 개별 현상을 하나의 개념으로 다룬다. 분류는 객체를 타입과 연관시키는 것이다. 분류의 역은 타입에 해당하는 객체를 생성하는 과정으로 **인스턴스화** 또는 **예시**라고 한다.

객체지향에서 개념을 가리키는 표준 용어는 **타입**이다. 타입은 개념과 동의어이다. 분류란 객체들을 동일한 타입 또는 범주로 묶는 과정을 의미하므로 객체를 타입의 **인스턴스**라고 한다.

분류는 객체와 타입 간의 관계를 나타낸 것이다. 어떤 객체가 타입의 정의에 부합할 경우 그 객체는 해당 타입으로 분류되며 자동으로 타입의 인스턴스가 된다.

[타입]  
객체를 타입에 따라 분류하기 위해서는 객체가 타입에 속하는지 여부를 확인할 수 있어야 한다. 특정 객체를 어떤 타입이라고 말할 수 있으려면 타입에 대한 명확한 정의가 필요하다. 타입에 대한 명확한 정의가 내려진 후에 어떤 객체가 타입의 인스턴스인지 여부를 쉽게 판단할 수 있다.  
타입을 객체의 분류 장치로서 적용하려면 아래 세 가지 관점에서의 정의가 필요하다.

-   **심볼**: 타입을 가리키는 간략한 이름이나 명칭
-   **내연**: 타입의 오나전한 정의, 내연의 의미를 이용해 객체가 타입에 속하는지 여부를 확인할 수 있다.
-   **외연**: 타입에 속하는 모든 객체들의 집합

도메인을 분석하는 동안 이름, 의미, 객체들의 집합을 이용해 개념을 정의할 수 있다.

[외연과 집합]  
타입의 외연은 타입에 속하는 객체들의 집합으로 표현한다. 집합은 외연을 가리키는 또 다른 명칭이다. 객체들은 동시에 서로 다른 집합에 포함될 수도 있다.  
사람들은 한 시점에 동일한 객체를 다양한 방식으로 인지하기 때문에 이것은 사람들이 세상을 인지하는 일반적인 방식을 반영한다.  
한 객체가 한 시점에 하나의 타입에만 속하는 것을 **단일 분류(single classification)**라고 한다. 반면 한 객체가 한 시점에 여러 타입에 속할 경우 이를 **다중 분류(multiple classification)**라고 한다.

대부분의 객체지향 프로그래밍 언어들은 단일 분류만을 지원한다. 대부분의 언어에서 한 객체는 오직 한 클래스의 인스턴스여야만 하며 동시에 두 개의 클래스의 인스턴스일 수는 없다. 이는 다중 상속과는 다른 것으로, 다중 상속은 하나의 타입이 다수의 슈퍼타입을 가질 수 있도록 허용하지만 타입 정의를 생략할 수는 없다. 반면 다중 분류는 특정한 타입을 정의하지 않고도 하나의 객체가 서로 다른 타입의 인스턴스가 되도록 허용한다.

객체를 특정한 타입으로 분류하면 해당 객체는 타입의 집합에 포함된다. 객체가 한 집합에서 다른 집합의 원소로 자신이 속하는 타입을 변경할 수 있는 경우를 **동적 분류(dynamic classification)**라고 한다. 반면 객체가 자신의 타입을 변경할 수 없는 경우를 **정적 분류(static classification)**라고 한다.

다중 분류와 동적 분류는 서로 베타적인 개념이 아니다. 다중 분류와 동적 분류를 함께 적용하는 것이 실세계의 복잡성을 모델링하는 데 유용하다. 대부분의 언어는 일반 클래스로부터 인스턴스를 생성한 후 클래스를 변경하는 방법을 제공하지 않는다. 즉, 객체의 타입을 변경할 수 없다. 따라서 대부분의 언어는 정적 분류만 허용하며 동적 분류를 구현할 수 있는 방법을 제공하지 않는다.

다중 분류와 동적 분류는 개념적인 관점에서 도메인을 분석하는 데 유용하지만 객체지향 프로그래밍 언어로 구현하는 것이 쉽지 않다. 그렇기 때문에 다중 분류와 정적 분류 방식으로 객체들의 범주를 재조정하는 편이 분석과 구현 간의 차이를 메울 수 있는 가장 현실적인 방법이다.

[클래스]  
객체지향 프로그래밍 언어를 이용해 타입을 구현하는 가장 보편적인 방법은 클래스를 이용하는 것이다. '타입을 구현한다'라고 표현한 이유는 클래스와 타입이 동일한 개념이 아니기 때문이다. 클래스는 타입을 구현하는 용도 외에도 코드를 재사용하는 용도로 사용되기도 한다. 클래스 외에도 인스턴스를 생성할 수 없는 추상 클래스나 인터페이스를 통해 타입을 구현할 수도 있다.

객체들이 동일한 특성을 가진다면 그것들은 동일한 카테고리에 속한다. 따라서 객체들의 카테고리는 객체들이 공유하는 공통적인 특성에 의해 정의된다. 또한, 객체의 특성을 본질적인 속성과 유연적인 속성으로 분류할 수 있다. 본질(essence)이란 한 사물의 가장 핵심적이고 필수불가결한 속성이다. 본질적이지 않은 속성을 우연적(accidental) 속성이라고 한다.

클래스는 객체가 공유하는 본질적인 속성을 정의한다. 대부분의 객체지향 프로그래밍 언어에서 동일한 범주에 속하는 객체는 동일한 클래스의 인스턴스여야 한다. 대부분의 객체지향 언어는 본질적인 속성을 표현할 수 있지만 우연적인 속성은 표현할 수 없다. 따라서 동일한 범주에 속하는 객체는 모두 동일한 속성을 가져야 한다.

자바스크립트처럼 클래스가 존재하지 않는 프로토타입 기반의 언어에서 분류와 인스턴스화는 프로토타입이라는 객체의 복사를 통해 이뤄진다.
