---
layout: post
title: "2022년 9월 TIL"
date: 2022-09-01 22:56:00 +0900
categories: 202209 TIL
---

---

### 9/1(목)

오브젝트 - 6. 메시지와 인터페이스  
[p.186 ~ p.197]

-   **묻지 말고 시켜라(Tell, Don't Ask)**:  
    디미터 법칙은 휼륭한 메시지는 객체의 상태에 관해 묻지 말고 원하는 것을 시켜야 한다는 사실을 강조한다. 묻지 말고 시켜라는 이런 스타일의 메시지 작성을 장려하는 원칙을 가리키는 용어다.  
    메시지 전송자는 메시지 수신자의 상태를 기반으로 결정을 내린 후 메시지 수신자의 상태를 바꿔서는 안 된다. 객체의 외부에서 해당 객체의 상태를 기반으로 결정을 내리는 것은 객체의 캡슐화를 위반한다. 절차적인 코드는 정보를 얻은 후에 결정하지만 객체지향 코드는 객체에게 그것을 하도록 시킬 뿐이다.  
    묻지 말고 시켜라 원칙을 따르면 밀접하게 연관된 정보와 행동을 함께 가지는 객체를 만들 수 있다. 객체지향의 기본은 함께 변경될 확률이 높은 정보와 행동을 객체의 외부가 아닌 내부에 위치시키기 때문에 자연스럽게 정보와 행동을 동일한 클래스 안에 두게 된다. 따라서 묻지 말고 시켜라 원칙을 따르도록 메시지를 결정하다 보면 자연스럽게 정보 전문가에게 책임을 할당하게 되고 높은 응집도를 가진 클래스를 얻을 확률이 높아진다.  
    상태를 묻는 오퍼레이션을 행동을 요청하는 오퍼레이션으로 대체함으로써 인터페이스를 향상시키는 것이 좋다. 협력을 설계하고 객체가 수신할 메시지를 결정하는 매 순간 묻지 말고 시켜라 원칙과 디미터 법칙을 머릿속에 떠올리는 것은 퍼블릭 인터페이스의 품질을 향상시킬 수 있는 좋은 습관이다.  
    호출하는 객체는 이웃 객체가 수행하는 역할을 사용해 무엇을 원하는지를 서술해야 하고, 호출되는 객체가 어떻게 해야 하는지를 스스로 결정하게 해야 한다. 객체는 자신이 내부적으로 보유하고 있는 정보나 메시지 전송의 결과로 얻게 되는 정보만 사용해서 의사결정을 내리게 된다. 이 스타일을 일관성 있게 따르게 되면 좀 더 유연한 코드를 얻을 수 있다. 기존 객체를 동일한 역할을 하는 객체로 교체하기 쉬워지기 때문이다.
-   **의도를 드러내는 인터페이스**:  
    켄트 벡은 \<\<Smalltalk Best Practice Patterns>> 책에서 메서드를 명명하는 두 가지 방법을 설명했다. 첫 번쨰 방법은 메서드가 작업을 어떻게 수행하는지를 나타내도록 이름 짓는 것이고, 두 번째 방법은 '어떻게'가 아니라 '무엇'을 하는지를 드러내는 것이다.

    -   메서드가 작업을 어떻게 수행하는지를 나타내도록 이름 짓는 방법:  
        이 방법은 아래와 같은 이유로 좋지 않다.  
        이 경우 메서드에 대해 제대로 커뮤니케이션하지 못한다. 동일한 작업을 하는 메서드들이 존재하더라도 그 이름이 다르기 때문에 각 메서드의 내부 구현을 정확하게 이해하지 못한다면 메서드들이 동일한 작업을 수행한다는 사실을 알아채기 어렵다.  
        또한, 메서드 수준에서 캡슐화를 위반한다. 클라이언트로 하여금 객체의 종류를 알도록 강요하기 때문이다. 내부 로직이 변경되면 메서드의 이름 또한 변경해야 한다는 것이고, 메서드의 이름이 바뀌게 되면 메시지를 전송하는 클라이언트의 코드도 변경되야 하기 때문이다. 따라서 책임을 수행하는 방법을 드러내는 메서드를 사용한 설계는 변경에 취약하다.
    -   '어떻게'가 아니라 '무엇'을 하는지를 드러내도록 이름 짓는 방법:  
        어떻게 수행하는지를 드러내는 이름이란 메서드의 내부 구현을 설명하는 이름이다. 그렇기 때문에 협력을 설계하는 이른 단계에서 클래스의 내부 구현을 고민할 수밖에 없다. 반면 무엇을 하는지를 드러내는 이름을 짓기 위해서는 객체가 협력 안에서 수행해야 하는 책임에 관해 고민하게 한다. 이것은 외부의 객체가 메시지를 전송하는 목적을 먼저 생각하게 만들며, 협력하는 클라이언트의 의도에 부합하도록 메서드의 이름을 짓게 된다. 메서드가 무엇을 하는지를 드러내는 이름은 코드를 읽고 이해하기 쉽게 만들뿐만 아니라 유연한 코드를 낳는 지름길이다.

        자바 같은 정적 타이핑 언어에서 메서드의 이름이 같다고 해서 동일한 메시지를 처리할 수 있는 것은 아니다. 클라이언트가 같은 기능을 수행하는 메서드를 가진 객체들을 동일한 타입으로 간주할 수 있게 하려면 동일한 타입 계층으로 묶어야 한다.가장 간단한 방법은 인터페이스를 정의하고 인터페이스에 공통 오퍼레이션을 정의하는 것이다.  
        메서드의 이름을 무엇을 하느냐에 따라 짓게 된다면 클라이언트의 관점에서 동일한 작업을 수행하는 메서드들을 하나의 타입 계층으로 묶을 수 있는 가능성이 커진다. 그 결과 다양한 타입의 객체가 참여할 수 있는 유연한 협력을 얻을 수 있다. 이처럼 어떻게 하느냐가 아니라 무엇을 하느냐에 따라 메서드의 이름을 짓는 패턴을 **의도를 드러내는 선택자(Intention Revealing Selector)**라고 부른다. 켄트 벡은 메서드에 의도를 드러낼 수 있는 이름을 붙이기 위해 매우 다른 두 번째 구현을 상상하고, 해당 메서드에 이름을 붙인다고 했을 때 생각나는 이름을 사용하라고 권장한다. \<\<도메인 주도 설계>>에서 에릭 에반스는 컨트 벡의 **의도를 드러내는 선택자**를 인터페이스 레벨로 확장한 **의도를 드러내는 인터페이스(Intention Revealing Interface)**를 제시했다. 의도를 드러내는 인터페이스는 구현과 관련된 모든 정보를 캡슐화하고 객체의 퍼블릭 인터페이스에는 협력과 과련된 의도만을 표현해야 한다는 것이다.

-   디미터 법칙을 위반하는 설계는 **인터페이스와 구현의 분리 원칙**을 위반한다. 객체의 내부 구조는 구현에 해당된다. 그렇기 때문에 퍼블릭 인터페이스에 접근자를 포함시키는 순간 객체의 구현이 외부로 새어나가게 된다.  
    디미터 법칙을 위반한 코드는 객체의 내부 구조까지 알고 있어야 하기 때문에 재사용 및 변경이 어렵다.
-   오퍼레이션의 이름은 협력이라는 문맥을 반영해야 한다. 오퍼레이션은 클라이언트가 객체에게 무엇을 원하는지를 표현해야 한다. 객체 자신이 아니라 클라이언트의 의도를 표현하는 이름을 가져야 한다는 것이다.

---

### 9/2(금)

오브젝트 - 6. 메시지와 인터페이스  
[p.198 ~ p.202]

-   소프트웨어 설계에는 법칙이 아닌 원칙이 존재하고 원칙은 예외가 넘쳐난다. 그렇기 때문에 원칙을 맹신하지 말고, 원칙이 적절한 상황과 부적절한 상황을 판단할 수 있는 안목을 기르는 것이 중요하다. 또한, 설계는 트레이드오프의 산물이기 때문에 적절하게 트레이드오프 하는 것이 필요하다.
-   **디미터 법칙은 하나의 도트(.)를 강제하는 규칙이 아니다**:  
    디미터 법칙은 "오직 하나의 도트만을 사용하라"라는 말로 요약되기도 한다. 따라서 자바에서 스트림을 사용하는 경우 아래 코드처럼 기차 충돌을 초래한다고 생각할 것이다.
    ```java
    IntStream.of(1, 2, 3, 4, 5).filter(x -> x % 2 == 0).distinct().count();
    ```
    그러나 위 코드에서 of, filter, distinct 메서드는 모두 IntStream이라는 동일한 클래스의 인스턴스를 반환한다. 이런 경우 디미터 법칙을 위반하지 않는다. 디미터 법칙은 결합도와 관련된 것이며, 이 결합도에 문제가 되는 경우는 객체의 내부 구조가 외부로 노출될 떄로 한정된다.  
    기차 충돌처럼 보이는 코드라도 객체의 내부 구현에 대한 어떤 정보도 외부로 노출하지 않는다면 그것은 디미터 법칙을 준수한 것이다.
-   **겹합도와 응집도의 충돌**:  
    일반적으로 어떤 객체의 상태를 물어본 후 반환된 상태를 기반으로 결정을 내리고 그 결정에 따라 객체의 상태를 변경하는 코드는 묻지 말고 시켜라 스타일로 변경해야 한다. 해당 경우 위임 메서드를 통해 객체의 내부 구조를 감춰 협력에 참여하는 객체들의 결합도를 낮추고, 동시에 객체의 응집도를 높일 수 있다.  
    그러나 묻지 말고 시켜라와 디미터 법칙을 준수하는 것이 항상 긍정적인 결과로 귀결되는 것은 아니다. 모든 상황에서 맹목적으로 위임 메서드를 추가하면 같은 퍼블릭 인터페이스 안에 어울리지 않는 오퍼레이션들이 공존하게 된다. 결과적으로 객체는 상관 없는 책임들을 한꺼번에 떠안게 되기 때문에 결과적으로 응집도가 낮아진다. 클래스는 하나의 변경 원인만을 가져야 한다. 서로 상관없는 책임들이 함께 뭉쳐있는 클래스는 응집도가 낮으며 작은 변경으로도 쉽게 무너질 수 있다. 따라서 묻지말고 시켜라와 디미터 법칙을 무작정 따르면 오히려 애플리케이션은 응집도가 낮은 객체로 넘쳐나게 된다.  
    가끔 묻는 것 외에는 다른 방법이 존재하지 않는 경우도 존재한다. 컬렉션에 포함된 객체들을 처리하는 유일한 방법은 객체에게 물어보는 것이다. 또한, 객체가 정말로 데이터인 경우도 있다. 로버트 마틴은 \<\<클린 코드>>에서 디미터 법칙의 위반 여부는 묻는 대상이 객체인지, 자료구조인지에 달려있다고 설명한다. 객체는 내부 구조를 숨겨야 하므로 디미터 법칙을 따르는 것이 좋지만 자료 구조라면 당연히 내부를 노출해야 하므로 디미터 법칙을 적용할 필요가 없다.

---

### 9/3(토)

오브젝트 - 6. 메시지와 인터페이스  
[p.202 ~ p.210]

-   **명령-쿼리 분리(Command-Query Separation) 원칙**:  
    명령-쿼리 분리 원칙은 퍼블릭 인터페이스에 오퍼레이션을 정의할 때 참고할 수 있는 지침을 제공한다.  
    **명령**과 **쿼리**는 객체의 인터페이스 측면에서 프로시저와 함수를 부르는 또 다른 이름이다.

    -   **명령(Command)**: 객체의 상태를 변경하는 오퍼레이션이다. 객체의 상태를 변경하는 명령은 반환값을 가질 수 없다.
    -   **쿼리(Query)**: 객체와 관련된 정보를 반환하는 오퍼레이션이다. 객체의 정보를 반환하는 쿼리는 상태를 변경할 수 없다.

    명령-쿼리 분리 원칙의 요지는 오퍼레이션은 부수효과를 발생시키는 명령이거나 부수효과를 발생시키지 않는 쿼리 중 하나여야 한다는 것이다. 어떤 오퍼레이션도 명령인 동시에 쿼리여서는 안 된다. 마틴 파울러는 명령-쿼리 분리 원칙에 따라 작성된 객체의 인터페이스를 **명령-쿼리 인터페이스(Command-Query Interface)**라고 부른다.

-   **루틴(routine)**: 어떤 절차를 묶어 호출 가능하도록 이름을 부여한 기능 모듈을 말한다.
    -   **프로시저(procedure)**: 프로시저는 정해진 절차에 따라 내부의 상태를 변경하는 루틴의 한 종류다. 부수효과를 발생시킬 수 있지만 값을 반환할 수 없다.
    -   **함수(function)**: 어떤 절차에 따라 필요한 값을 계산해서 반환하는 루틴의 한 종류다. 값을 반환할 수 있지만 부수효과를 발생시킬 수 없다.
-   명령과 쿼리를 뒤섞는 경우 실행 결과를 예측하기 어려워질 수 있다. 겉으로 보기에는 쿼리처럼 보이지만 내부적으로 부수효과를 가지는 메서드는 이해하기 어렵고, 잘못 사용하기 쉬우며, 버그를 양산하는 경향이 있다. 그렇기 때문에 명령과 쿼리를 명확하게 분리하는 것이 중요하다.

---

### 9/4(일)

오브젝트 - 6. 메시지와 인터페이스  
[p.211 ~ p.215]

-   명령과 쿼리를 분리함으로써 명령형 언어의 틀 안에서 **참조 투명성(referential transparency)**의 장점을 제한적이나마 누릴 수 있다. 참고 투명성이라는 특성을 잘 활용하면 버그가 적고, 디버깅이 용이하며, 쿼리의 순서에 따라 실행 결과가 변하지 않는 코드를 작성할 수 있다.
-   컴퓨터의 세계와 수학의 세계를 나누는 가장 큰 특징은 **부수효과(side effect)**의 존재 유무다. 프로그램에서 부수효과를 발생시키는 두 가지 대표적인 문법은 대입문과 함수(프로시저)다. 수학의 경우 x의 값을 초기화한 후에는 값을 변경하는 것이 불가능하지만 프로그램에서는 대입문을 이용해 다른 값으로 변경하는 것이 가능하다. 함수는 내부에 부수효과를 포함할 경우 동일한 인자를 전달하더라도 부수효과에 의해 그 결괏값이 매번 달라질 수 있다.
-   부수효과를 이야기할 때 빠질 수 없는 것이 **참조 투명성**이다. 참조 투명성이란 어떤 표현식 e가 있을 떄 e의 값으로 e가 나타나는 모든 위치를 교체하더라도 결과가 달라지지 않는 특성을 의미한다.  
     수학에서 함수는 동일한 입력에 대해 항상 동일한 값을 반환하기 때문에 수학의 함수는 참조 투명성을 만족시키는 이상적인 예다. 참조 투명성은 식의 순서를 변경하더라도 결과가 달라지지 않는데 그 이유는 식들이 모두 참조 투명성을 만족하기 때문이다.
-   어떤 값이 변하지 않는 성질은 **불변성(immutability)**이라고 부른다. 어떤 값이 불변한다는 말은 부수효과가 발생하지 않는다는 말과 동일하다. 불변성은 부수효과의 발생을 방지하고 참조 투명성을 만족시킨다.
-   참조 투명성의 두 가지 장점

    1.  모든 함수를 이미 알고 있는 하나의 결괏값으로 대체할 수 있기 때문에 식을 쉽게 계산할 수 있다.
    2.  모든 곳에서 함수의 결괏값이 동일하기 때문에 식의 순서를 변경하더라도 각 식의 결과는 달라지지 않는다.

-   디미터 법칙을 준수하고 묻지 말고 시켜라 스타일을 따르면서도 의도를 드러내는 인터페이스를 설계하는 쉬운 방법이 있다. 그것은 메시지를 먼저 선택하고 그 후에 메시지를 처리할 객체를 선택하는 것이다.  
    명령과 쿼리를 분리하고 계약에 의한 설계 개념을 통해 객체의 협력 방식을 명시적으로 드러낼 수 있는 쉬운 방법이 있다. 그것은 객체의 구현 이전에 객체 사이의 협력에 초점을 맞추고 협력 방식을 단순하고 유연하게 만드는 것이다.  
    메시지를 먼저 선택하는 방식이 미치는 영향은 아래와 같다.

    -   디미터 법칙: 협력이라는 컨텍스트 안에서 객체보다 메시지를 먼저 결정하면 두 객체 사이의 구조적인 결합도를 낮출 수 있다. 수신할 객체를 알지 못한 상태에서 메시지를 먼저 선택하기 때문에 객체의 내부 구조에 대해 고민할 필요가 없어진다. 따라서 메시지가 객체를 선택하게 함으로써 의도적으로 디미터 법칙을 위반할 위험을 최소화 할 수 있다.
    -   묻지 말고 시켜라: 메시지를 먼저 선택하면 묻지 말고 시켜라 스타일에 따라 협력을 구조화하게 된다. 클라이언트의 관점에서 메시지를 선택하기 때문에 필요한 정보를 물을 필요 없이 원하는 것을 표현한 메시지를 전송하면 된다.
    -   의도를 드러내는 인터페이스: 메시지를 먼저 선택한다는 것은 메시지를 전송하는 클라이언트의 관점에서 메시지의 이름을 정한다는 것이다. 당연히 그 이름에는 클라이언트가 무엇을 원하는지, 그 의도가 분명하게 드러날 수밖에 없다.
    -   명령-쿼리 분리 원칙: 메시지를 먼저 선택한다는 것은 협력이라는 문맥 안에서 객체의 인터페이스에 관해 고민한다는 것을 말한다. 객체가 단순히 어떤 일을 해야 하는지뿐만 아니라 협력 속에서 객체의 상태를 예측하고 이해하기 쉽게 만들기 위한 방법에 관해 고민하게 된다. 따라서 예측 가능한 협력을 만들기 위해 명령과 쿼리를 분리하게 될 것이다.

    휼륭한 메시지를 얻기 위한 출발점은 책임 주도 설계 원칙을 따르는 것이며 책임 주도 설계에서는 객체가 메시지를 선택하는 것이 아니라 메시지가 객체를 선택하기 때문에 협력에 적합한 메시지를 결정할 수 있는 확률이 높아진다.

-   위 원칙들은 구현과 부수효과를 캡슐화하고, 높은 응집도와 낮은 결합도를 가진 인터페이스를 만들 수 있는 지침을 제공하지만 실제로 실행 시점에 필요한 구체적인 제약이나 조건을 명확하게 표현하지는 못한다. 오페레이션의 시그니처는 단지 오퍼레이션의 이름과 인자, 반환값의 타입만 명시할 수 있다. 시그니처에는 오퍼레이션을 호출할 수 있는 조건과 어떤 경우에 결과를 반환받을 수 없는지를 명시할 수 없다. 이런 문제를 해결하기 위해 버트란드 마이어는 **계약에 의한 설계(Design By Contract)** 개념을 제안했다. 계약에 의한 설계는 협력을 위해 클라이언트와 서버가 준수해야 하는 제약을 코드 상에 명시적으로 표현하고 강제할 수 있는 방법이다.
-   명령형 프로그래밍과 함수형 프로그래밍
    -   **명령형 프로그래밍(imperative programming)**: 부수효과를 기반으로 하는 프로그래밍 방식을 말한다. 명령형 프로그래밍은 상태를 변경시키는 연산들을 적절한 순서대로 나열함으로써 프로그램을 작성한다. 대부분의 객체지향 프로그래밍 언어들은 메시지에 의한 객체의 상태 변경에 집중하기 때문에 명령형 프로그래밍 언어로 분류된다.
    -   **함수형 프로그래밍(functional programming)**: 부수효과가 존재하지 않는 수학적인 함수에 기반하는 프로그래밍 방식을 말한다. 함수형 프로그래밍은 참조 투명성의 장점을 극대화할 수 있으며 명령형 프로그래밍에 비해 프로그래밍의 실행 결과를 이해하고 예측하기가 더 쉽다. 또한 하드웨어의 발달로 병렬 처리가 중요해진 최근에는 함수형 프로그래밍 언어의 인기가 상승하고 있다.

---

### 9/5(월)

오브젝트 - 7. 객체 분해  
[p.216 ~ p.219]

-   사람의 기억은 단기 기억(short-term memory)과 장기 기억(long-term memory)으로 분류할 수 있다. 장기 기억은 경험한 내용을 수개월에서 길게는 평생에 걸쳐 보관하는 장소를 의미한다. 일반적으로 장기 기억 안에 보관돼 있는 지식은 직접 접근하는 것이 불가능하고 먼저 단기 영역으로 옮긴 후에 처리해야 한다. 단기 기억은 보관돼 있는 지식에 접근할 수 있지만 정보를 보관할 수 있는 속도와 공간적인 측면에서 모두 제약을 받는다.  
    사람이 문제를 해결하기 위해 사용하는 저장소는 장기 기억이 아니라 단기 기억이고, 단기 기억에 저장할 수 있는 정보의 개수는 5개에서 많아 봐야 9개 정도로 제한이 있다. 만약 문제 해결에 필요한 요소의 수가 단기 기억의 용량을 초과하는 순간 문제 해결 능력은 급격하게 떨어지고 만다. 이런 현상을 **인지 과부하(cognitive overload)**라고 부른다.  
    이런 인지 과부하를 방지하는 가장 좋은 방법은 단기 기억 안에 저장될 정보의 양을 조절하는 것이다. 한 번에 다뤄야 하는 정보의 수를 줄이기 위해 본질적인 정보(핵심)만 남기고 불필요한 세부 사항을 걸러내면 문제를 단순화 할 수 있다. 이런 작업을 **추상화**라고 부른다.  
    가장 일반적인 추상화 방법은 한 번에 다뤄야 하는 문제의 크기를 줄이는 것이다. 한 번에 해결하기 어려운 문제를 해결 가능한 작은 여러 문제로 나누어 해결하는 방법이다.이런 작업을 **분해(decomposition)**라고 부른다. 분해의 목적은 큰 문제를 인지 과부하의 부담 없이 단기 기억 안에서 한 번에 처리할 수 있는 규모의 문제로 나누는 것이다.
-   좀 더 효과적인 추상화를 이용해 복잡성을 극복하는 방향으로 프로그래밍 언어는 발전했다. 어셈블리어는 숫자로 된 기계어에 인간이 이해할 수 있는 상징을 부여하려고 노력한 결과이며, 고수준 언어는 기계적인 사고를 강요하는 낮은 수준의 명령어들을 탈피해서 인간의 눈높이에 맞는 기계 독립적이고 의미 있는 추상화를 제공하려는 시도의 결과이다.  
    프로그래밍 언어를 통해 표현되는 추상화의 발전은 다양한 프로그래밍 패러다임의 탄생으로 이어졌다. 프로그래밍 패러다임은 프로그래밍을 구성하기 위해 사용되는 추상화의 종류와 이 추상화를 이용해 소프트웨어를 분해하는 방법의 두 가지 요소로 결정된다.  
    현대적인 프로그래밍 언어를 특징 짓는 중요한 두 가지 추상화 메커니즘은 **프로시저 추상화(procedure abstraction)**와 **데이터 추상화(data abstract)**다. 소프트웨어는 데이터를 이용해 정보를 표현하고 프로시저를 이용해 데이터를 조작한다.

    -   프로시저 추상화:  
        소프트웨어가 무엇을 해야 하는지를 추상화한다. 프로시저 추상화를 중심으로 시스템을 분해하기로 결정했다면 **기능 분해(functional decomposition)**를 하게된다. 기능 분해는 **알고리즘 분해(algorithmic decomposition)**라고 부르기도 한다.
    -   데이터 추상화:  
        소프트웨어가 무엇을 알아야 하는지를 추상화한다. 데이터 추상화를 중심으로 시스템을 분해하는 방법에는 **타입을 추상화(type abstraction)**와 **프로시저를 추상화(procedure abstraction)**가 있다. 전자를 **추상 데이터 타입(Abstract Data Type)**이라고 부르고 후자를 **객체지향(Object-Oriented)**라고 부른다.

---

### 9/6(화)

오브젝트 - 7. 객체 분해  
[p.219 ~ p.222]

-   기능은 오랜 시간 동안 시스템을 분해하기 위한 기준으로 사용됐으며, 이 같은 시스템 분해 방식을 **알고리즘 분해** 또는 **기능 분해**라고 부른다. 기능 분해의 관점에서 추상화의 단위는 프로시저이며 시스템은 프로시저 단위로 분해된다.  
    프로시저는 반복적으로 실행되거나 거의 유사하게 실행되는 작업들을 하나의 장소에 모아놓음으로써 로직을 재사용하고 중복을 방지할 수 있는 추상화 방법이다. 프로시저를 추상화라고 부르는 이유는 내부의 상세한 구현 내용을 모르더라도 인터페이스만 알면 프로시저를 사용할 수 있기 때문이다.  
    프로시저 중심의 기능 분해 관점에서 시스템은 입력 값을 계산해서 출력 값을 반환하는 수학의 함수와 동일하다. 시스템은 필요한 더 작은 작업으로 분해될 수 있는 하나의 큰 메인 함수다.
-   전통적인 기능 분해 방법은 **하양식 접근법(Top-Down Approach)**을 따른다. 하향식 접근법이란 시스템을 구성하는 가장 최상위(topmost) 기능을 정의하고, 이 최상위 기능을 좀 더 작은 단계의 하위 기능으로 분해해 나가는 과정을 말한다. 분해는 세분화된 마지막 하위 기능이 프로그래밍 언어로 구현 가능한 수준이 될 때까지 반복한다.  
     최상위의 추상적인 함수 정의는 시스템의 기능을 표현하는 하나의 문장으로 나타내고, 이 문장을 구성하는 좀 더 세부적인 단계의 문장으로 분해해 나가는 방식을 따른다. 기능 분해의 초점은 하나의 문장으로 표현된 기능을 여러 개의 작은 기능으로 분해하는 것이다.
-   최상위 문장은 시스템을 시작하는 메인 프로시저로 구현될 것이다. 취상위 문장은 세분화된 절체로 구체화해야 하는데 이때 각 정제 단계는 이전 문장의 추상화 수준을 감소시켜야 한다. 모든 문장이 정제 과정을 거치면서 하나 이상의 좀 더 단순하고 구체적인 문장들의 조합으로 분해돼야 한다.
-   기능 분해의 결과는 최상위 기능을 수행하는 데 필요한 절차들을 실행되는 시간 순서에 따라 나열한 것이다. 마치 책의 목차를 정리하고 그 안에 내용을 채원 넣는 과정과 유사하다.
-   기능 분해 방법에서는 기능을 중심으로 필요한 데이터를 결정한다. 기능 분해에서 기능이 메인이며 데이터는 기능을 보조하는 서브의 개념이다. 기능 분해를 위한 하향식 접근법은 먼저 필요한 기능을 생각하고 이 기능을 분해하고 정제하는 과정에서 필요한 데이터의 종류와 저장 방식을 식별한다. 그러나 이러한 방식은 유지보수에 다양한 문제를 야기한다.

---

### 9/7(수)

오브젝트 - 7. 객체 분해  
[p.222 ~ p.229]

-   루비는 순수한 객체지향 언어이지만 객체에 속하지 않은 것처럼 보이는 전역 변수와 전역 범위의 프로시저를 가진다. 따라서 객체지향 패러다임뿐만 아니라 전통적인 기능 분해 방식에 따라 코드를 작성하는 것도 가능하다.
-   하향식 기능 분해는 시스템을 최상위의 가장 추상적인 메인 함수로 정의하고, 메인 함수를 구현 가능한 수준까지 세부적인 단계로 분해하는 방법이다. 하향식 기능 분해 방식은 메인 함수를 루트로 하는 트리(tree)로 표현할 수 있으며 트리에서 각 노드(node)는 시스템을 구성하는 하나의 프로시저를 의미한다. 한 노드의 자식 노드는 부모 노드를 구현하는 절차 중의 한 단계를 의미한다. 이러한 하향식 기능 분해는 논리적으로 체계적인 시스템의 개발 절차를 제시하지만 체계적이고 이상적인 방법이 불규칙하고 불완전한 인간과 만나는 지점에서 혼란과 동요가 발생한다.
-   아래는 하향식 설계의 문제점이다. 하향식 설계는 변경에 취약한 설계를 낳는다.
    -   시스템은 하나의 메인 함수로 구성돼 있지 않다.
    -   기능 추가나 요구사항 변경으로 인해 메인 함수를 빈번하게 수정해야 한다.
    -   비즈니스 로직이 사용자 인터페이스와 강하게 결합된다.
    -   하향식 분해는 너무 이른 시기에 함수들의 실행 순서를 고정시키기 때문에 유연성과 재사용성이 저하된다.
    -   데이터 형식이 변경될 경우 파급효과를 예측할 수 없다.
-   **하나의 메인 함수라는 비현실적인 아이디어**:  
    모든 시스템은 최초에 릴리스된 당시의 모습을 그대로 유지하지 않는다. 이것은 시스템이 오직 하나의 메인 함수만으로 구현된다는 개념과는 완전히 모순된다.  
    대부분의 추가되는 기능은 최초에 배포된 메인 함수의 일부가 아닐 것이다. 결국 처음에 중요하게 생각됐던 메인 함수는 동등하게 중요한 여러 함수들 중 하나로 전락하고 만다. 거의 모든 시스템에서 하나의 메인 기능이란 개념은 존재하지 않는다. 모든 기능들은 규모의 차이는 있지만 기능성의 측면에서는 동등하게 독립적이고 완결된 하나의 기능을 표현한다. 그렇기 때문에 하향식 접근법은 하나의 알고리즘을 구현하거나 배치 처리를 구현하기에는 적합하지만 현대적인 상호작용 시스템을 개발하는 데는 적합하지 않다. 현대적인 시스템은 동일한 수준의 다양한 기능으로 구성된다. 버란란드 마이어는 "실제 시스템에 정상(top)은 이란 존재하지 않는다"라고 말한다.
-   **메인 함수의 빈번한 재설계**:  
    시스템 안에는 여러 개의 정상(top)이 존재하기 때문에 결과적으로 하나의 메인 함수를 유일한 정상으로 간주하는 하향식 기능 분해의 경우에는 새로운 기능을 추가할 때마다 매번 메인 함수를 수정해야 한다. 기존 코드를 수정하는 것은 항상 새로운 버그를 만들어낼 확률을 높인다.  
    시스템은 여러 개의 정상으로 구성되기 때문에 새로운 정상을 추가할 떄마다 하나의 정상이라고 간주했던 함수의 내부 구현을 수정할 수밖에 없다. 기존 코드의 빈번한 수정으로 인한 버그 발생 확률이 높아지게 되고 이로 인해 시스템은 변경에 취약해진다.

---

### 9/8(목)

오브젝트 - 7. 객체 분해  
[p.229 ~ p.231]

-   **비즈니스 로직과 사용자 인터페이스의 결합**:  
    하향식 접근법은 비즈니스 로직을 설계하는 초기 단계부터 입력 방법과 출력 양식을 함께 고민하도록 강요한다. 그렇기 때문에 코드 안에서 비즈니스 로직과 사용자 인터페이스 로직이 밀접하게 결합된다. 이때 문제는 비즈니스 로직과 사용자 인터페이스 로직이 변경되는 빈도가 다르다는 것이다. 사용자 인터페이스를 자주 변경되는 부분이지만 비즈니스 로직은 사용자 인터페이스에 비해 변경이 적게 발생한다. 하향식 접근법은 이 둘을 한데 섞기 때문에 사용자 인터페이스를 변경하는 경우 비즈니스 로직까지 영향을 받게 된다. 따라서 하향식 접근법은 변경에 불안정한 아키텍처를 낳는다.
-   **성급하게 결정된 실행 순서**:  
    하향식으로 기능을 분해하는 과정은 하나의 함수를 더 작은 함수로 분해하고, 분해된 함수들의 실행 순서를 결정하는 작업으로 요약할 수 있다. 이것은 설계를 시작하는 시점부터 시스템이 무엇(what)을 해야 하는지가 아니라 어떻게(how) 동작해야 하는지에 집중하도록 만든다. 이러한 설계는 처음부터 구현을 염두에 두기 때문에 자연스럽게 함수들의 실행 순서를 정의하는 시간 제약(temporal constraint)을 강조한다. 메인 함수가 작은 함수들로 분해되기 위해서는 우선 함수들의 순서를 결정해야 한다.  
    실행 순서나 조건, 반복과 같은 제어 구조를 미리 결정하지 않고는 분해를 진행할 수 없기 때문에 기능 분해 방식은 중앙집중 제어 스타일(centralized control style)의 형태를 띨 수밖에 없다. 결과적으로 모든 중요한 제어 흐름의 결정이 상위 함수에서 이뤄지고 하위 함수는 상위 함수의 흐름에 따라 적절한 시점에 호출된다.  
    이때 중요한 설계 결정사항인 함수의 제어 구조가 빈번한 변경의 대상이라는 점이 문제다. 이를 해결할 수 있는 방법은 자주 변경되는 시간적인 제약에 대한 미련을 버리고 좀 더 안정적인 논리적 제약(logical constraint)을 설계의 기준으로 삼는 것이다. 객체지향은 함수 간의 호출 순서가 아니라 객체 사이의 논리적인 관계를 중심으로 관계를 이끌어 나간다. 결과적으로 전체적인 시스템은 어떤 한 구성요소로 제어가 집중되지 않고 여러 객체들 사이로 제어 주체가 분산된다.  
    하향식 접근법을 통해 분해한 함수들은 재사용하기 어렵다. 모든 함수는 상위 함수를 분해하는 과정에서 필요에 따라 식별되며, 그에 따라 상위 함수가 강요하는 문맥(context) 안에서만 의미를 가지기 때문이다. 재사용이라는 개념은 일반성이라는 의미를 포함하기 때문에 하향식 접근법과 반대된다.  
    하향식 설계와 관련된 모든 문제의 원인은 **결합도**이다. 함수는 상위 함수가 강요하는 문맥에 강하게 결합된다. 함수는 함께 절차를 구성하는 다른 함수들과 시간적으로 강하게 결합되어 있다. 강한 결합도는 시스템을 변경에 취약하게 만들고 이해하기 어렵게 만든다.

---

### 9/9(금)

오브젝트 - 7. 객체 분해  
[p.231 ~ p.235]

-   **데이터 변경으로 인한 파급효과**:  
    하향식 기능 분해의 가장 큰 문제점은 어떤 데이터를 어떤 함수가 사용하고 있는지를 추적하기 어렵다는 것이다.
    따라서 데이터 변경으로 인해 어떤 함수가 영향을 받을지 예상하기 어렵다. 어떤 데이터가 어떤 함수에 의존하고 있는지를 파악하기 위해서는 모든 함수를 열어 데이터를 사용하고 있는지를 확인해봐야 하기 때문에 굉장히 어렵다.  
    이것은 코드 안에서 택스트를 검색하는 단순한 문제가 아니라 의존성과 결합도 그리고 테스트의 문제다. 데이터의 변경으로 인한 영향은 데이터를 직접 참조하는 모든 함수로 퍼져나간다. 스파게티처럼 얽히고 설킨 대규모 시스템에서 데이터를 참조하는 함수들을 찾아 정상적으로 동작하는지 여부를 테스트하는 것은 기술보다는 운의 문제다.  
    데이터 변경으로 인해 발생하는 함수에 대한 영향도를 파악하는 것은 생각보다 쉽지 않다. 따라서 데이터 변경으로 인한 영향을 최소화하려면 데이터와 함께 변경되는 부분과 그렇지 않은 부분을 명확하게 분리해야 한다. 이를 위해 데이터와 함께 변경되는 부분을 하나의 구현 단위로 묶고 외부에서는 제공되는 함수만 이용해 데이터에 접근해야 한다. 즉, 잘 정의된 퍼블릭 인터페이스를 통해 데이터에 대한 접근을 통제해야 하는 것이다. 이것이 의존성 관리의 핵심이다. 데이비드 파나스는 기능 분해가 가진 본질적인 문제를 해결하기 위해 이 같은 개념을 기반으로 한 **정보 은닉**과 **모듈**이라는 개념을 제시했다.
-   하향식 분해가 유용한 경우도 있다. 하향식 아이디어는 설계가 어느 정도 안정화된 후에는 설계의 다양한 측면을 논리적으로 설명하고 문서화하기에 용이하다. 그러나 설계를 문서화하는 데 적절한 방법과 좋은 구조를 설계할 수 있는 방법이 동일한 것은 아니다. 마이클 잭슨은 하향식 방법이 지니고 있는 태생적인 한계와 사람들이 오해하는 부분을 아래와 같이 설명했다.

    > 하향식은 이미 완전히 이해된 사실을 서술하기에 적합한 방법이다. 그러나 하양식은 새로운 것을 개발하고, 설계하고, 발견하는 데는 적합한 방법이 아니다.  
    > 시스템이나 프로그램 개발자가 이미 완료된 결과에 대한 명확한 아이디어를 가지고 있다면 머릿속에 있는 것을 종이에 서술하기 위해 하양식을 사용할 수 있다. 이것은 사람들이 하향식 설계나 개발을 할 수 있고, 그렇게 함으로써 성공할 수 있다고 믿게 만드는 이유다. 하향식 단계가 시작될 때 문제는 이미 해결됐고, 오직 해결돼야만 하는 세부사항만이 존재할 뿐이다.

    하양식 분해는 작은 프로그램과 개별 알고리즘을 위해서는 유용한 패러다임이다. 특히 프로그래밍 과정에서 **이미 해결된** 알고리즘을 문서화하고 서술하는 데는 휼륭한 기법이다. 그러나 실제로 동작하는 커다란 소프트웨어를 설계하는 데 적합한 방법은 아니다.

---

### 9/10(토)

오브젝트 - 7. 객체 분해  
[p.235 ~ p.240]

-   시스템의 변경을 관리하는 기본적인 전략은 함께 변경되는 부분을 하나의 구현 단위로 묶고 퍼블릭 인터페이스를 통해서만 접근하도록 하는 것이다. 즉, 기능을 기반으로 시스템을 분해하는 것이 아니라 변경의 방향에 맞춰 시스템을 분해하는 것이다.
-   데이비드 피나스는 **정보 은닉(information hiding)**의 개념에 대해 소개했다. 정보 은닉은 시스템을 모듈 단위로 분해하기 위한 기본 원리로 시스템에서 자주 변경되는 부분을 상대적으로 덜 변경되는 안정적인 인터페이스 뒤로 감춰야 한다는 것이 핵심이다. 데이비드 피나스는 시스템을 모듈로 분할하는 원칙은 외부에 유출돼서는 안 되는 비밀의 윤곽을 따라야 한다고 주장한다.
-   이때 모듈은 서브 프로그램이라기 보다는 책임의 할당이다. 모듈화는 개별적인 모듈에 대한 작업이 시작되기 전에 정해져야 하는 설계 결정들을 포함한다. 분할된 모듈은 다른 모듈에 대해 감춰야 하는 설계 결정에 따라 특징 지어지며 해당 모듈 내부의 작업을 가능한 적게 노출하는 인터페이스 또는 정의를 선택한다. 모듈은 변경될 가능성이 있는 비밀을 내부로 감추고, 잘 정의되고 쉽게 변경되지 않을 퍼블릭 인터페이스를 외부에 제공해서 내부의 비밀에 함부로 접근하지 못하게 한다.
-   시스템을 모듈로 분해한 후에는 각 모듈 내부를 구현하기 위해 기능 분해를 적용할 수 있다, 기능 분해가 하나의 기능을 구현하기 위해 필요한 기능들을 순차적으로 찾아가는 탐색의 과정이라면 모듈 분해는 감춰야 하는 비밀을 선택하고 비밀 주변에 안정적인 보호막을 설치하는 보존의 과정이다.
-   시스템을 모듈로 분해하는 방법은 시스템이 감춰야 하는 비밀은 찾은 뒤, 외부에서 내부의 비밀에 접근하지 못하도록 방어막을 치는 것이다. 이 방어막이 바로 퍼블릭 인터페이스이다. 모듈은 아래 2가지 비밀을 감춰야 한다.

    1. **복잡성**: 모듈이 너무 복잡한 경우 이해하고 사용하기 어렵다. 외부에 모듈을 추상화할 수 있는 간단한 인터페이스를 제공해서 모듈의 복잡도를 낮춘다.
    2. **변경 가능성**: 변경 가능한 설계 결정이 외부에 노출된 경우 실제로 변경이 발생했을 때 파급효과가 커진다. 변경 발생 시 하나의 모듈만 수정하면 되도록 변경 가능한 설계 결정을 모듈 내부로 감추고 외부에는 쉽게 변경되지 않을 인터페이스를 제공한다.

    시스템의 가장 일반적인 비밀은 데이터이다. 그러나 비밀이 반드시 데이터일 필요는 없으며 복잡한 로직이나 변경 가능성이 큰 자료 구조일 수도 있다.

-   모듈의 장점과 한계

    -   **모듈 내부의 변수가 변경되더라도 모듈 내부에만 영향을 미친다.**:  
        모듈을 사용하면 모듈 내부에 정의된 변수를 직접 참조하는 코드의 위치를 모듈 내부로 제한할 수 있다. 따라서 어떤 데이터가 변경되었을 때 해당 데이터를 정의한 모듈만 영향을 받게된다. 모듈은 데이터 변경으로 인한 파급 효과를 제어할 수 있기 떄문에 코드 수정과 디버깅에 더 용이하다.
    -   **비즈니스 로직과 사용자 인터페이스에 대한 관심사를 분리한다.**:  
        모듈은 비즈니스 로직과 관련된 관심사만을 담당하고 사용자 인터페이스와 관련된 관심사는 다른 곳에서 처리한다. 그렇기 떄문에 사용자 인터페이스가 변경되더라도 비즈니스 로직은 변경되지 않는다.
    -   **전역 변수와 전역 함수를 제거함으로써 네임스페이스 오염(namespace pollution)을 방지한다.**:  
        모듈의 한 가지 용도는 네임스페이스를 제공하는 것이다. 변수와 함수를 모듈 내부에 포함시키기 때문에 다른 모듈에서도 동일한 이름을 사용할 수 있다. 따라서 모듈은 전역 네임스페이스의 오염을 방지하고, 이름 충돌(name collision)의 위험을 완하한다.

    모듈은 **기능이 아니라 변경의 정도**에 따라서 시스템을 분해한다. 각 모듈은 외부에 감춰야 하는 비밀과 관련성 높은 데이터와 함수의 집합이다. 또한, 모듈과 모듈 사이에는 퍼블릭 인터페이스를 통해 통신한다. 따라서 모듈 내부는 높은 응집도를 유지하며 낮은 결합도를 유지한다.  
    모듈은 데이터와 함수가 통합된 한 차원 높은 추상화를 제공하는 설계 단위로, 모듈의 핵심은 데이터이다. 모듈은 정보은닉을 통해 데이터라는 존재를 설계의 중심 요소로 부각시킨다.  
    모듈이 프로시저 추상화보다는 높은 추상화 개념을 제공하지만 태생적으로 변경을 관리하기 위한 구현 기법이기 때문에 추상화 관점에서는 한계점이 명확하다. 모듈은 인스턴스의 개념을 제공하지 않는다는 큰 단점이 존재한다. 그렇기 때문에 이를 보완하기 위해 등장한 개념이 추상 데이터 타입이다.

---

### 9/11(일)

오브젝트 - 7. 객체 분해  
[p.240 ~ p.241]

-   프로그래밍 언어에서 **타입(type)**이란 변수에 저장할 수 있는 내용물의 종류와 변수에 적용될 수 있는 연산의 가짓수를 의미한다. 정수 타입의 변수를 선언하는 것은 프로그램 내에서 변수명을 참조할 때 해당 변수를 임의의 정숫값으로 간주하라고 말하는 것과 같다. 타입을 통해 저장된 값에 대해 수행될 수 있는 연산의 집합을 결정할 수 있기 때문에 변수의 값이 어떻게 행동할 것이라는 것을 예측할 수 있게 한다.
-   프로그래밍 언어는 다양한 내장 타입(built-in type)을 제공한다. 기능 분해의 시대에 사용되던 절차형 언어들은 적은 수의 내장 타입만을 제공했으며 새로운 타입을 추가하는 것이 불가능하거나 제한적이었다. 이 시대의 프로그램에서 사용하는 주된 추상화는 프로시저 추상화였다. 그러나 프로시저 추상화로는 프로그램의 표현력을 향상시키는 데 한계까 있었다.
-   바바라 리스코프는 프로시저 추상화를 보완하기 위해 **데이터 추상화(data abstraction)**의 개념을 제안했다. 추상 데이터 타입은 추상 객체의 클래스를 정의한 것으로 추상 객체에 사용할 수 있는 오퍼레이션을 이용해 규정된다. 이것은 오퍼레이션을 이용해 추상 데이터 타입을 정의할 수 있음을 의미한다. 추상 데이터 객체를 사용할 떄 프로그래머는 오직 객체가 외부에 제공하는 행위에만 관심을 가지며 행위가 구현되는 세부적인 사항에 대해서는 무시한다. 객체가 저장소에서 어떻게 표현되는지와 같은 구현 정보는 오직 오퍼레이션을 어떻게 구현할 것인지에 집중할 떄만 필요하다. 객체의 사용자는 이 정보를 알거나 제공받을 필요가 없다.

---

### 9/12(월)

오브젝트 - 7. 객체 분해  
[p.241 ~ p.244]

-   리스코프는 데이터 추상화를 통해 소프트웨어를 이용해 표현할 수 있는 추상화의 수준을 한 단계 높였다.
-   추상 데이터 타입을 구현하려면 다음과 같은 특성을 위한 프로그래밍 언어의 지원이 필요하다. 리스코프는 추상 데이터 타입을 정의하기 위해 제시한 언어적인 메커니즘을 오퍼레이션 클러스터(operation cluster)라고 불렀다.
    -   타입 정의를 선언할 수 있어야 한다.
    -   타입의 인스턴스를 다루기 위해 사용할 수 있는 오퍼레이션의 집합을 정의할 수 있어야 한다.
    -   제공된 오퍼레이션을 통해서만 조작할 수 있도록 데이터를 외부로부터 보호할 수 있어야 한다.
    -   타입에 대해 여러 개의 인스턴스를 생성할 수 있어야 한다.
-   루비에서는 추상 데이터 타입을 흉내 낼 수 있는 Struct 라는 구성 요소를 제공한다.
-   추상 데이터 타입을 설계하려면 어떤 데이터를 감추기 위해 데이터 추상화가 필요한지에 대한 질문을 해야 한다. 내부에 캡슐화할 데이터를 결정했다면 추상 데이터 타입에 적용할 수 있는 오퍼레이션을 결정해야 한다.
-   추상 데이터 타입은 사람들이 세상을 바라보는 방식에 좀 더 근접해지도록 추상화 수준을 향상시킨다. 그러나 추상 데이터 타입 정의를 기반으로 객체를 생성하는 것이 가능하지만 여전히 데이터와 기능을 분리해서 바라보기 때문에 주의가 필요하다. 추상 데이터 타입으로 표현된 데이터를 이용해서 기능을 구현하는 핵심 로직은 추상 데이터 타입 외부에 존재한다. 추상 데이터 타입은 데이터에 대한 관점을 설계의 표면으로 끌어올리기는 하지만 여전히 데이터와 기능을 분리하는 절차적인 설계의 틀에 갇혀있다. 추상 데이터 타입의 기본 의도는 프로그래밍 언어가 제공하는 타입처럼 동작하는 사용자 정의 타입을 추가할 수 있게 하는 것이다.
-   클래스는 추상 데이터 타입이 아니다.
