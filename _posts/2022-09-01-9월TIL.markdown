---
layout: post
title: "2022년 9월 TIL"
date: 2022-09-01 22:56:00 +0900
categories: 202209 TIL
---

---

### 9/1(목)

오브젝트 - 6. 메시지와 인터페이스  
[p.186 ~ p.197]

-   **묻지 말고 시켜라(Tell, Don't Ask)**:  
    디미터 법칙은 휼륭한 메시지는 객체의 상태에 관해 묻지 말고 원하는 것을 시켜야 한다는 사실을 강조한다. 묻지 말고 시켜라는 이런 스타일의 메시지 작성을 장려하는 원칙을 가리키는 용어다.  
    메시지 전송자는 메시지 수신자의 상태를 기반으로 결정을 내린 후 메시지 수신자의 상태를 바꿔서는 안 된다. 객체의 외부에서 해당 객체의 상태를 기반으로 결정을 내리는 것은 객체의 캡슐화를 위반한다. 절차적인 코드는 정보를 얻은 후에 결정하지만 객체지향 코드는 객체에게 그것을 하도록 시킬 뿐이다.  
    묻지 말고 시켜라 원칙을 따르면 밀접하게 연관된 정보와 행동을 함께 가지는 객체를 만들 수 있다. 객체지향의 기본은 함께 변경될 확률이 높은 정보와 행동을 객체의 외부가 아닌 내부에 위치시키기 때문에 자연스럽게 정보와 행동을 동일한 클래스 안에 두게 된다. 따라서 묻지 말고 시켜라 원칙을 따르도록 메시지를 결정하다 보면 자연스럽게 정보 전문가에게 책임을 할당하게 되고 높은 응집도를 가진 클래스를 얻을 확률이 높아진다.  
    상태를 묻는 오퍼레이션을 행동을 요청하는 오퍼레이션으로 대체함으로써 인터페이스를 향상시키는 것이 좋다. 협력을 설계하고 객체가 수신할 메시지를 결정하는 매 순간 묻지 말고 시켜라 원칙과 디미터 법칙을 머릿속에 떠올리는 것은 퍼블릭 인터페이스의 품질을 향상시킬 수 있는 좋은 습관이다.  
    호출하는 객체는 이웃 객체가 수행하는 역할을 사용해 무엇을 원하는지를 서술해야 하고, 호출되는 객체가 어떻게 해야 하는지를 스스로 결정하게 해야 한다. 객체는 자신이 내부적으로 보유하고 있는 정보나 메시지 전송의 결과로 얻게 되는 정보만 사용해서 의사결정을 내리게 된다. 이 스타일을 일관성 있게 따르게 되면 좀 더 유연한 코드를 얻을 수 있다. 기존 객체를 동일한 역할을 하는 객체로 교체하기 쉬워지기 때문이다.
-   **의도를 드러내는 인터페이스**:  
    켄트 벡은 \<\<Smalltalk Best Practice Patterns>> 책에서 메서드를 명명하는 두 가지 방법을 설명했다. 첫 번쨰 방법은 메서드가 작업을 어떻게 수행하는지를 나타내도록 이름 짓는 것이고, 두 번째 방법은 '어떻게'가 아니라 '무엇'을 하는지를 드러내는 것이다.

    -   메서드가 작업을 어떻게 수행하는지를 나타내도록 이름 짓는 방법:  
        이 방법은 아래와 같은 이유로 좋지 않다.  
        이 경우 메서드에 대해 제대로 커뮤니케이션하지 못한다. 동일한 작업을 하는 메서드들이 존재하더라도 그 이름이 다르기 때문에 각 메서드의 내부 구현을 정확하게 이해하지 못한다면 메서드들이 동일한 작업을 수행한다는 사실을 알아채기 어렵다.  
        또한, 메서드 수준에서 캡슐화를 위반한다. 클라이언트로 하여금 객체의 종류를 알도록 강요하기 때문이다. 내부 로직이 변경되면 메서드의 이름 또한 변경해야 한다는 것이고, 메서드의 이름이 바뀌게 되면 메시지를 전송하는 클라이언트의 코드도 변경되야 하기 때문이다. 따라서 책임을 수행하는 방법을 드러내는 메서드를 사용한 설계는 변경에 취약하다.
    -   '어떻게'가 아니라 '무엇'을 하는지를 드러내도록 이름 짓는 방법:  
        어떻게 수행하는지를 드러내는 이름이란 메서드의 내부 구현을 설명하는 이름이다. 그렇기 때문에 협력을 설계하는 이른 단계에서 클래스의 내부 구현을 고민할 수밖에 없다. 반면 무엇을 하는지를 드러내는 이름을 짓기 위해서는 객체가 협력 안에서 수행해야 하는 책임에 관해 고민하게 한다. 이것은 외부의 객체가 메시지를 전송하는 목적을 먼저 생각하게 만들며, 협력하는 클라이언트의 의도에 부합하도록 메서드의 이름을 짓게 된다. 메서드가 무엇을 하는지를 드러내는 이름은 코드를 읽고 이해하기 쉽게 만들뿐만 아니라 유연한 코드를 낳는 지름길이다.

        자바 같은 정적 타이핑 언어에서 메서드의 이름이 같다고 해서 동일한 메시지를 처리할 수 있는 것은 아니다. 클라이언트가 같은 기능을 수행하는 메서드를 가진 객체들을 동일한 타입으로 간주할 수 있게 하려면 동일한 타입 계층으로 묶어야 한다.가장 간단한 방법은 인터페이스를 정의하고 인터페이스에 공통 오퍼레이션을 정의하는 것이다.  
        메서드의 이름을 무엇을 하느냐에 따라 짓게 된다면 클라이언트의 관점에서 동일한 작업을 수행하는 메서드들을 하나의 타입 계층으로 묶을 수 있는 가능성이 커진다. 그 결과 다양한 타입의 객체가 참여할 수 있는 유연한 협력을 얻을 수 있다. 이처럼 어떻게 하느냐가 아니라 무엇을 하느냐에 따라 메서드의 이름을 짓는 패턴을 **의도를 드러내는 선택자(Intention Revealing Selector)**라고 부른다. 켄트 벡은 메서드에 의도를 드러낼 수 있는 이름을 붙이기 위해 매우 다른 두 번째 구현을 상상하고, 해당 메서드에 이름을 붙인다고 했을 때 생각나는 이름을 사용하라고 권장한다. \<\<도메인 주도 설계>>에서 에릭 에반스는 컨트 벡의 **의도를 드러내는 선택자**를 인터페이스 레벨로 확장한 **의도를 드러내는 인터페이스(Intention Revealing Interface)**를 제시했다. 의도를 드러내는 인터페이스는 구현과 관련된 모든 정보를 캡슐화하고 객체의 퍼블릭 인터페이스에는 협력과 과련된 의도만을 표현해야 한다는 것이다.

-   디미터 법칙을 위반하는 설계는 **인터페이스와 구현의 분리 원칙**을 위반한다. 객체의 내부 구조는 구현에 해당된다. 그렇기 때문에 퍼블릭 인터페이스에 접근자를 포함시키는 순간 객체의 구현이 외부로 새어나가게 된다.  
    디미터 법칙을 위반한 코드는 객체의 내부 구조까지 알고 있어야 하기 때문에 재사용 및 변경이 어렵다.
-   오퍼레이션의 이름은 협력이라는 문맥을 반영해야 한다. 오퍼레이션은 클라이언트가 객체에게 무엇을 원하는지를 표현해야 한다. 객체 자신이 아니라 클라이언트의 의도를 표현하는 이름을 가져야 한다는 것이다.

---

### 9/2(금)

오브젝트 - 6. 메시지와 인터페이스  
[p.198 ~ p.202]

-   소프트웨어 설계에는 법칙이 아닌 원칙이 존재하고 원칙은 예외가 넘쳐난다. 그렇기 때문에 원칙을 맹신하지 말고, 원칙이 적절한 상황과 부적절한 상황을 판단할 수 있는 안목을 기르는 것이 중요하다. 또한, 설계는 트레이드오프의 산물이기 때문에 적절하게 트레이드오프 하는 것이 필요하다.
-   **디미터 법칙은 하나의 도트(.)를 강제하는 규칙이 아니다**:  
    디미터 법칙은 "오직 하나의 도트만을 사용하라"라는 말로 요약되기도 한다. 따라서 자바에서 스트림을 사용하는 경우 아래 코드처럼 기차 충돌을 초래한다고 생각할 것이다.
    ```java
    IntStream.of(1, 2, 3, 4, 5).filter(x -> x % 2 == 0).distinct().count();
    ```
    그러나 위 코드에서 of, filter, distinct 메서드는 모두 IntStream이라는 동일한 클래스의 인스턴스를 반환한다. 이런 경우 디미터 법칙을 위반하지 않는다. 디미터 법칙은 결합도와 관련된 것이며, 이 결합도에 문제가 되는 경우는 객체의 내부 구조가 외부로 노출될 떄로 한정된다.  
    기차 충돌처럼 보이는 코드라도 객체의 내부 구현에 대한 어떤 정보도 외부로 노출하지 않는다면 그것은 디미터 법칙을 준수한 것이다.
-   **겹합도와 응집도의 충돌**:  
    일반적으로 어떤 객체의 상태를 물어본 후 반환된 상태를 기반으로 결정을 내리고 그 결정에 따라 객체의 상태를 변경하는 코드는 묻지 말고 시켜라 스타일로 변경해야 한다. 해당 경우 위임 메서드를 통해 객체의 내부 구조를 감춰 협력에 참여하는 객체들의 결합도를 낮추고, 동시에 객체의 응집도를 높일 수 있다.  
    그러나 묻지 말고 시켜라와 디미터 법칙을 준수하는 것이 항상 긍정적인 결과로 귀결되는 것은 아니다. 모든 상황에서 맹목적으로 위임 메서드를 추가하면 같은 퍼블릭 인터페이스 안에 어울리지 않는 오퍼레이션들이 공존하게 된다. 결과적으로 객체는 상관 없는 책임들을 한꺼번에 떠안게 되기 때문에 결과적으로 응집도가 낮아진다. 클래스는 하나의 변경 원인만을 가져야 한다. 서로 상관없는 책임들이 함께 뭉쳐있는 클래스는 응집도가 낮으며 작은 변경으로도 쉽게 무너질 수 있다. 따라서 묻지말고 시켜라와 디미터 법칙을 무작정 따르면 오히려 애플리케이션은 응집도가 낮은 객체로 넘쳐나게 된다.  
    가끔 묻는 것 외에는 다른 방법이 존재하지 않는 경우도 존재한다. 컬렉션에 포함된 객체들을 처리하는 유일한 방법은 객체에게 물어보는 것이다. 또한, 객체가 정말로 데이터인 경우도 있다. 로버트 마틴은 \<\<클린 코드>>에서 디미터 법칙의 위반 여부는 묻는 대상이 객체인지, 자료구조인지에 달려있다고 설명한다. 객체는 내부 구조를 숨겨야 하므로 디미터 법칙을 따르는 것이 좋지만 자료 구조라면 당연히 내부를 노출해야 하므로 디미터 법칙을 적용할 필요가 없다.

---

### 9/3(토)

오브젝트 - 6. 메시지와 인터페이스  
[p.202 ~ p.210]

-   **명령-쿼리 분리(Command-Query Separation) 원칙**:  
    명령-쿼리 분리 원칙은 퍼블릭 인터페이스에 오퍼레이션을 정의할 때 참고할 수 있는 지침을 제공한다.  
    **명령**과 **쿼리**는 객체의 인터페이스 측면에서 프로시저와 함수를 부르는 또 다른 이름이다.

    -   **명령(Command)**: 객체의 상태를 변경하는 오퍼레이션이다. 객체의 상태를 변경하는 명령은 반환값을 가질 수 없다.
    -   **쿼리(Query)**: 객체와 관련된 정보를 반환하는 오퍼레이션이다. 객체의 정보를 반환하는 쿼리는 상태를 변경할 수 없다.

    명령-쿼리 분리 원칙의 요지는 오퍼레이션은 부수효과를 발생시키는 명령이거나 부수효과를 발생시키지 않는 쿼리 중 하나여야 한다는 것이다. 어떤 오퍼레이션도 명령인 동시에 쿼리여서는 안 된다. 마틴 파울러는 명령-쿼리 분리 원칙에 따라 작성된 객체의 인터페이스를 **명령-쿼리 인터페이스(Command-Query Interface)**라고 부른다.

-   **루틴(routine)**: 어떤 절차를 묶어 호출 가능하도록 이름을 부여한 기능 모듈을 말한다.
    -   **프로시저(procedure)**: 프로시저는 정해진 절차에 따라 내부의 상태를 변경하는 루틴의 한 종류다. 부수효과를 발생시킬 수 있지만 값을 반환할 수 없다.
    -   **함수(function)**: 어떤 절차에 따라 필요한 값을 계산해서 반환하는 루틴의 한 종류다. 값을 반환할 수 있지만 부수효과를 발생시킬 수 없다.
-   명령과 쿼리를 뒤섞는 경우 실행 결과를 예측하기 어려워질 수 있다. 겉으로 보기에는 쿼리처럼 보이지만 내부적으로 부수효과를 가지는 메서드는 이해하기 어렵고, 잘못 사용하기 쉬우며, 버그를 양산하는 경향이 있다. 그렇기 때문에 명령과 쿼리를 명확하게 분리하는 것이 중요하다.
